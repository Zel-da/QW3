
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model UserProgress
 * 
 */
export type UserProgress = $Result.DefaultSelection<Prisma.$UserProgressPayload>
/**
 * Model Assessment
 * 
 */
export type Assessment = $Result.DefaultSelection<Prisma.$AssessmentPayload>
/**
 * Model UserAssessment
 * 
 */
export type UserAssessment = $Result.DefaultSelection<Prisma.$UserAssessmentPayload>
/**
 * Model Certificate
 * 
 */
export type Certificate = $Result.DefaultSelection<Prisma.$CertificatePayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TbmUser
 * 
 */
export type TbmUser = $Result.DefaultSelection<Prisma.$TbmUserPayload>
/**
 * Model ChecklistTemplate
 * 
 */
export type ChecklistTemplate = $Result.DefaultSelection<Prisma.$ChecklistTemplatePayload>
/**
 * Model TemplateItem
 * 
 */
export type TemplateItem = $Result.DefaultSelection<Prisma.$TemplateItemPayload>
/**
 * Model DailyReport
 * 
 */
export type DailyReport = $Result.DefaultSelection<Prisma.$DailyReportPayload>
/**
 * Model ReportDetail
 * 
 */
export type ReportDetail = $Result.DefaultSelection<Prisma.$ReportDetailPayload>
/**
 * Model ReportSignature
 * 
 */
export type ReportSignature = $Result.DefaultSelection<Prisma.$ReportSignaturePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Courses
 * const courses = await prisma.course.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Courses
   * const courses = await prisma.course.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProgress`: Exposes CRUD operations for the **UserProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProgresses
    * const userProgresses = await prisma.userProgress.findMany()
    * ```
    */
  get userProgress(): Prisma.UserProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assessment`: Exposes CRUD operations for the **Assessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assessments
    * const assessments = await prisma.assessment.findMany()
    * ```
    */
  get assessment(): Prisma.AssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAssessment`: Exposes CRUD operations for the **UserAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAssessments
    * const userAssessments = await prisma.userAssessment.findMany()
    * ```
    */
  get userAssessment(): Prisma.UserAssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificate`: Exposes CRUD operations for the **Certificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certificates
    * const certificates = await prisma.certificate.findMany()
    * ```
    */
  get certificate(): Prisma.CertificateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tbmUser`: Exposes CRUD operations for the **TbmUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbmUsers
    * const tbmUsers = await prisma.tbmUser.findMany()
    * ```
    */
  get tbmUser(): Prisma.TbmUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checklistTemplate`: Exposes CRUD operations for the **ChecklistTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChecklistTemplates
    * const checklistTemplates = await prisma.checklistTemplate.findMany()
    * ```
    */
  get checklistTemplate(): Prisma.ChecklistTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.templateItem`: Exposes CRUD operations for the **TemplateItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TemplateItems
    * const templateItems = await prisma.templateItem.findMany()
    * ```
    */
  get templateItem(): Prisma.TemplateItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyReport`: Exposes CRUD operations for the **DailyReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyReports
    * const dailyReports = await prisma.dailyReport.findMany()
    * ```
    */
  get dailyReport(): Prisma.DailyReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportDetail`: Exposes CRUD operations for the **ReportDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportDetails
    * const reportDetails = await prisma.reportDetail.findMany()
    * ```
    */
  get reportDetail(): Prisma.ReportDetailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportSignature`: Exposes CRUD operations for the **ReportSignature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportSignatures
    * const reportSignatures = await prisma.reportSignature.findMany()
    * ```
    */
  get reportSignature(): Prisma.ReportSignatureDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.3
   * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Course: 'Course',
    UserProgress: 'UserProgress',
    Assessment: 'Assessment',
    UserAssessment: 'UserAssessment',
    Certificate: 'Certificate',
    Team: 'Team',
    TbmUser: 'TbmUser',
    ChecklistTemplate: 'ChecklistTemplate',
    TemplateItem: 'TemplateItem',
    DailyReport: 'DailyReport',
    ReportDetail: 'ReportDetail',
    ReportSignature: 'ReportSignature'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "course" | "userProgress" | "assessment" | "userAssessment" | "certificate" | "team" | "tbmUser" | "checklistTemplate" | "templateItem" | "dailyReport" | "reportDetail" | "reportSignature"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      UserProgress: {
        payload: Prisma.$UserProgressPayload<ExtArgs>
        fields: Prisma.UserProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          findFirst: {
            args: Prisma.UserProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          findMany: {
            args: Prisma.UserProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>[]
          }
          create: {
            args: Prisma.UserProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          createMany: {
            args: Prisma.UserProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>[]
          }
          delete: {
            args: Prisma.UserProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          update: {
            args: Prisma.UserProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          deleteMany: {
            args: Prisma.UserProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>[]
          }
          upsert: {
            args: Prisma.UserProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          aggregate: {
            args: Prisma.UserProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProgress>
          }
          groupBy: {
            args: Prisma.UserProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProgressCountArgs<ExtArgs>
            result: $Utils.Optional<UserProgressCountAggregateOutputType> | number
          }
        }
      }
      Assessment: {
        payload: Prisma.$AssessmentPayload<ExtArgs>
        fields: Prisma.AssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findFirst: {
            args: Prisma.AssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findMany: {
            args: Prisma.AssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          create: {
            args: Prisma.AssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          createMany: {
            args: Prisma.AssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          delete: {
            args: Prisma.AssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          update: {
            args: Prisma.AssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          upsert: {
            args: Prisma.AssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          aggregate: {
            args: Prisma.AssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssessment>
          }
          groupBy: {
            args: Prisma.AssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssessmentCountAggregateOutputType> | number
          }
        }
      }
      UserAssessment: {
        payload: Prisma.$UserAssessmentPayload<ExtArgs>
        fields: Prisma.UserAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>
          }
          findFirst: {
            args: Prisma.UserAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>
          }
          findMany: {
            args: Prisma.UserAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>[]
          }
          create: {
            args: Prisma.UserAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>
          }
          createMany: {
            args: Prisma.UserAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>[]
          }
          delete: {
            args: Prisma.UserAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>
          }
          update: {
            args: Prisma.UserAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.UserAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserAssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>[]
          }
          upsert: {
            args: Prisma.UserAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssessmentPayload>
          }
          aggregate: {
            args: Prisma.UserAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAssessment>
          }
          groupBy: {
            args: Prisma.UserAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<UserAssessmentCountAggregateOutputType> | number
          }
        }
      }
      Certificate: {
        payload: Prisma.$CertificatePayload<ExtArgs>
        fields: Prisma.CertificateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findFirst: {
            args: Prisma.CertificateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findMany: {
            args: Prisma.CertificateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          create: {
            args: Prisma.CertificateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          createMany: {
            args: Prisma.CertificateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          delete: {
            args: Prisma.CertificateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          update: {
            args: Prisma.CertificateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          deleteMany: {
            args: Prisma.CertificateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          upsert: {
            args: Prisma.CertificateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          aggregate: {
            args: Prisma.CertificateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificate>
          }
          groupBy: {
            args: Prisma.CertificateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TbmUser: {
        payload: Prisma.$TbmUserPayload<ExtArgs>
        fields: Prisma.TbmUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TbmUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TbmUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>
          }
          findFirst: {
            args: Prisma.TbmUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TbmUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>
          }
          findMany: {
            args: Prisma.TbmUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>[]
          }
          create: {
            args: Prisma.TbmUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>
          }
          createMany: {
            args: Prisma.TbmUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TbmUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>[]
          }
          delete: {
            args: Prisma.TbmUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>
          }
          update: {
            args: Prisma.TbmUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>
          }
          deleteMany: {
            args: Prisma.TbmUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TbmUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TbmUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>[]
          }
          upsert: {
            args: Prisma.TbmUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TbmUserPayload>
          }
          aggregate: {
            args: Prisma.TbmUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTbmUser>
          }
          groupBy: {
            args: Prisma.TbmUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<TbmUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.TbmUserCountArgs<ExtArgs>
            result: $Utils.Optional<TbmUserCountAggregateOutputType> | number
          }
        }
      }
      ChecklistTemplate: {
        payload: Prisma.$ChecklistTemplatePayload<ExtArgs>
        fields: Prisma.ChecklistTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChecklistTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChecklistTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>
          }
          findFirst: {
            args: Prisma.ChecklistTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChecklistTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>
          }
          findMany: {
            args: Prisma.ChecklistTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>[]
          }
          create: {
            args: Prisma.ChecklistTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>
          }
          createMany: {
            args: Prisma.ChecklistTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChecklistTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>[]
          }
          delete: {
            args: Prisma.ChecklistTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>
          }
          update: {
            args: Prisma.ChecklistTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>
          }
          deleteMany: {
            args: Prisma.ChecklistTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChecklistTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChecklistTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>[]
          }
          upsert: {
            args: Prisma.ChecklistTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistTemplatePayload>
          }
          aggregate: {
            args: Prisma.ChecklistTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChecklistTemplate>
          }
          groupBy: {
            args: Prisma.ChecklistTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChecklistTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChecklistTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<ChecklistTemplateCountAggregateOutputType> | number
          }
        }
      }
      TemplateItem: {
        payload: Prisma.$TemplateItemPayload<ExtArgs>
        fields: Prisma.TemplateItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplateItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplateItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>
          }
          findFirst: {
            args: Prisma.TemplateItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplateItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>
          }
          findMany: {
            args: Prisma.TemplateItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>[]
          }
          create: {
            args: Prisma.TemplateItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>
          }
          createMany: {
            args: Prisma.TemplateItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplateItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>[]
          }
          delete: {
            args: Prisma.TemplateItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>
          }
          update: {
            args: Prisma.TemplateItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>
          }
          deleteMany: {
            args: Prisma.TemplateItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplateItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TemplateItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>[]
          }
          upsert: {
            args: Prisma.TemplateItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateItemPayload>
          }
          aggregate: {
            args: Prisma.TemplateItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplateItem>
          }
          groupBy: {
            args: Prisma.TemplateItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplateItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplateItemCountArgs<ExtArgs>
            result: $Utils.Optional<TemplateItemCountAggregateOutputType> | number
          }
        }
      }
      DailyReport: {
        payload: Prisma.$DailyReportPayload<ExtArgs>
        fields: Prisma.DailyReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          findFirst: {
            args: Prisma.DailyReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          findMany: {
            args: Prisma.DailyReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>[]
          }
          create: {
            args: Prisma.DailyReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          createMany: {
            args: Prisma.DailyReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>[]
          }
          delete: {
            args: Prisma.DailyReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          update: {
            args: Prisma.DailyReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          deleteMany: {
            args: Prisma.DailyReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>[]
          }
          upsert: {
            args: Prisma.DailyReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          aggregate: {
            args: Prisma.DailyReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyReport>
          }
          groupBy: {
            args: Prisma.DailyReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyReportCountArgs<ExtArgs>
            result: $Utils.Optional<DailyReportCountAggregateOutputType> | number
          }
        }
      }
      ReportDetail: {
        payload: Prisma.$ReportDetailPayload<ExtArgs>
        fields: Prisma.ReportDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportDetailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportDetailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>
          }
          findFirst: {
            args: Prisma.ReportDetailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportDetailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>
          }
          findMany: {
            args: Prisma.ReportDetailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>[]
          }
          create: {
            args: Prisma.ReportDetailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>
          }
          createMany: {
            args: Prisma.ReportDetailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportDetailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>[]
          }
          delete: {
            args: Prisma.ReportDetailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>
          }
          update: {
            args: Prisma.ReportDetailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>
          }
          deleteMany: {
            args: Prisma.ReportDetailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportDetailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportDetailUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>[]
          }
          upsert: {
            args: Prisma.ReportDetailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDetailPayload>
          }
          aggregate: {
            args: Prisma.ReportDetailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportDetail>
          }
          groupBy: {
            args: Prisma.ReportDetailGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportDetailCountArgs<ExtArgs>
            result: $Utils.Optional<ReportDetailCountAggregateOutputType> | number
          }
        }
      }
      ReportSignature: {
        payload: Prisma.$ReportSignaturePayload<ExtArgs>
        fields: Prisma.ReportSignatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportSignatureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportSignatureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>
          }
          findFirst: {
            args: Prisma.ReportSignatureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportSignatureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>
          }
          findMany: {
            args: Prisma.ReportSignatureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>[]
          }
          create: {
            args: Prisma.ReportSignatureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>
          }
          createMany: {
            args: Prisma.ReportSignatureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportSignatureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>[]
          }
          delete: {
            args: Prisma.ReportSignatureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>
          }
          update: {
            args: Prisma.ReportSignatureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>
          }
          deleteMany: {
            args: Prisma.ReportSignatureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportSignatureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportSignatureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>[]
          }
          upsert: {
            args: Prisma.ReportSignatureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSignaturePayload>
          }
          aggregate: {
            args: Prisma.ReportSignatureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportSignature>
          }
          groupBy: {
            args: Prisma.ReportSignatureGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportSignatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportSignatureCountArgs<ExtArgs>
            result: $Utils.Optional<ReportSignatureCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    course?: CourseOmit
    userProgress?: UserProgressOmit
    assessment?: AssessmentOmit
    userAssessment?: UserAssessmentOmit
    certificate?: CertificateOmit
    team?: TeamOmit
    tbmUser?: TbmUserOmit
    checklistTemplate?: ChecklistTemplateOmit
    templateItem?: TemplateItemOmit
    dailyReport?: DailyReportOmit
    reportDetail?: ReportDetailOmit
    reportSignature?: ReportSignatureOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    userProgress: number
    assessments: number
    userAssessments: number
    certificates: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userProgress?: boolean | CourseCountOutputTypeCountUserProgressArgs
    assessments?: boolean | CourseCountOutputTypeCountAssessmentsArgs
    userAssessments?: boolean | CourseCountOutputTypeCountUserAssessmentsArgs
    certificates?: boolean | CourseCountOutputTypeCountCertificatesArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountUserProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProgressWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountUserAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssessmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCertificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    checklistTemplates: number
    dailyReports: number
    users: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checklistTemplates?: boolean | TeamCountOutputTypeCountChecklistTemplatesArgs
    dailyReports?: boolean | TeamCountOutputTypeCountDailyReportsArgs
    users?: boolean | TeamCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountChecklistTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistTemplateWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountDailyReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyReportWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TbmUserWhereInput
  }


  /**
   * Count Type TbmUserCountOutputType
   */

  export type TbmUserCountOutputType = {
    reportSignatures: number
  }

  export type TbmUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportSignatures?: boolean | TbmUserCountOutputTypeCountReportSignaturesArgs
  }

  // Custom InputTypes
  /**
   * TbmUserCountOutputType without action
   */
  export type TbmUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUserCountOutputType
     */
    select?: TbmUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TbmUserCountOutputType without action
   */
  export type TbmUserCountOutputTypeCountReportSignaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSignatureWhereInput
  }


  /**
   * Count Type ChecklistTemplateCountOutputType
   */

  export type ChecklistTemplateCountOutputType = {
    templateItems: number
  }

  export type ChecklistTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    templateItems?: boolean | ChecklistTemplateCountOutputTypeCountTemplateItemsArgs
  }

  // Custom InputTypes
  /**
   * ChecklistTemplateCountOutputType without action
   */
  export type ChecklistTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplateCountOutputType
     */
    select?: ChecklistTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChecklistTemplateCountOutputType without action
   */
  export type ChecklistTemplateCountOutputTypeCountTemplateItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateItemWhereInput
  }


  /**
   * Count Type TemplateItemCountOutputType
   */

  export type TemplateItemCountOutputType = {
    reportDetails: number
  }

  export type TemplateItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportDetails?: boolean | TemplateItemCountOutputTypeCountReportDetailsArgs
  }

  // Custom InputTypes
  /**
   * TemplateItemCountOutputType without action
   */
  export type TemplateItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItemCountOutputType
     */
    select?: TemplateItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TemplateItemCountOutputType without action
   */
  export type TemplateItemCountOutputTypeCountReportDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDetailWhereInput
  }


  /**
   * Count Type DailyReportCountOutputType
   */

  export type DailyReportCountOutputType = {
    reportDetails: number
    reportSignatures: number
  }

  export type DailyReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportDetails?: boolean | DailyReportCountOutputTypeCountReportDetailsArgs
    reportSignatures?: boolean | DailyReportCountOutputTypeCountReportSignaturesArgs
  }

  // Custom InputTypes
  /**
   * DailyReportCountOutputType without action
   */
  export type DailyReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReportCountOutputType
     */
    select?: DailyReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DailyReportCountOutputType without action
   */
  export type DailyReportCountOutputTypeCountReportDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDetailWhereInput
  }

  /**
   * DailyReportCountOutputType without action
   */
  export type DailyReportCountOutputTypeCountReportSignaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSignatureWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    duration: number | null
  }

  export type CourseSumAggregateOutputType = {
    duration: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    duration: number | null
    videoUrl: string | null
    documentUrl: string | null
    color: string | null
    icon: string | null
    isActive: boolean | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: string | null
    duration: number | null
    videoUrl: string | null
    documentUrl: string | null
    color: string | null
    icon: string | null
    isActive: boolean | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    duration: number
    videoUrl: number
    documentUrl: number
    color: number
    icon: number
    isActive: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    duration?: true
  }

  export type CourseSumAggregateInputType = {
    duration?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    duration?: true
    videoUrl?: true
    documentUrl?: true
    color?: true
    icon?: true
    isActive?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    duration?: true
    videoUrl?: true
    documentUrl?: true
    color?: true
    icon?: true
    isActive?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    duration?: true
    videoUrl?: true
    documentUrl?: true
    color?: true
    icon?: true
    isActive?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl: string | null
    documentUrl: string | null
    color: string
    icon: string
    isActive: boolean
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    duration?: boolean
    videoUrl?: boolean
    documentUrl?: boolean
    color?: boolean
    icon?: boolean
    isActive?: boolean
    userProgress?: boolean | Course$userProgressArgs<ExtArgs>
    assessments?: boolean | Course$assessmentsArgs<ExtArgs>
    userAssessments?: boolean | Course$userAssessmentsArgs<ExtArgs>
    certificates?: boolean | Course$certificatesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    duration?: boolean
    videoUrl?: boolean
    documentUrl?: boolean
    color?: boolean
    icon?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    duration?: boolean
    videoUrl?: boolean
    documentUrl?: boolean
    color?: boolean
    icon?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    duration?: boolean
    videoUrl?: boolean
    documentUrl?: boolean
    color?: boolean
    icon?: boolean
    isActive?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "type" | "duration" | "videoUrl" | "documentUrl" | "color" | "icon" | "isActive", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userProgress?: boolean | Course$userProgressArgs<ExtArgs>
    assessments?: boolean | Course$assessmentsArgs<ExtArgs>
    userAssessments?: boolean | Course$userAssessmentsArgs<ExtArgs>
    certificates?: boolean | Course$certificatesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      userProgress: Prisma.$UserProgressPayload<ExtArgs>[]
      assessments: Prisma.$AssessmentPayload<ExtArgs>[]
      userAssessments: Prisma.$UserAssessmentPayload<ExtArgs>[]
      certificates: Prisma.$CertificatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      type: string
      duration: number
      videoUrl: string | null
      documentUrl: string | null
      color: string
      icon: string
      isActive: boolean
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userProgress<T extends Course$userProgressArgs<ExtArgs> = {}>(args?: Subset<T, Course$userProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assessments<T extends Course$assessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$assessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAssessments<T extends Course$userAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$userAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificates<T extends Course$certificatesArgs<ExtArgs> = {}>(args?: Subset<T, Course$certificatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly title: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly type: FieldRef<"Course", 'String'>
    readonly duration: FieldRef<"Course", 'Int'>
    readonly videoUrl: FieldRef<"Course", 'String'>
    readonly documentUrl: FieldRef<"Course", 'String'>
    readonly color: FieldRef<"Course", 'String'>
    readonly icon: FieldRef<"Course", 'String'>
    readonly isActive: FieldRef<"Course", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.userProgress
   */
  export type Course$userProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    where?: UserProgressWhereInput
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    cursor?: UserProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProgressScalarFieldEnum | UserProgressScalarFieldEnum[]
  }

  /**
   * Course.assessments
   */
  export type Course$assessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    cursor?: AssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Course.userAssessments
   */
  export type Course$userAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    where?: UserAssessmentWhereInput
    orderBy?: UserAssessmentOrderByWithRelationInput | UserAssessmentOrderByWithRelationInput[]
    cursor?: UserAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAssessmentScalarFieldEnum | UserAssessmentScalarFieldEnum[]
  }

  /**
   * Course.certificates
   */
  export type Course$certificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    cursor?: CertificateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model UserProgress
   */

  export type AggregateUserProgress = {
    _count: UserProgressCountAggregateOutputType | null
    _avg: UserProgressAvgAggregateOutputType | null
    _sum: UserProgressSumAggregateOutputType | null
    _min: UserProgressMinAggregateOutputType | null
    _max: UserProgressMaxAggregateOutputType | null
  }

  export type UserProgressAvgAggregateOutputType = {
    progress: number | null
    currentStep: number | null
    timeSpent: number | null
  }

  export type UserProgressSumAggregateOutputType = {
    progress: number | null
    currentStep: number | null
    timeSpent: number | null
  }

  export type UserProgressMinAggregateOutputType = {
    id: string | null
    userId: string | null
    courseId: string | null
    progress: number | null
    completed: boolean | null
    currentStep: number | null
    timeSpent: number | null
    lastAccessed: Date | null
  }

  export type UserProgressMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    courseId: string | null
    progress: number | null
    completed: boolean | null
    currentStep: number | null
    timeSpent: number | null
    lastAccessed: Date | null
  }

  export type UserProgressCountAggregateOutputType = {
    id: number
    userId: number
    courseId: number
    progress: number
    completed: number
    currentStep: number
    timeSpent: number
    lastAccessed: number
    _all: number
  }


  export type UserProgressAvgAggregateInputType = {
    progress?: true
    currentStep?: true
    timeSpent?: true
  }

  export type UserProgressSumAggregateInputType = {
    progress?: true
    currentStep?: true
    timeSpent?: true
  }

  export type UserProgressMinAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    progress?: true
    completed?: true
    currentStep?: true
    timeSpent?: true
    lastAccessed?: true
  }

  export type UserProgressMaxAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    progress?: true
    completed?: true
    currentStep?: true
    timeSpent?: true
    lastAccessed?: true
  }

  export type UserProgressCountAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    progress?: true
    completed?: true
    currentStep?: true
    timeSpent?: true
    lastAccessed?: true
    _all?: true
  }

  export type UserProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProgress to aggregate.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProgresses
    **/
    _count?: true | UserProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProgressMaxAggregateInputType
  }

  export type GetUserProgressAggregateType<T extends UserProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProgress[P]>
      : GetScalarType<T[P], AggregateUserProgress[P]>
  }




  export type UserProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProgressWhereInput
    orderBy?: UserProgressOrderByWithAggregationInput | UserProgressOrderByWithAggregationInput[]
    by: UserProgressScalarFieldEnum[] | UserProgressScalarFieldEnum
    having?: UserProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProgressCountAggregateInputType | true
    _avg?: UserProgressAvgAggregateInputType
    _sum?: UserProgressSumAggregateInputType
    _min?: UserProgressMinAggregateInputType
    _max?: UserProgressMaxAggregateInputType
  }

  export type UserProgressGroupByOutputType = {
    id: string
    userId: string
    courseId: string
    progress: number
    completed: boolean
    currentStep: number
    timeSpent: number
    lastAccessed: Date
    _count: UserProgressCountAggregateOutputType | null
    _avg: UserProgressAvgAggregateOutputType | null
    _sum: UserProgressSumAggregateOutputType | null
    _min: UserProgressMinAggregateOutputType | null
    _max: UserProgressMaxAggregateOutputType | null
  }

  type GetUserProgressGroupByPayload<T extends UserProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProgressGroupByOutputType[P]>
            : GetScalarType<T[P], UserProgressGroupByOutputType[P]>
        }
      >
    >


  export type UserProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    progress?: boolean
    completed?: boolean
    currentStep?: boolean
    timeSpent?: boolean
    lastAccessed?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProgress"]>

  export type UserProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    progress?: boolean
    completed?: boolean
    currentStep?: boolean
    timeSpent?: boolean
    lastAccessed?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProgress"]>

  export type UserProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    progress?: boolean
    completed?: boolean
    currentStep?: boolean
    timeSpent?: boolean
    lastAccessed?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProgress"]>

  export type UserProgressSelectScalar = {
    id?: boolean
    userId?: boolean
    courseId?: boolean
    progress?: boolean
    completed?: boolean
    currentStep?: boolean
    timeSpent?: boolean
    lastAccessed?: boolean
  }

  export type UserProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "courseId" | "progress" | "completed" | "currentStep" | "timeSpent" | "lastAccessed", ExtArgs["result"]["userProgress"]>
  export type UserProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type UserProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type UserProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $UserProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProgress"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      courseId: string
      progress: number
      completed: boolean
      currentStep: number
      timeSpent: number
      lastAccessed: Date
    }, ExtArgs["result"]["userProgress"]>
    composites: {}
  }

  type UserProgressGetPayload<S extends boolean | null | undefined | UserProgressDefaultArgs> = $Result.GetResult<Prisma.$UserProgressPayload, S>

  type UserProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProgressCountAggregateInputType | true
    }

  export interface UserProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProgress'], meta: { name: 'UserProgress' } }
    /**
     * Find zero or one UserProgress that matches the filter.
     * @param {UserProgressFindUniqueArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProgressFindUniqueArgs>(args: SelectSubset<T, UserProgressFindUniqueArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProgressFindUniqueOrThrowArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressFindFirstArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProgressFindFirstArgs>(args?: SelectSubset<T, UserProgressFindFirstArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressFindFirstOrThrowArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProgresses
     * const userProgresses = await prisma.userProgress.findMany()
     * 
     * // Get first 10 UserProgresses
     * const userProgresses = await prisma.userProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProgressWithIdOnly = await prisma.userProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProgressFindManyArgs>(args?: SelectSubset<T, UserProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProgress.
     * @param {UserProgressCreateArgs} args - Arguments to create a UserProgress.
     * @example
     * // Create one UserProgress
     * const UserProgress = await prisma.userProgress.create({
     *   data: {
     *     // ... data to create a UserProgress
     *   }
     * })
     * 
     */
    create<T extends UserProgressCreateArgs>(args: SelectSubset<T, UserProgressCreateArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProgresses.
     * @param {UserProgressCreateManyArgs} args - Arguments to create many UserProgresses.
     * @example
     * // Create many UserProgresses
     * const userProgress = await prisma.userProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProgressCreateManyArgs>(args?: SelectSubset<T, UserProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProgresses and returns the data saved in the database.
     * @param {UserProgressCreateManyAndReturnArgs} args - Arguments to create many UserProgresses.
     * @example
     * // Create many UserProgresses
     * const userProgress = await prisma.userProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProgresses and only return the `id`
     * const userProgressWithIdOnly = await prisma.userProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProgress.
     * @param {UserProgressDeleteArgs} args - Arguments to delete one UserProgress.
     * @example
     * // Delete one UserProgress
     * const UserProgress = await prisma.userProgress.delete({
     *   where: {
     *     // ... filter to delete one UserProgress
     *   }
     * })
     * 
     */
    delete<T extends UserProgressDeleteArgs>(args: SelectSubset<T, UserProgressDeleteArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProgress.
     * @param {UserProgressUpdateArgs} args - Arguments to update one UserProgress.
     * @example
     * // Update one UserProgress
     * const userProgress = await prisma.userProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProgressUpdateArgs>(args: SelectSubset<T, UserProgressUpdateArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProgresses.
     * @param {UserProgressDeleteManyArgs} args - Arguments to filter UserProgresses to delete.
     * @example
     * // Delete a few UserProgresses
     * const { count } = await prisma.userProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProgressDeleteManyArgs>(args?: SelectSubset<T, UserProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProgresses
     * const userProgress = await prisma.userProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProgressUpdateManyArgs>(args: SelectSubset<T, UserProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProgresses and returns the data updated in the database.
     * @param {UserProgressUpdateManyAndReturnArgs} args - Arguments to update many UserProgresses.
     * @example
     * // Update many UserProgresses
     * const userProgress = await prisma.userProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProgresses and only return the `id`
     * const userProgressWithIdOnly = await prisma.userProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProgress.
     * @param {UserProgressUpsertArgs} args - Arguments to update or create a UserProgress.
     * @example
     * // Update or create a UserProgress
     * const userProgress = await prisma.userProgress.upsert({
     *   create: {
     *     // ... data to create a UserProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProgress we want to update
     *   }
     * })
     */
    upsert<T extends UserProgressUpsertArgs>(args: SelectSubset<T, UserProgressUpsertArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressCountArgs} args - Arguments to filter UserProgresses to count.
     * @example
     * // Count the number of UserProgresses
     * const count = await prisma.userProgress.count({
     *   where: {
     *     // ... the filter for the UserProgresses we want to count
     *   }
     * })
    **/
    count<T extends UserProgressCountArgs>(
      args?: Subset<T, UserProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProgressAggregateArgs>(args: Subset<T, UserProgressAggregateArgs>): Prisma.PrismaPromise<GetUserProgressAggregateType<T>>

    /**
     * Group by UserProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProgressGroupByArgs['orderBy'] }
        : { orderBy?: UserProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProgress model
   */
  readonly fields: UserProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProgress model
   */
  interface UserProgressFieldRefs {
    readonly id: FieldRef<"UserProgress", 'String'>
    readonly userId: FieldRef<"UserProgress", 'String'>
    readonly courseId: FieldRef<"UserProgress", 'String'>
    readonly progress: FieldRef<"UserProgress", 'Int'>
    readonly completed: FieldRef<"UserProgress", 'Boolean'>
    readonly currentStep: FieldRef<"UserProgress", 'Int'>
    readonly timeSpent: FieldRef<"UserProgress", 'Int'>
    readonly lastAccessed: FieldRef<"UserProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProgress findUnique
   */
  export type UserProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress findUniqueOrThrow
   */
  export type UserProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress findFirst
   */
  export type UserProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProgresses.
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProgresses.
     */
    distinct?: UserProgressScalarFieldEnum | UserProgressScalarFieldEnum[]
  }

  /**
   * UserProgress findFirstOrThrow
   */
  export type UserProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProgresses.
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProgresses.
     */
    distinct?: UserProgressScalarFieldEnum | UserProgressScalarFieldEnum[]
  }

  /**
   * UserProgress findMany
   */
  export type UserProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgresses to fetch.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProgresses.
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    distinct?: UserProgressScalarFieldEnum | UserProgressScalarFieldEnum[]
  }

  /**
   * UserProgress create
   */
  export type UserProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProgress.
     */
    data: XOR<UserProgressCreateInput, UserProgressUncheckedCreateInput>
  }

  /**
   * UserProgress createMany
   */
  export type UserProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProgresses.
     */
    data: UserProgressCreateManyInput | UserProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProgress createManyAndReturn
   */
  export type UserProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * The data used to create many UserProgresses.
     */
    data: UserProgressCreateManyInput | UserProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProgress update
   */
  export type UserProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProgress.
     */
    data: XOR<UserProgressUpdateInput, UserProgressUncheckedUpdateInput>
    /**
     * Choose, which UserProgress to update.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress updateMany
   */
  export type UserProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProgresses.
     */
    data: XOR<UserProgressUpdateManyMutationInput, UserProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserProgresses to update
     */
    where?: UserProgressWhereInput
    /**
     * Limit how many UserProgresses to update.
     */
    limit?: number
  }

  /**
   * UserProgress updateManyAndReturn
   */
  export type UserProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * The data used to update UserProgresses.
     */
    data: XOR<UserProgressUpdateManyMutationInput, UserProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserProgresses to update
     */
    where?: UserProgressWhereInput
    /**
     * Limit how many UserProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProgress upsert
   */
  export type UserProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProgress to update in case it exists.
     */
    where: UserProgressWhereUniqueInput
    /**
     * In case the UserProgress found by the `where` argument doesn't exist, create a new UserProgress with this data.
     */
    create: XOR<UserProgressCreateInput, UserProgressUncheckedCreateInput>
    /**
     * In case the UserProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProgressUpdateInput, UserProgressUncheckedUpdateInput>
  }

  /**
   * UserProgress delete
   */
  export type UserProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter which UserProgress to delete.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress deleteMany
   */
  export type UserProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProgresses to delete
     */
    where?: UserProgressWhereInput
    /**
     * Limit how many UserProgresses to delete.
     */
    limit?: number
  }

  /**
   * UserProgress without action
   */
  export type UserProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
  }


  /**
   * Model Assessment
   */

  export type AggregateAssessment = {
    _count: AssessmentCountAggregateOutputType | null
    _avg: AssessmentAvgAggregateOutputType | null
    _sum: AssessmentSumAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  export type AssessmentAvgAggregateOutputType = {
    correctAnswer: number | null
  }

  export type AssessmentSumAggregateOutputType = {
    correctAnswer: number | null
  }

  export type AssessmentMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    question: string | null
    options: string | null
    correctAnswer: number | null
    difficulty: string | null
  }

  export type AssessmentMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    question: string | null
    options: string | null
    correctAnswer: number | null
    difficulty: string | null
  }

  export type AssessmentCountAggregateOutputType = {
    id: number
    courseId: number
    question: number
    options: number
    correctAnswer: number
    difficulty: number
    _all: number
  }


  export type AssessmentAvgAggregateInputType = {
    correctAnswer?: true
  }

  export type AssessmentSumAggregateInputType = {
    correctAnswer?: true
  }

  export type AssessmentMinAggregateInputType = {
    id?: true
    courseId?: true
    question?: true
    options?: true
    correctAnswer?: true
    difficulty?: true
  }

  export type AssessmentMaxAggregateInputType = {
    id?: true
    courseId?: true
    question?: true
    options?: true
    correctAnswer?: true
    difficulty?: true
  }

  export type AssessmentCountAggregateInputType = {
    id?: true
    courseId?: true
    question?: true
    options?: true
    correctAnswer?: true
    difficulty?: true
    _all?: true
  }

  export type AssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessment to aggregate.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assessments
    **/
    _count?: true | AssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentMaxAggregateInputType
  }

  export type GetAssessmentAggregateType<T extends AssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessment[P]>
      : GetScalarType<T[P], AggregateAssessment[P]>
  }




  export type AssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithAggregationInput | AssessmentOrderByWithAggregationInput[]
    by: AssessmentScalarFieldEnum[] | AssessmentScalarFieldEnum
    having?: AssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentCountAggregateInputType | true
    _avg?: AssessmentAvgAggregateInputType
    _sum?: AssessmentSumAggregateInputType
    _min?: AssessmentMinAggregateInputType
    _max?: AssessmentMaxAggregateInputType
  }

  export type AssessmentGroupByOutputType = {
    id: string
    courseId: string
    question: string
    options: string
    correctAnswer: number
    difficulty: string
    _count: AssessmentCountAggregateOutputType | null
    _avg: AssessmentAvgAggregateOutputType | null
    _sum: AssessmentSumAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  type GetAssessmentGroupByPayload<T extends AssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    question?: boolean
    options?: boolean
    correctAnswer?: boolean
    difficulty?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    question?: boolean
    options?: boolean
    correctAnswer?: boolean
    difficulty?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    question?: boolean
    options?: boolean
    correctAnswer?: boolean
    difficulty?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectScalar = {
    id?: boolean
    courseId?: boolean
    question?: boolean
    options?: boolean
    correctAnswer?: boolean
    difficulty?: boolean
  }

  export type AssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "question" | "options" | "correctAnswer" | "difficulty", ExtArgs["result"]["assessment"]>
  export type AssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type AssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type AssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $AssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assessment"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      question: string
      options: string
      correctAnswer: number
      difficulty: string
    }, ExtArgs["result"]["assessment"]>
    composites: {}
  }

  type AssessmentGetPayload<S extends boolean | null | undefined | AssessmentDefaultArgs> = $Result.GetResult<Prisma.$AssessmentPayload, S>

  type AssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssessmentCountAggregateInputType | true
    }

  export interface AssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assessment'], meta: { name: 'Assessment' } }
    /**
     * Find zero or one Assessment that matches the filter.
     * @param {AssessmentFindUniqueArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssessmentFindUniqueArgs>(args: SelectSubset<T, AssessmentFindUniqueArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssessmentFindUniqueOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssessmentFindFirstArgs>(args?: SelectSubset<T, AssessmentFindFirstArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assessments
     * const assessments = await prisma.assessment.findMany()
     * 
     * // Get first 10 Assessments
     * const assessments = await prisma.assessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentWithIdOnly = await prisma.assessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssessmentFindManyArgs>(args?: SelectSubset<T, AssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assessment.
     * @param {AssessmentCreateArgs} args - Arguments to create a Assessment.
     * @example
     * // Create one Assessment
     * const Assessment = await prisma.assessment.create({
     *   data: {
     *     // ... data to create a Assessment
     *   }
     * })
     * 
     */
    create<T extends AssessmentCreateArgs>(args: SelectSubset<T, AssessmentCreateArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assessments.
     * @param {AssessmentCreateManyArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessment = await prisma.assessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssessmentCreateManyArgs>(args?: SelectSubset<T, AssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assessments and returns the data saved in the database.
     * @param {AssessmentCreateManyAndReturnArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessment = await prisma.assessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assessments and only return the `id`
     * const assessmentWithIdOnly = await prisma.assessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assessment.
     * @param {AssessmentDeleteArgs} args - Arguments to delete one Assessment.
     * @example
     * // Delete one Assessment
     * const Assessment = await prisma.assessment.delete({
     *   where: {
     *     // ... filter to delete one Assessment
     *   }
     * })
     * 
     */
    delete<T extends AssessmentDeleteArgs>(args: SelectSubset<T, AssessmentDeleteArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assessment.
     * @param {AssessmentUpdateArgs} args - Arguments to update one Assessment.
     * @example
     * // Update one Assessment
     * const assessment = await prisma.assessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssessmentUpdateArgs>(args: SelectSubset<T, AssessmentUpdateArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assessments.
     * @param {AssessmentDeleteManyArgs} args - Arguments to filter Assessments to delete.
     * @example
     * // Delete a few Assessments
     * const { count } = await prisma.assessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssessmentDeleteManyArgs>(args?: SelectSubset<T, AssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assessments
     * const assessment = await prisma.assessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssessmentUpdateManyArgs>(args: SelectSubset<T, AssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assessments and returns the data updated in the database.
     * @param {AssessmentUpdateManyAndReturnArgs} args - Arguments to update many Assessments.
     * @example
     * // Update many Assessments
     * const assessment = await prisma.assessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assessments and only return the `id`
     * const assessmentWithIdOnly = await prisma.assessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assessment.
     * @param {AssessmentUpsertArgs} args - Arguments to update or create a Assessment.
     * @example
     * // Update or create a Assessment
     * const assessment = await prisma.assessment.upsert({
     *   create: {
     *     // ... data to create a Assessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assessment we want to update
     *   }
     * })
     */
    upsert<T extends AssessmentUpsertArgs>(args: SelectSubset<T, AssessmentUpsertArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentCountArgs} args - Arguments to filter Assessments to count.
     * @example
     * // Count the number of Assessments
     * const count = await prisma.assessment.count({
     *   where: {
     *     // ... the filter for the Assessments we want to count
     *   }
     * })
    **/
    count<T extends AssessmentCountArgs>(
      args?: Subset<T, AssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentAggregateArgs>(args: Subset<T, AssessmentAggregateArgs>): Prisma.PrismaPromise<GetAssessmentAggregateType<T>>

    /**
     * Group by Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assessment model
   */
  readonly fields: AssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assessment model
   */
  interface AssessmentFieldRefs {
    readonly id: FieldRef<"Assessment", 'String'>
    readonly courseId: FieldRef<"Assessment", 'String'>
    readonly question: FieldRef<"Assessment", 'String'>
    readonly options: FieldRef<"Assessment", 'String'>
    readonly correctAnswer: FieldRef<"Assessment", 'Int'>
    readonly difficulty: FieldRef<"Assessment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Assessment findUnique
   */
  export type AssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment findUniqueOrThrow
   */
  export type AssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment findFirst
   */
  export type AssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment findFirstOrThrow
   */
  export type AssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment findMany
   */
  export type AssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment create
   */
  export type AssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assessment.
     */
    data: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
  }

  /**
   * Assessment createMany
   */
  export type AssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentCreateManyInput | AssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assessment createManyAndReturn
   */
  export type AssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentCreateManyInput | AssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assessment update
   */
  export type AssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assessment.
     */
    data: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
    /**
     * Choose, which Assessment to update.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment updateMany
   */
  export type AssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assessments.
     */
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyInput>
    /**
     * Filter which Assessments to update
     */
    where?: AssessmentWhereInput
    /**
     * Limit how many Assessments to update.
     */
    limit?: number
  }

  /**
   * Assessment updateManyAndReturn
   */
  export type AssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * The data used to update Assessments.
     */
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyInput>
    /**
     * Filter which Assessments to update
     */
    where?: AssessmentWhereInput
    /**
     * Limit how many Assessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assessment upsert
   */
  export type AssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assessment to update in case it exists.
     */
    where: AssessmentWhereUniqueInput
    /**
     * In case the Assessment found by the `where` argument doesn't exist, create a new Assessment with this data.
     */
    create: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
    /**
     * In case the Assessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
  }

  /**
   * Assessment delete
   */
  export type AssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter which Assessment to delete.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment deleteMany
   */
  export type AssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessments to delete
     */
    where?: AssessmentWhereInput
    /**
     * Limit how many Assessments to delete.
     */
    limit?: number
  }

  /**
   * Assessment without action
   */
  export type AssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessment
     */
    omit?: AssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
  }


  /**
   * Model UserAssessment
   */

  export type AggregateUserAssessment = {
    _count: UserAssessmentCountAggregateOutputType | null
    _avg: UserAssessmentAvgAggregateOutputType | null
    _sum: UserAssessmentSumAggregateOutputType | null
    _min: UserAssessmentMinAggregateOutputType | null
    _max: UserAssessmentMaxAggregateOutputType | null
  }

  export type UserAssessmentAvgAggregateOutputType = {
    score: number | null
    totalQuestions: number | null
    attemptNumber: number | null
  }

  export type UserAssessmentSumAggregateOutputType = {
    score: number | null
    totalQuestions: number | null
    attemptNumber: number | null
  }

  export type UserAssessmentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    courseId: string | null
    score: number | null
    totalQuestions: number | null
    passed: boolean | null
    attemptNumber: number | null
    completedAt: Date | null
  }

  export type UserAssessmentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    courseId: string | null
    score: number | null
    totalQuestions: number | null
    passed: boolean | null
    attemptNumber: number | null
    completedAt: Date | null
  }

  export type UserAssessmentCountAggregateOutputType = {
    id: number
    userId: number
    courseId: number
    score: number
    totalQuestions: number
    passed: number
    attemptNumber: number
    completedAt: number
    _all: number
  }


  export type UserAssessmentAvgAggregateInputType = {
    score?: true
    totalQuestions?: true
    attemptNumber?: true
  }

  export type UserAssessmentSumAggregateInputType = {
    score?: true
    totalQuestions?: true
    attemptNumber?: true
  }

  export type UserAssessmentMinAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    score?: true
    totalQuestions?: true
    passed?: true
    attemptNumber?: true
    completedAt?: true
  }

  export type UserAssessmentMaxAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    score?: true
    totalQuestions?: true
    passed?: true
    attemptNumber?: true
    completedAt?: true
  }

  export type UserAssessmentCountAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    score?: true
    totalQuestions?: true
    passed?: true
    attemptNumber?: true
    completedAt?: true
    _all?: true
  }

  export type UserAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAssessment to aggregate.
     */
    where?: UserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssessments to fetch.
     */
    orderBy?: UserAssessmentOrderByWithRelationInput | UserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAssessments
    **/
    _count?: true | UserAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAssessmentMaxAggregateInputType
  }

  export type GetUserAssessmentAggregateType<T extends UserAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAssessment[P]>
      : GetScalarType<T[P], AggregateUserAssessment[P]>
  }




  export type UserAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssessmentWhereInput
    orderBy?: UserAssessmentOrderByWithAggregationInput | UserAssessmentOrderByWithAggregationInput[]
    by: UserAssessmentScalarFieldEnum[] | UserAssessmentScalarFieldEnum
    having?: UserAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAssessmentCountAggregateInputType | true
    _avg?: UserAssessmentAvgAggregateInputType
    _sum?: UserAssessmentSumAggregateInputType
    _min?: UserAssessmentMinAggregateInputType
    _max?: UserAssessmentMaxAggregateInputType
  }

  export type UserAssessmentGroupByOutputType = {
    id: string
    userId: string
    courseId: string
    score: number
    totalQuestions: number
    passed: boolean
    attemptNumber: number
    completedAt: Date
    _count: UserAssessmentCountAggregateOutputType | null
    _avg: UserAssessmentAvgAggregateOutputType | null
    _sum: UserAssessmentSumAggregateOutputType | null
    _min: UserAssessmentMinAggregateOutputType | null
    _max: UserAssessmentMaxAggregateOutputType | null
  }

  type GetUserAssessmentGroupByPayload<T extends UserAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], UserAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type UserAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    score?: boolean
    totalQuestions?: boolean
    passed?: boolean
    attemptNumber?: boolean
    completedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAssessment"]>

  export type UserAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    score?: boolean
    totalQuestions?: boolean
    passed?: boolean
    attemptNumber?: boolean
    completedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAssessment"]>

  export type UserAssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    score?: boolean
    totalQuestions?: boolean
    passed?: boolean
    attemptNumber?: boolean
    completedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAssessment"]>

  export type UserAssessmentSelectScalar = {
    id?: boolean
    userId?: boolean
    courseId?: boolean
    score?: boolean
    totalQuestions?: boolean
    passed?: boolean
    attemptNumber?: boolean
    completedAt?: boolean
  }

  export type UserAssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "courseId" | "score" | "totalQuestions" | "passed" | "attemptNumber" | "completedAt", ExtArgs["result"]["userAssessment"]>
  export type UserAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type UserAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type UserAssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $UserAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAssessment"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      courseId: string
      score: number
      totalQuestions: number
      passed: boolean
      attemptNumber: number
      completedAt: Date
    }, ExtArgs["result"]["userAssessment"]>
    composites: {}
  }

  type UserAssessmentGetPayload<S extends boolean | null | undefined | UserAssessmentDefaultArgs> = $Result.GetResult<Prisma.$UserAssessmentPayload, S>

  type UserAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAssessmentCountAggregateInputType | true
    }

  export interface UserAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAssessment'], meta: { name: 'UserAssessment' } }
    /**
     * Find zero or one UserAssessment that matches the filter.
     * @param {UserAssessmentFindUniqueArgs} args - Arguments to find a UserAssessment
     * @example
     * // Get one UserAssessment
     * const userAssessment = await prisma.userAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAssessmentFindUniqueArgs>(args: SelectSubset<T, UserAssessmentFindUniqueArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAssessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAssessmentFindUniqueOrThrowArgs} args - Arguments to find a UserAssessment
     * @example
     * // Get one UserAssessment
     * const userAssessment = await prisma.userAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssessmentFindFirstArgs} args - Arguments to find a UserAssessment
     * @example
     * // Get one UserAssessment
     * const userAssessment = await prisma.userAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAssessmentFindFirstArgs>(args?: SelectSubset<T, UserAssessmentFindFirstArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssessmentFindFirstOrThrowArgs} args - Arguments to find a UserAssessment
     * @example
     * // Get one UserAssessment
     * const userAssessment = await prisma.userAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAssessments
     * const userAssessments = await prisma.userAssessment.findMany()
     * 
     * // Get first 10 UserAssessments
     * const userAssessments = await prisma.userAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAssessmentWithIdOnly = await prisma.userAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAssessmentFindManyArgs>(args?: SelectSubset<T, UserAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAssessment.
     * @param {UserAssessmentCreateArgs} args - Arguments to create a UserAssessment.
     * @example
     * // Create one UserAssessment
     * const UserAssessment = await prisma.userAssessment.create({
     *   data: {
     *     // ... data to create a UserAssessment
     *   }
     * })
     * 
     */
    create<T extends UserAssessmentCreateArgs>(args: SelectSubset<T, UserAssessmentCreateArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAssessments.
     * @param {UserAssessmentCreateManyArgs} args - Arguments to create many UserAssessments.
     * @example
     * // Create many UserAssessments
     * const userAssessment = await prisma.userAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAssessmentCreateManyArgs>(args?: SelectSubset<T, UserAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAssessments and returns the data saved in the database.
     * @param {UserAssessmentCreateManyAndReturnArgs} args - Arguments to create many UserAssessments.
     * @example
     * // Create many UserAssessments
     * const userAssessment = await prisma.userAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAssessments and only return the `id`
     * const userAssessmentWithIdOnly = await prisma.userAssessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserAssessment.
     * @param {UserAssessmentDeleteArgs} args - Arguments to delete one UserAssessment.
     * @example
     * // Delete one UserAssessment
     * const UserAssessment = await prisma.userAssessment.delete({
     *   where: {
     *     // ... filter to delete one UserAssessment
     *   }
     * })
     * 
     */
    delete<T extends UserAssessmentDeleteArgs>(args: SelectSubset<T, UserAssessmentDeleteArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAssessment.
     * @param {UserAssessmentUpdateArgs} args - Arguments to update one UserAssessment.
     * @example
     * // Update one UserAssessment
     * const userAssessment = await prisma.userAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAssessmentUpdateArgs>(args: SelectSubset<T, UserAssessmentUpdateArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAssessments.
     * @param {UserAssessmentDeleteManyArgs} args - Arguments to filter UserAssessments to delete.
     * @example
     * // Delete a few UserAssessments
     * const { count } = await prisma.userAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAssessmentDeleteManyArgs>(args?: SelectSubset<T, UserAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAssessments
     * const userAssessment = await prisma.userAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAssessmentUpdateManyArgs>(args: SelectSubset<T, UserAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAssessments and returns the data updated in the database.
     * @param {UserAssessmentUpdateManyAndReturnArgs} args - Arguments to update many UserAssessments.
     * @example
     * // Update many UserAssessments
     * const userAssessment = await prisma.userAssessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserAssessments and only return the `id`
     * const userAssessmentWithIdOnly = await prisma.userAssessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserAssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, UserAssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserAssessment.
     * @param {UserAssessmentUpsertArgs} args - Arguments to update or create a UserAssessment.
     * @example
     * // Update or create a UserAssessment
     * const userAssessment = await prisma.userAssessment.upsert({
     *   create: {
     *     // ... data to create a UserAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAssessment we want to update
     *   }
     * })
     */
    upsert<T extends UserAssessmentUpsertArgs>(args: SelectSubset<T, UserAssessmentUpsertArgs<ExtArgs>>): Prisma__UserAssessmentClient<$Result.GetResult<Prisma.$UserAssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssessmentCountArgs} args - Arguments to filter UserAssessments to count.
     * @example
     * // Count the number of UserAssessments
     * const count = await prisma.userAssessment.count({
     *   where: {
     *     // ... the filter for the UserAssessments we want to count
     *   }
     * })
    **/
    count<T extends UserAssessmentCountArgs>(
      args?: Subset<T, UserAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAssessmentAggregateArgs>(args: Subset<T, UserAssessmentAggregateArgs>): Prisma.PrismaPromise<GetUserAssessmentAggregateType<T>>

    /**
     * Group by UserAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: UserAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAssessment model
   */
  readonly fields: UserAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAssessment model
   */
  interface UserAssessmentFieldRefs {
    readonly id: FieldRef<"UserAssessment", 'String'>
    readonly userId: FieldRef<"UserAssessment", 'String'>
    readonly courseId: FieldRef<"UserAssessment", 'String'>
    readonly score: FieldRef<"UserAssessment", 'Int'>
    readonly totalQuestions: FieldRef<"UserAssessment", 'Int'>
    readonly passed: FieldRef<"UserAssessment", 'Boolean'>
    readonly attemptNumber: FieldRef<"UserAssessment", 'Int'>
    readonly completedAt: FieldRef<"UserAssessment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserAssessment findUnique
   */
  export type UserAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAssessment to fetch.
     */
    where: UserAssessmentWhereUniqueInput
  }

  /**
   * UserAssessment findUniqueOrThrow
   */
  export type UserAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAssessment to fetch.
     */
    where: UserAssessmentWhereUniqueInput
  }

  /**
   * UserAssessment findFirst
   */
  export type UserAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAssessment to fetch.
     */
    where?: UserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssessments to fetch.
     */
    orderBy?: UserAssessmentOrderByWithRelationInput | UserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAssessments.
     */
    cursor?: UserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAssessments.
     */
    distinct?: UserAssessmentScalarFieldEnum | UserAssessmentScalarFieldEnum[]
  }

  /**
   * UserAssessment findFirstOrThrow
   */
  export type UserAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAssessment to fetch.
     */
    where?: UserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssessments to fetch.
     */
    orderBy?: UserAssessmentOrderByWithRelationInput | UserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAssessments.
     */
    cursor?: UserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAssessments.
     */
    distinct?: UserAssessmentScalarFieldEnum | UserAssessmentScalarFieldEnum[]
  }

  /**
   * UserAssessment findMany
   */
  export type UserAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which UserAssessments to fetch.
     */
    where?: UserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssessments to fetch.
     */
    orderBy?: UserAssessmentOrderByWithRelationInput | UserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAssessments.
     */
    cursor?: UserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssessments.
     */
    skip?: number
    distinct?: UserAssessmentScalarFieldEnum | UserAssessmentScalarFieldEnum[]
  }

  /**
   * UserAssessment create
   */
  export type UserAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAssessment.
     */
    data: XOR<UserAssessmentCreateInput, UserAssessmentUncheckedCreateInput>
  }

  /**
   * UserAssessment createMany
   */
  export type UserAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAssessments.
     */
    data: UserAssessmentCreateManyInput | UserAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAssessment createManyAndReturn
   */
  export type UserAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many UserAssessments.
     */
    data: UserAssessmentCreateManyInput | UserAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAssessment update
   */
  export type UserAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAssessment.
     */
    data: XOR<UserAssessmentUpdateInput, UserAssessmentUncheckedUpdateInput>
    /**
     * Choose, which UserAssessment to update.
     */
    where: UserAssessmentWhereUniqueInput
  }

  /**
   * UserAssessment updateMany
   */
  export type UserAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAssessments.
     */
    data: XOR<UserAssessmentUpdateManyMutationInput, UserAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which UserAssessments to update
     */
    where?: UserAssessmentWhereInput
    /**
     * Limit how many UserAssessments to update.
     */
    limit?: number
  }

  /**
   * UserAssessment updateManyAndReturn
   */
  export type UserAssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * The data used to update UserAssessments.
     */
    data: XOR<UserAssessmentUpdateManyMutationInput, UserAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which UserAssessments to update
     */
    where?: UserAssessmentWhereInput
    /**
     * Limit how many UserAssessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAssessment upsert
   */
  export type UserAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAssessment to update in case it exists.
     */
    where: UserAssessmentWhereUniqueInput
    /**
     * In case the UserAssessment found by the `where` argument doesn't exist, create a new UserAssessment with this data.
     */
    create: XOR<UserAssessmentCreateInput, UserAssessmentUncheckedCreateInput>
    /**
     * In case the UserAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAssessmentUpdateInput, UserAssessmentUncheckedUpdateInput>
  }

  /**
   * UserAssessment delete
   */
  export type UserAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
    /**
     * Filter which UserAssessment to delete.
     */
    where: UserAssessmentWhereUniqueInput
  }

  /**
   * UserAssessment deleteMany
   */
  export type UserAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAssessments to delete
     */
    where?: UserAssessmentWhereInput
    /**
     * Limit how many UserAssessments to delete.
     */
    limit?: number
  }

  /**
   * UserAssessment without action
   */
  export type UserAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssessment
     */
    select?: UserAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssessment
     */
    omit?: UserAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model Certificate
   */

  export type AggregateCertificate = {
    _count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  export type CertificateMinAggregateOutputType = {
    id: string | null
    userId: string | null
    courseId: string | null
    certificateUrl: string | null
    issuedAt: Date | null
  }

  export type CertificateMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    courseId: string | null
    certificateUrl: string | null
    issuedAt: Date | null
  }

  export type CertificateCountAggregateOutputType = {
    id: number
    userId: number
    courseId: number
    certificateUrl: number
    issuedAt: number
    _all: number
  }


  export type CertificateMinAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    certificateUrl?: true
    issuedAt?: true
  }

  export type CertificateMaxAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    certificateUrl?: true
    issuedAt?: true
  }

  export type CertificateCountAggregateInputType = {
    id?: true
    userId?: true
    courseId?: true
    certificateUrl?: true
    issuedAt?: true
    _all?: true
  }

  export type CertificateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificate to aggregate.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certificates
    **/
    _count?: true | CertificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateMaxAggregateInputType
  }

  export type GetCertificateAggregateType<T extends CertificateAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificate[P]>
      : GetScalarType<T[P], AggregateCertificate[P]>
  }




  export type CertificateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithAggregationInput | CertificateOrderByWithAggregationInput[]
    by: CertificateScalarFieldEnum[] | CertificateScalarFieldEnum
    having?: CertificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateCountAggregateInputType | true
    _min?: CertificateMinAggregateInputType
    _max?: CertificateMaxAggregateInputType
  }

  export type CertificateGroupByOutputType = {
    id: string
    userId: string
    courseId: string
    certificateUrl: string
    issuedAt: Date
    _count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  type GetCertificateGroupByPayload<T extends CertificateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateGroupByOutputType[P]>
        }
      >
    >


  export type CertificateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    certificateUrl?: boolean
    issuedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    certificateUrl?: boolean
    issuedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    courseId?: boolean
    certificateUrl?: boolean
    issuedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectScalar = {
    id?: boolean
    userId?: boolean
    courseId?: boolean
    certificateUrl?: boolean
    issuedAt?: boolean
  }

  export type CertificateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "courseId" | "certificateUrl" | "issuedAt", ExtArgs["result"]["certificate"]>
  export type CertificateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $CertificatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Certificate"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      courseId: string
      certificateUrl: string
      issuedAt: Date
    }, ExtArgs["result"]["certificate"]>
    composites: {}
  }

  type CertificateGetPayload<S extends boolean | null | undefined | CertificateDefaultArgs> = $Result.GetResult<Prisma.$CertificatePayload, S>

  type CertificateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateCountAggregateInputType | true
    }

  export interface CertificateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certificate'], meta: { name: 'Certificate' } }
    /**
     * Find zero or one Certificate that matches the filter.
     * @param {CertificateFindUniqueArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateFindUniqueArgs>(args: SelectSubset<T, CertificateFindUniqueArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Certificate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateFindUniqueOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateFindFirstArgs>(args?: SelectSubset<T, CertificateFindFirstArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certificates
     * const certificates = await prisma.certificate.findMany()
     * 
     * // Get first 10 Certificates
     * const certificates = await prisma.certificate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateWithIdOnly = await prisma.certificate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateFindManyArgs>(args?: SelectSubset<T, CertificateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Certificate.
     * @param {CertificateCreateArgs} args - Arguments to create a Certificate.
     * @example
     * // Create one Certificate
     * const Certificate = await prisma.certificate.create({
     *   data: {
     *     // ... data to create a Certificate
     *   }
     * })
     * 
     */
    create<T extends CertificateCreateArgs>(args: SelectSubset<T, CertificateCreateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Certificates.
     * @param {CertificateCreateManyArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateCreateManyArgs>(args?: SelectSubset<T, CertificateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Certificates and returns the data saved in the database.
     * @param {CertificateCreateManyAndReturnArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Certificate.
     * @param {CertificateDeleteArgs} args - Arguments to delete one Certificate.
     * @example
     * // Delete one Certificate
     * const Certificate = await prisma.certificate.delete({
     *   where: {
     *     // ... filter to delete one Certificate
     *   }
     * })
     * 
     */
    delete<T extends CertificateDeleteArgs>(args: SelectSubset<T, CertificateDeleteArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Certificate.
     * @param {CertificateUpdateArgs} args - Arguments to update one Certificate.
     * @example
     * // Update one Certificate
     * const certificate = await prisma.certificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateUpdateArgs>(args: SelectSubset<T, CertificateUpdateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Certificates.
     * @param {CertificateDeleteManyArgs} args - Arguments to filter Certificates to delete.
     * @example
     * // Delete a few Certificates
     * const { count } = await prisma.certificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateDeleteManyArgs>(args?: SelectSubset<T, CertificateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateUpdateManyArgs>(args: SelectSubset<T, CertificateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates and returns the data updated in the database.
     * @param {CertificateUpdateManyAndReturnArgs} args - Arguments to update many Certificates.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Certificate.
     * @param {CertificateUpsertArgs} args - Arguments to update or create a Certificate.
     * @example
     * // Update or create a Certificate
     * const certificate = await prisma.certificate.upsert({
     *   create: {
     *     // ... data to create a Certificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certificate we want to update
     *   }
     * })
     */
    upsert<T extends CertificateUpsertArgs>(args: SelectSubset<T, CertificateUpsertArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateCountArgs} args - Arguments to filter Certificates to count.
     * @example
     * // Count the number of Certificates
     * const count = await prisma.certificate.count({
     *   where: {
     *     // ... the filter for the Certificates we want to count
     *   }
     * })
    **/
    count<T extends CertificateCountArgs>(
      args?: Subset<T, CertificateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateAggregateArgs>(args: Subset<T, CertificateAggregateArgs>): Prisma.PrismaPromise<GetCertificateAggregateType<T>>

    /**
     * Group by Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateGroupByArgs['orderBy'] }
        : { orderBy?: CertificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Certificate model
   */
  readonly fields: CertificateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Certificate model
   */
  interface CertificateFieldRefs {
    readonly id: FieldRef<"Certificate", 'String'>
    readonly userId: FieldRef<"Certificate", 'String'>
    readonly courseId: FieldRef<"Certificate", 'String'>
    readonly certificateUrl: FieldRef<"Certificate", 'String'>
    readonly issuedAt: FieldRef<"Certificate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Certificate findUnique
   */
  export type CertificateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findUniqueOrThrow
   */
  export type CertificateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findFirst
   */
  export type CertificateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findFirstOrThrow
   */
  export type CertificateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findMany
   */
  export type CertificateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate create
   */
  export type CertificateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to create a Certificate.
     */
    data: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
  }

  /**
   * Certificate createMany
   */
  export type CertificateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Certificate createManyAndReturn
   */
  export type CertificateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate update
   */
  export type CertificateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to update a Certificate.
     */
    data: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
    /**
     * Choose, which Certificate to update.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate updateMany
   */
  export type CertificateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
  }

  /**
   * Certificate updateManyAndReturn
   */
  export type CertificateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate upsert
   */
  export type CertificateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The filter to search for the Certificate to update in case it exists.
     */
    where: CertificateWhereUniqueInput
    /**
     * In case the Certificate found by the `where` argument doesn't exist, create a new Certificate with this data.
     */
    create: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
    /**
     * In case the Certificate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
  }

  /**
   * Certificate delete
   */
  export type CertificateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter which Certificate to delete.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate deleteMany
   */
  export type CertificateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificates to delete
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to delete.
     */
    limit?: number
  }

  /**
   * Certificate without action
   */
  export type CertificateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    checklistTemplates?: boolean | Team$checklistTemplatesArgs<ExtArgs>
    dailyReports?: boolean | Team$dailyReportsArgs<ExtArgs>
    users?: boolean | Team$usersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checklistTemplates?: boolean | Team$checklistTemplatesArgs<ExtArgs>
    dailyReports?: boolean | Team$dailyReportsArgs<ExtArgs>
    users?: boolean | Team$usersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      checklistTemplates: Prisma.$ChecklistTemplatePayload<ExtArgs>[]
      dailyReports: Prisma.$DailyReportPayload<ExtArgs>[]
      users: Prisma.$TbmUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    checklistTemplates<T extends Team$checklistTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Team$checklistTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dailyReports<T extends Team$dailyReportsArgs<ExtArgs> = {}>(args?: Subset<T, Team$dailyReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Team$usersArgs<ExtArgs> = {}>(args?: Subset<T, Team$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data?: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.checklistTemplates
   */
  export type Team$checklistTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    where?: ChecklistTemplateWhereInput
    orderBy?: ChecklistTemplateOrderByWithRelationInput | ChecklistTemplateOrderByWithRelationInput[]
    cursor?: ChecklistTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChecklistTemplateScalarFieldEnum | ChecklistTemplateScalarFieldEnum[]
  }

  /**
   * Team.dailyReports
   */
  export type Team$dailyReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    where?: DailyReportWhereInput
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    cursor?: DailyReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyReportScalarFieldEnum | DailyReportScalarFieldEnum[]
  }

  /**
   * Team.users
   */
  export type Team$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    where?: TbmUserWhereInput
    orderBy?: TbmUserOrderByWithRelationInput | TbmUserOrderByWithRelationInput[]
    cursor?: TbmUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TbmUserScalarFieldEnum | TbmUserScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TbmUser
   */

  export type AggregateTbmUser = {
    _count: TbmUserCountAggregateOutputType | null
    _avg: TbmUserAvgAggregateOutputType | null
    _sum: TbmUserSumAggregateOutputType | null
    _min: TbmUserMinAggregateOutputType | null
    _max: TbmUserMaxAggregateOutputType | null
  }

  export type TbmUserAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type TbmUserSumAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type TbmUserMinAggregateOutputType = {
    id: number | null
    name: string | null
    teamId: number | null
  }

  export type TbmUserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    teamId: number | null
  }

  export type TbmUserCountAggregateOutputType = {
    id: number
    name: number
    teamId: number
    _all: number
  }


  export type TbmUserAvgAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type TbmUserSumAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type TbmUserMinAggregateInputType = {
    id?: true
    name?: true
    teamId?: true
  }

  export type TbmUserMaxAggregateInputType = {
    id?: true
    name?: true
    teamId?: true
  }

  export type TbmUserCountAggregateInputType = {
    id?: true
    name?: true
    teamId?: true
    _all?: true
  }

  export type TbmUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TbmUser to aggregate.
     */
    where?: TbmUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TbmUsers to fetch.
     */
    orderBy?: TbmUserOrderByWithRelationInput | TbmUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TbmUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TbmUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TbmUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TbmUsers
    **/
    _count?: true | TbmUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbmUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbmUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbmUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbmUserMaxAggregateInputType
  }

  export type GetTbmUserAggregateType<T extends TbmUserAggregateArgs> = {
        [P in keyof T & keyof AggregateTbmUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbmUser[P]>
      : GetScalarType<T[P], AggregateTbmUser[P]>
  }




  export type TbmUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TbmUserWhereInput
    orderBy?: TbmUserOrderByWithAggregationInput | TbmUserOrderByWithAggregationInput[]
    by: TbmUserScalarFieldEnum[] | TbmUserScalarFieldEnum
    having?: TbmUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbmUserCountAggregateInputType | true
    _avg?: TbmUserAvgAggregateInputType
    _sum?: TbmUserSumAggregateInputType
    _min?: TbmUserMinAggregateInputType
    _max?: TbmUserMaxAggregateInputType
  }

  export type TbmUserGroupByOutputType = {
    id: number
    name: string | null
    teamId: number
    _count: TbmUserCountAggregateOutputType | null
    _avg: TbmUserAvgAggregateOutputType | null
    _sum: TbmUserSumAggregateOutputType | null
    _min: TbmUserMinAggregateOutputType | null
    _max: TbmUserMaxAggregateOutputType | null
  }

  type GetTbmUserGroupByPayload<T extends TbmUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TbmUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbmUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbmUserGroupByOutputType[P]>
            : GetScalarType<T[P], TbmUserGroupByOutputType[P]>
        }
      >
    >


  export type TbmUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    reportSignatures?: boolean | TbmUser$reportSignaturesArgs<ExtArgs>
    _count?: boolean | TbmUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tbmUser"]>

  export type TbmUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tbmUser"]>

  export type TbmUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tbmUser"]>

  export type TbmUserSelectScalar = {
    id?: boolean
    name?: boolean
    teamId?: boolean
  }

  export type TbmUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "teamId", ExtArgs["result"]["tbmUser"]>
  export type TbmUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    reportSignatures?: boolean | TbmUser$reportSignaturesArgs<ExtArgs>
    _count?: boolean | TbmUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TbmUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type TbmUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $TbmUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TbmUser"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      reportSignatures: Prisma.$ReportSignaturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      teamId: number
    }, ExtArgs["result"]["tbmUser"]>
    composites: {}
  }

  type TbmUserGetPayload<S extends boolean | null | undefined | TbmUserDefaultArgs> = $Result.GetResult<Prisma.$TbmUserPayload, S>

  type TbmUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TbmUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TbmUserCountAggregateInputType | true
    }

  export interface TbmUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TbmUser'], meta: { name: 'TbmUser' } }
    /**
     * Find zero or one TbmUser that matches the filter.
     * @param {TbmUserFindUniqueArgs} args - Arguments to find a TbmUser
     * @example
     * // Get one TbmUser
     * const tbmUser = await prisma.tbmUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TbmUserFindUniqueArgs>(args: SelectSubset<T, TbmUserFindUniqueArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TbmUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TbmUserFindUniqueOrThrowArgs} args - Arguments to find a TbmUser
     * @example
     * // Get one TbmUser
     * const tbmUser = await prisma.tbmUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TbmUserFindUniqueOrThrowArgs>(args: SelectSubset<T, TbmUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TbmUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbmUserFindFirstArgs} args - Arguments to find a TbmUser
     * @example
     * // Get one TbmUser
     * const tbmUser = await prisma.tbmUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TbmUserFindFirstArgs>(args?: SelectSubset<T, TbmUserFindFirstArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TbmUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbmUserFindFirstOrThrowArgs} args - Arguments to find a TbmUser
     * @example
     * // Get one TbmUser
     * const tbmUser = await prisma.tbmUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TbmUserFindFirstOrThrowArgs>(args?: SelectSubset<T, TbmUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TbmUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbmUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbmUsers
     * const tbmUsers = await prisma.tbmUser.findMany()
     * 
     * // Get first 10 TbmUsers
     * const tbmUsers = await prisma.tbmUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbmUserWithIdOnly = await prisma.tbmUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TbmUserFindManyArgs>(args?: SelectSubset<T, TbmUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TbmUser.
     * @param {TbmUserCreateArgs} args - Arguments to create a TbmUser.
     * @example
     * // Create one TbmUser
     * const TbmUser = await prisma.tbmUser.create({
     *   data: {
     *     // ... data to create a TbmUser
     *   }
     * })
     * 
     */
    create<T extends TbmUserCreateArgs>(args: SelectSubset<T, TbmUserCreateArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TbmUsers.
     * @param {TbmUserCreateManyArgs} args - Arguments to create many TbmUsers.
     * @example
     * // Create many TbmUsers
     * const tbmUser = await prisma.tbmUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TbmUserCreateManyArgs>(args?: SelectSubset<T, TbmUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TbmUsers and returns the data saved in the database.
     * @param {TbmUserCreateManyAndReturnArgs} args - Arguments to create many TbmUsers.
     * @example
     * // Create many TbmUsers
     * const tbmUser = await prisma.tbmUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TbmUsers and only return the `id`
     * const tbmUserWithIdOnly = await prisma.tbmUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TbmUserCreateManyAndReturnArgs>(args?: SelectSubset<T, TbmUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TbmUser.
     * @param {TbmUserDeleteArgs} args - Arguments to delete one TbmUser.
     * @example
     * // Delete one TbmUser
     * const TbmUser = await prisma.tbmUser.delete({
     *   where: {
     *     // ... filter to delete one TbmUser
     *   }
     * })
     * 
     */
    delete<T extends TbmUserDeleteArgs>(args: SelectSubset<T, TbmUserDeleteArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TbmUser.
     * @param {TbmUserUpdateArgs} args - Arguments to update one TbmUser.
     * @example
     * // Update one TbmUser
     * const tbmUser = await prisma.tbmUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TbmUserUpdateArgs>(args: SelectSubset<T, TbmUserUpdateArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TbmUsers.
     * @param {TbmUserDeleteManyArgs} args - Arguments to filter TbmUsers to delete.
     * @example
     * // Delete a few TbmUsers
     * const { count } = await prisma.tbmUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TbmUserDeleteManyArgs>(args?: SelectSubset<T, TbmUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbmUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbmUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbmUsers
     * const tbmUser = await prisma.tbmUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TbmUserUpdateManyArgs>(args: SelectSubset<T, TbmUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbmUsers and returns the data updated in the database.
     * @param {TbmUserUpdateManyAndReturnArgs} args - Arguments to update many TbmUsers.
     * @example
     * // Update many TbmUsers
     * const tbmUser = await prisma.tbmUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TbmUsers and only return the `id`
     * const tbmUserWithIdOnly = await prisma.tbmUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TbmUserUpdateManyAndReturnArgs>(args: SelectSubset<T, TbmUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TbmUser.
     * @param {TbmUserUpsertArgs} args - Arguments to update or create a TbmUser.
     * @example
     * // Update or create a TbmUser
     * const tbmUser = await prisma.tbmUser.upsert({
     *   create: {
     *     // ... data to create a TbmUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbmUser we want to update
     *   }
     * })
     */
    upsert<T extends TbmUserUpsertArgs>(args: SelectSubset<T, TbmUserUpsertArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TbmUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbmUserCountArgs} args - Arguments to filter TbmUsers to count.
     * @example
     * // Count the number of TbmUsers
     * const count = await prisma.tbmUser.count({
     *   where: {
     *     // ... the filter for the TbmUsers we want to count
     *   }
     * })
    **/
    count<T extends TbmUserCountArgs>(
      args?: Subset<T, TbmUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbmUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbmUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbmUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbmUserAggregateArgs>(args: Subset<T, TbmUserAggregateArgs>): Prisma.PrismaPromise<GetTbmUserAggregateType<T>>

    /**
     * Group by TbmUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbmUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TbmUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TbmUserGroupByArgs['orderBy'] }
        : { orderBy?: TbmUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TbmUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbmUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TbmUser model
   */
  readonly fields: TbmUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TbmUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TbmUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reportSignatures<T extends TbmUser$reportSignaturesArgs<ExtArgs> = {}>(args?: Subset<T, TbmUser$reportSignaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TbmUser model
   */
  interface TbmUserFieldRefs {
    readonly id: FieldRef<"TbmUser", 'Int'>
    readonly name: FieldRef<"TbmUser", 'String'>
    readonly teamId: FieldRef<"TbmUser", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TbmUser findUnique
   */
  export type TbmUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * Filter, which TbmUser to fetch.
     */
    where: TbmUserWhereUniqueInput
  }

  /**
   * TbmUser findUniqueOrThrow
   */
  export type TbmUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * Filter, which TbmUser to fetch.
     */
    where: TbmUserWhereUniqueInput
  }

  /**
   * TbmUser findFirst
   */
  export type TbmUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * Filter, which TbmUser to fetch.
     */
    where?: TbmUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TbmUsers to fetch.
     */
    orderBy?: TbmUserOrderByWithRelationInput | TbmUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TbmUsers.
     */
    cursor?: TbmUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TbmUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TbmUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TbmUsers.
     */
    distinct?: TbmUserScalarFieldEnum | TbmUserScalarFieldEnum[]
  }

  /**
   * TbmUser findFirstOrThrow
   */
  export type TbmUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * Filter, which TbmUser to fetch.
     */
    where?: TbmUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TbmUsers to fetch.
     */
    orderBy?: TbmUserOrderByWithRelationInput | TbmUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TbmUsers.
     */
    cursor?: TbmUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TbmUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TbmUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TbmUsers.
     */
    distinct?: TbmUserScalarFieldEnum | TbmUserScalarFieldEnum[]
  }

  /**
   * TbmUser findMany
   */
  export type TbmUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * Filter, which TbmUsers to fetch.
     */
    where?: TbmUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TbmUsers to fetch.
     */
    orderBy?: TbmUserOrderByWithRelationInput | TbmUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TbmUsers.
     */
    cursor?: TbmUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TbmUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TbmUsers.
     */
    skip?: number
    distinct?: TbmUserScalarFieldEnum | TbmUserScalarFieldEnum[]
  }

  /**
   * TbmUser create
   */
  export type TbmUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * The data needed to create a TbmUser.
     */
    data: XOR<TbmUserCreateInput, TbmUserUncheckedCreateInput>
  }

  /**
   * TbmUser createMany
   */
  export type TbmUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TbmUsers.
     */
    data: TbmUserCreateManyInput | TbmUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TbmUser createManyAndReturn
   */
  export type TbmUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * The data used to create many TbmUsers.
     */
    data: TbmUserCreateManyInput | TbmUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TbmUser update
   */
  export type TbmUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * The data needed to update a TbmUser.
     */
    data: XOR<TbmUserUpdateInput, TbmUserUncheckedUpdateInput>
    /**
     * Choose, which TbmUser to update.
     */
    where: TbmUserWhereUniqueInput
  }

  /**
   * TbmUser updateMany
   */
  export type TbmUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TbmUsers.
     */
    data: XOR<TbmUserUpdateManyMutationInput, TbmUserUncheckedUpdateManyInput>
    /**
     * Filter which TbmUsers to update
     */
    where?: TbmUserWhereInput
    /**
     * Limit how many TbmUsers to update.
     */
    limit?: number
  }

  /**
   * TbmUser updateManyAndReturn
   */
  export type TbmUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * The data used to update TbmUsers.
     */
    data: XOR<TbmUserUpdateManyMutationInput, TbmUserUncheckedUpdateManyInput>
    /**
     * Filter which TbmUsers to update
     */
    where?: TbmUserWhereInput
    /**
     * Limit how many TbmUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TbmUser upsert
   */
  export type TbmUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * The filter to search for the TbmUser to update in case it exists.
     */
    where: TbmUserWhereUniqueInput
    /**
     * In case the TbmUser found by the `where` argument doesn't exist, create a new TbmUser with this data.
     */
    create: XOR<TbmUserCreateInput, TbmUserUncheckedCreateInput>
    /**
     * In case the TbmUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TbmUserUpdateInput, TbmUserUncheckedUpdateInput>
  }

  /**
   * TbmUser delete
   */
  export type TbmUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
    /**
     * Filter which TbmUser to delete.
     */
    where: TbmUserWhereUniqueInput
  }

  /**
   * TbmUser deleteMany
   */
  export type TbmUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TbmUsers to delete
     */
    where?: TbmUserWhereInput
    /**
     * Limit how many TbmUsers to delete.
     */
    limit?: number
  }

  /**
   * TbmUser.reportSignatures
   */
  export type TbmUser$reportSignaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    where?: ReportSignatureWhereInput
    orderBy?: ReportSignatureOrderByWithRelationInput | ReportSignatureOrderByWithRelationInput[]
    cursor?: ReportSignatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportSignatureScalarFieldEnum | ReportSignatureScalarFieldEnum[]
  }

  /**
   * TbmUser without action
   */
  export type TbmUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TbmUser
     */
    select?: TbmUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TbmUser
     */
    omit?: TbmUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TbmUserInclude<ExtArgs> | null
  }


  /**
   * Model ChecklistTemplate
   */

  export type AggregateChecklistTemplate = {
    _count: ChecklistTemplateCountAggregateOutputType | null
    _avg: ChecklistTemplateAvgAggregateOutputType | null
    _sum: ChecklistTemplateSumAggregateOutputType | null
    _min: ChecklistTemplateMinAggregateOutputType | null
    _max: ChecklistTemplateMaxAggregateOutputType | null
  }

  export type ChecklistTemplateAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type ChecklistTemplateSumAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type ChecklistTemplateMinAggregateOutputType = {
    id: number | null
    name: string | null
    teamId: number | null
  }

  export type ChecklistTemplateMaxAggregateOutputType = {
    id: number | null
    name: string | null
    teamId: number | null
  }

  export type ChecklistTemplateCountAggregateOutputType = {
    id: number
    name: number
    teamId: number
    _all: number
  }


  export type ChecklistTemplateAvgAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type ChecklistTemplateSumAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type ChecklistTemplateMinAggregateInputType = {
    id?: true
    name?: true
    teamId?: true
  }

  export type ChecklistTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    teamId?: true
  }

  export type ChecklistTemplateCountAggregateInputType = {
    id?: true
    name?: true
    teamId?: true
    _all?: true
  }

  export type ChecklistTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChecklistTemplate to aggregate.
     */
    where?: ChecklistTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistTemplates to fetch.
     */
    orderBy?: ChecklistTemplateOrderByWithRelationInput | ChecklistTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChecklistTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChecklistTemplates
    **/
    _count?: true | ChecklistTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChecklistTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChecklistTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChecklistTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChecklistTemplateMaxAggregateInputType
  }

  export type GetChecklistTemplateAggregateType<T extends ChecklistTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateChecklistTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChecklistTemplate[P]>
      : GetScalarType<T[P], AggregateChecklistTemplate[P]>
  }




  export type ChecklistTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistTemplateWhereInput
    orderBy?: ChecklistTemplateOrderByWithAggregationInput | ChecklistTemplateOrderByWithAggregationInput[]
    by: ChecklistTemplateScalarFieldEnum[] | ChecklistTemplateScalarFieldEnum
    having?: ChecklistTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChecklistTemplateCountAggregateInputType | true
    _avg?: ChecklistTemplateAvgAggregateInputType
    _sum?: ChecklistTemplateSumAggregateInputType
    _min?: ChecklistTemplateMinAggregateInputType
    _max?: ChecklistTemplateMaxAggregateInputType
  }

  export type ChecklistTemplateGroupByOutputType = {
    id: number
    name: string | null
    teamId: number
    _count: ChecklistTemplateCountAggregateOutputType | null
    _avg: ChecklistTemplateAvgAggregateOutputType | null
    _sum: ChecklistTemplateSumAggregateOutputType | null
    _min: ChecklistTemplateMinAggregateOutputType | null
    _max: ChecklistTemplateMaxAggregateOutputType | null
  }

  type GetChecklistTemplateGroupByPayload<T extends ChecklistTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChecklistTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChecklistTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChecklistTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], ChecklistTemplateGroupByOutputType[P]>
        }
      >
    >


  export type ChecklistTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    templateItems?: boolean | ChecklistTemplate$templateItemsArgs<ExtArgs>
    _count?: boolean | ChecklistTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistTemplate"]>

  export type ChecklistTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistTemplate"]>

  export type ChecklistTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistTemplate"]>

  export type ChecklistTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    teamId?: boolean
  }

  export type ChecklistTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "teamId", ExtArgs["result"]["checklistTemplate"]>
  export type ChecklistTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    templateItems?: boolean | ChecklistTemplate$templateItemsArgs<ExtArgs>
    _count?: boolean | ChecklistTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChecklistTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type ChecklistTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $ChecklistTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChecklistTemplate"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      templateItems: Prisma.$TemplateItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      teamId: number
    }, ExtArgs["result"]["checklistTemplate"]>
    composites: {}
  }

  type ChecklistTemplateGetPayload<S extends boolean | null | undefined | ChecklistTemplateDefaultArgs> = $Result.GetResult<Prisma.$ChecklistTemplatePayload, S>

  type ChecklistTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChecklistTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChecklistTemplateCountAggregateInputType | true
    }

  export interface ChecklistTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChecklistTemplate'], meta: { name: 'ChecklistTemplate' } }
    /**
     * Find zero or one ChecklistTemplate that matches the filter.
     * @param {ChecklistTemplateFindUniqueArgs} args - Arguments to find a ChecklistTemplate
     * @example
     * // Get one ChecklistTemplate
     * const checklistTemplate = await prisma.checklistTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChecklistTemplateFindUniqueArgs>(args: SelectSubset<T, ChecklistTemplateFindUniqueArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChecklistTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChecklistTemplateFindUniqueOrThrowArgs} args - Arguments to find a ChecklistTemplate
     * @example
     * // Get one ChecklistTemplate
     * const checklistTemplate = await prisma.checklistTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChecklistTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, ChecklistTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChecklistTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistTemplateFindFirstArgs} args - Arguments to find a ChecklistTemplate
     * @example
     * // Get one ChecklistTemplate
     * const checklistTemplate = await prisma.checklistTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChecklistTemplateFindFirstArgs>(args?: SelectSubset<T, ChecklistTemplateFindFirstArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChecklistTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistTemplateFindFirstOrThrowArgs} args - Arguments to find a ChecklistTemplate
     * @example
     * // Get one ChecklistTemplate
     * const checklistTemplate = await prisma.checklistTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChecklistTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, ChecklistTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChecklistTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChecklistTemplates
     * const checklistTemplates = await prisma.checklistTemplate.findMany()
     * 
     * // Get first 10 ChecklistTemplates
     * const checklistTemplates = await prisma.checklistTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checklistTemplateWithIdOnly = await prisma.checklistTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChecklistTemplateFindManyArgs>(args?: SelectSubset<T, ChecklistTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChecklistTemplate.
     * @param {ChecklistTemplateCreateArgs} args - Arguments to create a ChecklistTemplate.
     * @example
     * // Create one ChecklistTemplate
     * const ChecklistTemplate = await prisma.checklistTemplate.create({
     *   data: {
     *     // ... data to create a ChecklistTemplate
     *   }
     * })
     * 
     */
    create<T extends ChecklistTemplateCreateArgs>(args: SelectSubset<T, ChecklistTemplateCreateArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChecklistTemplates.
     * @param {ChecklistTemplateCreateManyArgs} args - Arguments to create many ChecklistTemplates.
     * @example
     * // Create many ChecklistTemplates
     * const checklistTemplate = await prisma.checklistTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChecklistTemplateCreateManyArgs>(args?: SelectSubset<T, ChecklistTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChecklistTemplates and returns the data saved in the database.
     * @param {ChecklistTemplateCreateManyAndReturnArgs} args - Arguments to create many ChecklistTemplates.
     * @example
     * // Create many ChecklistTemplates
     * const checklistTemplate = await prisma.checklistTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChecklistTemplates and only return the `id`
     * const checklistTemplateWithIdOnly = await prisma.checklistTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChecklistTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, ChecklistTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChecklistTemplate.
     * @param {ChecklistTemplateDeleteArgs} args - Arguments to delete one ChecklistTemplate.
     * @example
     * // Delete one ChecklistTemplate
     * const ChecklistTemplate = await prisma.checklistTemplate.delete({
     *   where: {
     *     // ... filter to delete one ChecklistTemplate
     *   }
     * })
     * 
     */
    delete<T extends ChecklistTemplateDeleteArgs>(args: SelectSubset<T, ChecklistTemplateDeleteArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChecklistTemplate.
     * @param {ChecklistTemplateUpdateArgs} args - Arguments to update one ChecklistTemplate.
     * @example
     * // Update one ChecklistTemplate
     * const checklistTemplate = await prisma.checklistTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChecklistTemplateUpdateArgs>(args: SelectSubset<T, ChecklistTemplateUpdateArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChecklistTemplates.
     * @param {ChecklistTemplateDeleteManyArgs} args - Arguments to filter ChecklistTemplates to delete.
     * @example
     * // Delete a few ChecklistTemplates
     * const { count } = await prisma.checklistTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChecklistTemplateDeleteManyArgs>(args?: SelectSubset<T, ChecklistTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChecklistTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChecklistTemplates
     * const checklistTemplate = await prisma.checklistTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChecklistTemplateUpdateManyArgs>(args: SelectSubset<T, ChecklistTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChecklistTemplates and returns the data updated in the database.
     * @param {ChecklistTemplateUpdateManyAndReturnArgs} args - Arguments to update many ChecklistTemplates.
     * @example
     * // Update many ChecklistTemplates
     * const checklistTemplate = await prisma.checklistTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChecklistTemplates and only return the `id`
     * const checklistTemplateWithIdOnly = await prisma.checklistTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChecklistTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, ChecklistTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChecklistTemplate.
     * @param {ChecklistTemplateUpsertArgs} args - Arguments to update or create a ChecklistTemplate.
     * @example
     * // Update or create a ChecklistTemplate
     * const checklistTemplate = await prisma.checklistTemplate.upsert({
     *   create: {
     *     // ... data to create a ChecklistTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChecklistTemplate we want to update
     *   }
     * })
     */
    upsert<T extends ChecklistTemplateUpsertArgs>(args: SelectSubset<T, ChecklistTemplateUpsertArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChecklistTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistTemplateCountArgs} args - Arguments to filter ChecklistTemplates to count.
     * @example
     * // Count the number of ChecklistTemplates
     * const count = await prisma.checklistTemplate.count({
     *   where: {
     *     // ... the filter for the ChecklistTemplates we want to count
     *   }
     * })
    **/
    count<T extends ChecklistTemplateCountArgs>(
      args?: Subset<T, ChecklistTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChecklistTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChecklistTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChecklistTemplateAggregateArgs>(args: Subset<T, ChecklistTemplateAggregateArgs>): Prisma.PrismaPromise<GetChecklistTemplateAggregateType<T>>

    /**
     * Group by ChecklistTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChecklistTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChecklistTemplateGroupByArgs['orderBy'] }
        : { orderBy?: ChecklistTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChecklistTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChecklistTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChecklistTemplate model
   */
  readonly fields: ChecklistTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChecklistTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChecklistTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    templateItems<T extends ChecklistTemplate$templateItemsArgs<ExtArgs> = {}>(args?: Subset<T, ChecklistTemplate$templateItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChecklistTemplate model
   */
  interface ChecklistTemplateFieldRefs {
    readonly id: FieldRef<"ChecklistTemplate", 'Int'>
    readonly name: FieldRef<"ChecklistTemplate", 'String'>
    readonly teamId: FieldRef<"ChecklistTemplate", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ChecklistTemplate findUnique
   */
  export type ChecklistTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistTemplate to fetch.
     */
    where: ChecklistTemplateWhereUniqueInput
  }

  /**
   * ChecklistTemplate findUniqueOrThrow
   */
  export type ChecklistTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistTemplate to fetch.
     */
    where: ChecklistTemplateWhereUniqueInput
  }

  /**
   * ChecklistTemplate findFirst
   */
  export type ChecklistTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistTemplate to fetch.
     */
    where?: ChecklistTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistTemplates to fetch.
     */
    orderBy?: ChecklistTemplateOrderByWithRelationInput | ChecklistTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChecklistTemplates.
     */
    cursor?: ChecklistTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChecklistTemplates.
     */
    distinct?: ChecklistTemplateScalarFieldEnum | ChecklistTemplateScalarFieldEnum[]
  }

  /**
   * ChecklistTemplate findFirstOrThrow
   */
  export type ChecklistTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistTemplate to fetch.
     */
    where?: ChecklistTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistTemplates to fetch.
     */
    orderBy?: ChecklistTemplateOrderByWithRelationInput | ChecklistTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChecklistTemplates.
     */
    cursor?: ChecklistTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChecklistTemplates.
     */
    distinct?: ChecklistTemplateScalarFieldEnum | ChecklistTemplateScalarFieldEnum[]
  }

  /**
   * ChecklistTemplate findMany
   */
  export type ChecklistTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistTemplates to fetch.
     */
    where?: ChecklistTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistTemplates to fetch.
     */
    orderBy?: ChecklistTemplateOrderByWithRelationInput | ChecklistTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChecklistTemplates.
     */
    cursor?: ChecklistTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistTemplates.
     */
    skip?: number
    distinct?: ChecklistTemplateScalarFieldEnum | ChecklistTemplateScalarFieldEnum[]
  }

  /**
   * ChecklistTemplate create
   */
  export type ChecklistTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a ChecklistTemplate.
     */
    data: XOR<ChecklistTemplateCreateInput, ChecklistTemplateUncheckedCreateInput>
  }

  /**
   * ChecklistTemplate createMany
   */
  export type ChecklistTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChecklistTemplates.
     */
    data: ChecklistTemplateCreateManyInput | ChecklistTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChecklistTemplate createManyAndReturn
   */
  export type ChecklistTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many ChecklistTemplates.
     */
    data: ChecklistTemplateCreateManyInput | ChecklistTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChecklistTemplate update
   */
  export type ChecklistTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a ChecklistTemplate.
     */
    data: XOR<ChecklistTemplateUpdateInput, ChecklistTemplateUncheckedUpdateInput>
    /**
     * Choose, which ChecklistTemplate to update.
     */
    where: ChecklistTemplateWhereUniqueInput
  }

  /**
   * ChecklistTemplate updateMany
   */
  export type ChecklistTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChecklistTemplates.
     */
    data: XOR<ChecklistTemplateUpdateManyMutationInput, ChecklistTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ChecklistTemplates to update
     */
    where?: ChecklistTemplateWhereInput
    /**
     * Limit how many ChecklistTemplates to update.
     */
    limit?: number
  }

  /**
   * ChecklistTemplate updateManyAndReturn
   */
  export type ChecklistTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * The data used to update ChecklistTemplates.
     */
    data: XOR<ChecklistTemplateUpdateManyMutationInput, ChecklistTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ChecklistTemplates to update
     */
    where?: ChecklistTemplateWhereInput
    /**
     * Limit how many ChecklistTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChecklistTemplate upsert
   */
  export type ChecklistTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the ChecklistTemplate to update in case it exists.
     */
    where: ChecklistTemplateWhereUniqueInput
    /**
     * In case the ChecklistTemplate found by the `where` argument doesn't exist, create a new ChecklistTemplate with this data.
     */
    create: XOR<ChecklistTemplateCreateInput, ChecklistTemplateUncheckedCreateInput>
    /**
     * In case the ChecklistTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChecklistTemplateUpdateInput, ChecklistTemplateUncheckedUpdateInput>
  }

  /**
   * ChecklistTemplate delete
   */
  export type ChecklistTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
    /**
     * Filter which ChecklistTemplate to delete.
     */
    where: ChecklistTemplateWhereUniqueInput
  }

  /**
   * ChecklistTemplate deleteMany
   */
  export type ChecklistTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChecklistTemplates to delete
     */
    where?: ChecklistTemplateWhereInput
    /**
     * Limit how many ChecklistTemplates to delete.
     */
    limit?: number
  }

  /**
   * ChecklistTemplate.templateItems
   */
  export type ChecklistTemplate$templateItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    where?: TemplateItemWhereInput
    orderBy?: TemplateItemOrderByWithRelationInput | TemplateItemOrderByWithRelationInput[]
    cursor?: TemplateItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateItemScalarFieldEnum | TemplateItemScalarFieldEnum[]
  }

  /**
   * ChecklistTemplate without action
   */
  export type ChecklistTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistTemplate
     */
    select?: ChecklistTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistTemplate
     */
    omit?: ChecklistTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistTemplateInclude<ExtArgs> | null
  }


  /**
   * Model TemplateItem
   */

  export type AggregateTemplateItem = {
    _count: TemplateItemCountAggregateOutputType | null
    _avg: TemplateItemAvgAggregateOutputType | null
    _sum: TemplateItemSumAggregateOutputType | null
    _min: TemplateItemMinAggregateOutputType | null
    _max: TemplateItemMaxAggregateOutputType | null
  }

  export type TemplateItemAvgAggregateOutputType = {
    id: number | null
    templateId: number | null
    displayOrder: number | null
  }

  export type TemplateItemSumAggregateOutputType = {
    id: number | null
    templateId: number | null
    displayOrder: number | null
  }

  export type TemplateItemMinAggregateOutputType = {
    id: number | null
    templateId: number | null
    category: string | null
    subCategory: string | null
    description: string | null
    displayOrder: number | null
  }

  export type TemplateItemMaxAggregateOutputType = {
    id: number | null
    templateId: number | null
    category: string | null
    subCategory: string | null
    description: string | null
    displayOrder: number | null
  }

  export type TemplateItemCountAggregateOutputType = {
    id: number
    templateId: number
    category: number
    subCategory: number
    description: number
    displayOrder: number
    _all: number
  }


  export type TemplateItemAvgAggregateInputType = {
    id?: true
    templateId?: true
    displayOrder?: true
  }

  export type TemplateItemSumAggregateInputType = {
    id?: true
    templateId?: true
    displayOrder?: true
  }

  export type TemplateItemMinAggregateInputType = {
    id?: true
    templateId?: true
    category?: true
    subCategory?: true
    description?: true
    displayOrder?: true
  }

  export type TemplateItemMaxAggregateInputType = {
    id?: true
    templateId?: true
    category?: true
    subCategory?: true
    description?: true
    displayOrder?: true
  }

  export type TemplateItemCountAggregateInputType = {
    id?: true
    templateId?: true
    category?: true
    subCategory?: true
    description?: true
    displayOrder?: true
    _all?: true
  }

  export type TemplateItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateItem to aggregate.
     */
    where?: TemplateItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateItems to fetch.
     */
    orderBy?: TemplateItemOrderByWithRelationInput | TemplateItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplateItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TemplateItems
    **/
    _count?: true | TemplateItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemplateItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemplateItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateItemMaxAggregateInputType
  }

  export type GetTemplateItemAggregateType<T extends TemplateItemAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplateItem[P]>
      : GetScalarType<T[P], AggregateTemplateItem[P]>
  }




  export type TemplateItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateItemWhereInput
    orderBy?: TemplateItemOrderByWithAggregationInput | TemplateItemOrderByWithAggregationInput[]
    by: TemplateItemScalarFieldEnum[] | TemplateItemScalarFieldEnum
    having?: TemplateItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateItemCountAggregateInputType | true
    _avg?: TemplateItemAvgAggregateInputType
    _sum?: TemplateItemSumAggregateInputType
    _min?: TemplateItemMinAggregateInputType
    _max?: TemplateItemMaxAggregateInputType
  }

  export type TemplateItemGroupByOutputType = {
    id: number
    templateId: number
    category: string | null
    subCategory: string | null
    description: string | null
    displayOrder: number
    _count: TemplateItemCountAggregateOutputType | null
    _avg: TemplateItemAvgAggregateOutputType | null
    _sum: TemplateItemSumAggregateOutputType | null
    _min: TemplateItemMinAggregateOutputType | null
    _max: TemplateItemMaxAggregateOutputType | null
  }

  type GetTemplateItemGroupByPayload<T extends TemplateItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplateItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateItemGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateItemGroupByOutputType[P]>
        }
      >
    >


  export type TemplateItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    category?: boolean
    subCategory?: boolean
    description?: boolean
    displayOrder?: boolean
    template?: boolean | ChecklistTemplateDefaultArgs<ExtArgs>
    reportDetails?: boolean | TemplateItem$reportDetailsArgs<ExtArgs>
    _count?: boolean | TemplateItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateItem"]>

  export type TemplateItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    category?: boolean
    subCategory?: boolean
    description?: boolean
    displayOrder?: boolean
    template?: boolean | ChecklistTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateItem"]>

  export type TemplateItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    category?: boolean
    subCategory?: boolean
    description?: boolean
    displayOrder?: boolean
    template?: boolean | ChecklistTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateItem"]>

  export type TemplateItemSelectScalar = {
    id?: boolean
    templateId?: boolean
    category?: boolean
    subCategory?: boolean
    description?: boolean
    displayOrder?: boolean
  }

  export type TemplateItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "templateId" | "category" | "subCategory" | "description" | "displayOrder", ExtArgs["result"]["templateItem"]>
  export type TemplateItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | ChecklistTemplateDefaultArgs<ExtArgs>
    reportDetails?: boolean | TemplateItem$reportDetailsArgs<ExtArgs>
    _count?: boolean | TemplateItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TemplateItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | ChecklistTemplateDefaultArgs<ExtArgs>
  }
  export type TemplateItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | ChecklistTemplateDefaultArgs<ExtArgs>
  }

  export type $TemplateItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TemplateItem"
    objects: {
      template: Prisma.$ChecklistTemplatePayload<ExtArgs>
      reportDetails: Prisma.$ReportDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      templateId: number
      category: string | null
      subCategory: string | null
      description: string | null
      displayOrder: number
    }, ExtArgs["result"]["templateItem"]>
    composites: {}
  }

  type TemplateItemGetPayload<S extends boolean | null | undefined | TemplateItemDefaultArgs> = $Result.GetResult<Prisma.$TemplateItemPayload, S>

  type TemplateItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TemplateItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TemplateItemCountAggregateInputType | true
    }

  export interface TemplateItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TemplateItem'], meta: { name: 'TemplateItem' } }
    /**
     * Find zero or one TemplateItem that matches the filter.
     * @param {TemplateItemFindUniqueArgs} args - Arguments to find a TemplateItem
     * @example
     * // Get one TemplateItem
     * const templateItem = await prisma.templateItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplateItemFindUniqueArgs>(args: SelectSubset<T, TemplateItemFindUniqueArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TemplateItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TemplateItemFindUniqueOrThrowArgs} args - Arguments to find a TemplateItem
     * @example
     * // Get one TemplateItem
     * const templateItem = await prisma.templateItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplateItemFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplateItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TemplateItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateItemFindFirstArgs} args - Arguments to find a TemplateItem
     * @example
     * // Get one TemplateItem
     * const templateItem = await prisma.templateItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplateItemFindFirstArgs>(args?: SelectSubset<T, TemplateItemFindFirstArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TemplateItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateItemFindFirstOrThrowArgs} args - Arguments to find a TemplateItem
     * @example
     * // Get one TemplateItem
     * const templateItem = await prisma.templateItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplateItemFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplateItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TemplateItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TemplateItems
     * const templateItems = await prisma.templateItem.findMany()
     * 
     * // Get first 10 TemplateItems
     * const templateItems = await prisma.templateItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateItemWithIdOnly = await prisma.templateItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TemplateItemFindManyArgs>(args?: SelectSubset<T, TemplateItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TemplateItem.
     * @param {TemplateItemCreateArgs} args - Arguments to create a TemplateItem.
     * @example
     * // Create one TemplateItem
     * const TemplateItem = await prisma.templateItem.create({
     *   data: {
     *     // ... data to create a TemplateItem
     *   }
     * })
     * 
     */
    create<T extends TemplateItemCreateArgs>(args: SelectSubset<T, TemplateItemCreateArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TemplateItems.
     * @param {TemplateItemCreateManyArgs} args - Arguments to create many TemplateItems.
     * @example
     * // Create many TemplateItems
     * const templateItem = await prisma.templateItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplateItemCreateManyArgs>(args?: SelectSubset<T, TemplateItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TemplateItems and returns the data saved in the database.
     * @param {TemplateItemCreateManyAndReturnArgs} args - Arguments to create many TemplateItems.
     * @example
     * // Create many TemplateItems
     * const templateItem = await prisma.templateItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TemplateItems and only return the `id`
     * const templateItemWithIdOnly = await prisma.templateItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplateItemCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplateItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TemplateItem.
     * @param {TemplateItemDeleteArgs} args - Arguments to delete one TemplateItem.
     * @example
     * // Delete one TemplateItem
     * const TemplateItem = await prisma.templateItem.delete({
     *   where: {
     *     // ... filter to delete one TemplateItem
     *   }
     * })
     * 
     */
    delete<T extends TemplateItemDeleteArgs>(args: SelectSubset<T, TemplateItemDeleteArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TemplateItem.
     * @param {TemplateItemUpdateArgs} args - Arguments to update one TemplateItem.
     * @example
     * // Update one TemplateItem
     * const templateItem = await prisma.templateItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplateItemUpdateArgs>(args: SelectSubset<T, TemplateItemUpdateArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TemplateItems.
     * @param {TemplateItemDeleteManyArgs} args - Arguments to filter TemplateItems to delete.
     * @example
     * // Delete a few TemplateItems
     * const { count } = await prisma.templateItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplateItemDeleteManyArgs>(args?: SelectSubset<T, TemplateItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TemplateItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TemplateItems
     * const templateItem = await prisma.templateItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplateItemUpdateManyArgs>(args: SelectSubset<T, TemplateItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TemplateItems and returns the data updated in the database.
     * @param {TemplateItemUpdateManyAndReturnArgs} args - Arguments to update many TemplateItems.
     * @example
     * // Update many TemplateItems
     * const templateItem = await prisma.templateItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TemplateItems and only return the `id`
     * const templateItemWithIdOnly = await prisma.templateItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TemplateItemUpdateManyAndReturnArgs>(args: SelectSubset<T, TemplateItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TemplateItem.
     * @param {TemplateItemUpsertArgs} args - Arguments to update or create a TemplateItem.
     * @example
     * // Update or create a TemplateItem
     * const templateItem = await prisma.templateItem.upsert({
     *   create: {
     *     // ... data to create a TemplateItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TemplateItem we want to update
     *   }
     * })
     */
    upsert<T extends TemplateItemUpsertArgs>(args: SelectSubset<T, TemplateItemUpsertArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TemplateItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateItemCountArgs} args - Arguments to filter TemplateItems to count.
     * @example
     * // Count the number of TemplateItems
     * const count = await prisma.templateItem.count({
     *   where: {
     *     // ... the filter for the TemplateItems we want to count
     *   }
     * })
    **/
    count<T extends TemplateItemCountArgs>(
      args?: Subset<T, TemplateItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TemplateItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateItemAggregateArgs>(args: Subset<T, TemplateItemAggregateArgs>): Prisma.PrismaPromise<GetTemplateItemAggregateType<T>>

    /**
     * Group by TemplateItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateItemGroupByArgs['orderBy'] }
        : { orderBy?: TemplateItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TemplateItem model
   */
  readonly fields: TemplateItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TemplateItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplateItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends ChecklistTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChecklistTemplateDefaultArgs<ExtArgs>>): Prisma__ChecklistTemplateClient<$Result.GetResult<Prisma.$ChecklistTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reportDetails<T extends TemplateItem$reportDetailsArgs<ExtArgs> = {}>(args?: Subset<T, TemplateItem$reportDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TemplateItem model
   */
  interface TemplateItemFieldRefs {
    readonly id: FieldRef<"TemplateItem", 'Int'>
    readonly templateId: FieldRef<"TemplateItem", 'Int'>
    readonly category: FieldRef<"TemplateItem", 'String'>
    readonly subCategory: FieldRef<"TemplateItem", 'String'>
    readonly description: FieldRef<"TemplateItem", 'String'>
    readonly displayOrder: FieldRef<"TemplateItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TemplateItem findUnique
   */
  export type TemplateItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * Filter, which TemplateItem to fetch.
     */
    where: TemplateItemWhereUniqueInput
  }

  /**
   * TemplateItem findUniqueOrThrow
   */
  export type TemplateItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * Filter, which TemplateItem to fetch.
     */
    where: TemplateItemWhereUniqueInput
  }

  /**
   * TemplateItem findFirst
   */
  export type TemplateItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * Filter, which TemplateItem to fetch.
     */
    where?: TemplateItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateItems to fetch.
     */
    orderBy?: TemplateItemOrderByWithRelationInput | TemplateItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateItems.
     */
    cursor?: TemplateItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateItems.
     */
    distinct?: TemplateItemScalarFieldEnum | TemplateItemScalarFieldEnum[]
  }

  /**
   * TemplateItem findFirstOrThrow
   */
  export type TemplateItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * Filter, which TemplateItem to fetch.
     */
    where?: TemplateItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateItems to fetch.
     */
    orderBy?: TemplateItemOrderByWithRelationInput | TemplateItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateItems.
     */
    cursor?: TemplateItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateItems.
     */
    distinct?: TemplateItemScalarFieldEnum | TemplateItemScalarFieldEnum[]
  }

  /**
   * TemplateItem findMany
   */
  export type TemplateItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * Filter, which TemplateItems to fetch.
     */
    where?: TemplateItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateItems to fetch.
     */
    orderBy?: TemplateItemOrderByWithRelationInput | TemplateItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TemplateItems.
     */
    cursor?: TemplateItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateItems.
     */
    skip?: number
    distinct?: TemplateItemScalarFieldEnum | TemplateItemScalarFieldEnum[]
  }

  /**
   * TemplateItem create
   */
  export type TemplateItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * The data needed to create a TemplateItem.
     */
    data: XOR<TemplateItemCreateInput, TemplateItemUncheckedCreateInput>
  }

  /**
   * TemplateItem createMany
   */
  export type TemplateItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TemplateItems.
     */
    data: TemplateItemCreateManyInput | TemplateItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TemplateItem createManyAndReturn
   */
  export type TemplateItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * The data used to create many TemplateItems.
     */
    data: TemplateItemCreateManyInput | TemplateItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TemplateItem update
   */
  export type TemplateItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * The data needed to update a TemplateItem.
     */
    data: XOR<TemplateItemUpdateInput, TemplateItemUncheckedUpdateInput>
    /**
     * Choose, which TemplateItem to update.
     */
    where: TemplateItemWhereUniqueInput
  }

  /**
   * TemplateItem updateMany
   */
  export type TemplateItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TemplateItems.
     */
    data: XOR<TemplateItemUpdateManyMutationInput, TemplateItemUncheckedUpdateManyInput>
    /**
     * Filter which TemplateItems to update
     */
    where?: TemplateItemWhereInput
    /**
     * Limit how many TemplateItems to update.
     */
    limit?: number
  }

  /**
   * TemplateItem updateManyAndReturn
   */
  export type TemplateItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * The data used to update TemplateItems.
     */
    data: XOR<TemplateItemUpdateManyMutationInput, TemplateItemUncheckedUpdateManyInput>
    /**
     * Filter which TemplateItems to update
     */
    where?: TemplateItemWhereInput
    /**
     * Limit how many TemplateItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TemplateItem upsert
   */
  export type TemplateItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * The filter to search for the TemplateItem to update in case it exists.
     */
    where: TemplateItemWhereUniqueInput
    /**
     * In case the TemplateItem found by the `where` argument doesn't exist, create a new TemplateItem with this data.
     */
    create: XOR<TemplateItemCreateInput, TemplateItemUncheckedCreateInput>
    /**
     * In case the TemplateItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplateItemUpdateInput, TemplateItemUncheckedUpdateInput>
  }

  /**
   * TemplateItem delete
   */
  export type TemplateItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
    /**
     * Filter which TemplateItem to delete.
     */
    where: TemplateItemWhereUniqueInput
  }

  /**
   * TemplateItem deleteMany
   */
  export type TemplateItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateItems to delete
     */
    where?: TemplateItemWhereInput
    /**
     * Limit how many TemplateItems to delete.
     */
    limit?: number
  }

  /**
   * TemplateItem.reportDetails
   */
  export type TemplateItem$reportDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    where?: ReportDetailWhereInput
    orderBy?: ReportDetailOrderByWithRelationInput | ReportDetailOrderByWithRelationInput[]
    cursor?: ReportDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportDetailScalarFieldEnum | ReportDetailScalarFieldEnum[]
  }

  /**
   * TemplateItem without action
   */
  export type TemplateItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateItem
     */
    select?: TemplateItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateItem
     */
    omit?: TemplateItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateItemInclude<ExtArgs> | null
  }


  /**
   * Model DailyReport
   */

  export type AggregateDailyReport = {
    _count: DailyReportCountAggregateOutputType | null
    _avg: DailyReportAvgAggregateOutputType | null
    _sum: DailyReportSumAggregateOutputType | null
    _min: DailyReportMinAggregateOutputType | null
    _max: DailyReportMaxAggregateOutputType | null
  }

  export type DailyReportAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type DailyReportSumAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type DailyReportMinAggregateOutputType = {
    id: number | null
    teamId: number | null
    reportDate: Date | null
    managerName: string | null
    remarks: string | null
  }

  export type DailyReportMaxAggregateOutputType = {
    id: number | null
    teamId: number | null
    reportDate: Date | null
    managerName: string | null
    remarks: string | null
  }

  export type DailyReportCountAggregateOutputType = {
    id: number
    teamId: number
    reportDate: number
    managerName: number
    remarks: number
    _all: number
  }


  export type DailyReportAvgAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type DailyReportSumAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type DailyReportMinAggregateInputType = {
    id?: true
    teamId?: true
    reportDate?: true
    managerName?: true
    remarks?: true
  }

  export type DailyReportMaxAggregateInputType = {
    id?: true
    teamId?: true
    reportDate?: true
    managerName?: true
    remarks?: true
  }

  export type DailyReportCountAggregateInputType = {
    id?: true
    teamId?: true
    reportDate?: true
    managerName?: true
    remarks?: true
    _all?: true
  }

  export type DailyReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyReport to aggregate.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyReports
    **/
    _count?: true | DailyReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyReportMaxAggregateInputType
  }

  export type GetDailyReportAggregateType<T extends DailyReportAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyReport[P]>
      : GetScalarType<T[P], AggregateDailyReport[P]>
  }




  export type DailyReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyReportWhereInput
    orderBy?: DailyReportOrderByWithAggregationInput | DailyReportOrderByWithAggregationInput[]
    by: DailyReportScalarFieldEnum[] | DailyReportScalarFieldEnum
    having?: DailyReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyReportCountAggregateInputType | true
    _avg?: DailyReportAvgAggregateInputType
    _sum?: DailyReportSumAggregateInputType
    _min?: DailyReportMinAggregateInputType
    _max?: DailyReportMaxAggregateInputType
  }

  export type DailyReportGroupByOutputType = {
    id: number
    teamId: number
    reportDate: Date
    managerName: string | null
    remarks: string | null
    _count: DailyReportCountAggregateOutputType | null
    _avg: DailyReportAvgAggregateOutputType | null
    _sum: DailyReportSumAggregateOutputType | null
    _min: DailyReportMinAggregateOutputType | null
    _max: DailyReportMaxAggregateOutputType | null
  }

  type GetDailyReportGroupByPayload<T extends DailyReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyReportGroupByOutputType[P]>
            : GetScalarType<T[P], DailyReportGroupByOutputType[P]>
        }
      >
    >


  export type DailyReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    reportDate?: boolean
    managerName?: boolean
    remarks?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    reportDetails?: boolean | DailyReport$reportDetailsArgs<ExtArgs>
    reportSignatures?: boolean | DailyReport$reportSignaturesArgs<ExtArgs>
    _count?: boolean | DailyReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyReport"]>

  export type DailyReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    reportDate?: boolean
    managerName?: boolean
    remarks?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyReport"]>

  export type DailyReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    reportDate?: boolean
    managerName?: boolean
    remarks?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyReport"]>

  export type DailyReportSelectScalar = {
    id?: boolean
    teamId?: boolean
    reportDate?: boolean
    managerName?: boolean
    remarks?: boolean
  }

  export type DailyReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "reportDate" | "managerName" | "remarks", ExtArgs["result"]["dailyReport"]>
  export type DailyReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    reportDetails?: boolean | DailyReport$reportDetailsArgs<ExtArgs>
    reportSignatures?: boolean | DailyReport$reportSignaturesArgs<ExtArgs>
    _count?: boolean | DailyReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DailyReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type DailyReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $DailyReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyReport"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      reportDetails: Prisma.$ReportDetailPayload<ExtArgs>[]
      reportSignatures: Prisma.$ReportSignaturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teamId: number
      reportDate: Date
      managerName: string | null
      remarks: string | null
    }, ExtArgs["result"]["dailyReport"]>
    composites: {}
  }

  type DailyReportGetPayload<S extends boolean | null | undefined | DailyReportDefaultArgs> = $Result.GetResult<Prisma.$DailyReportPayload, S>

  type DailyReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyReportCountAggregateInputType | true
    }

  export interface DailyReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyReport'], meta: { name: 'DailyReport' } }
    /**
     * Find zero or one DailyReport that matches the filter.
     * @param {DailyReportFindUniqueArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyReportFindUniqueArgs>(args: SelectSubset<T, DailyReportFindUniqueArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyReportFindUniqueOrThrowArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyReportFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportFindFirstArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyReportFindFirstArgs>(args?: SelectSubset<T, DailyReportFindFirstArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportFindFirstOrThrowArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyReportFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyReports
     * const dailyReports = await prisma.dailyReport.findMany()
     * 
     * // Get first 10 DailyReports
     * const dailyReports = await prisma.dailyReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyReportWithIdOnly = await prisma.dailyReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyReportFindManyArgs>(args?: SelectSubset<T, DailyReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyReport.
     * @param {DailyReportCreateArgs} args - Arguments to create a DailyReport.
     * @example
     * // Create one DailyReport
     * const DailyReport = await prisma.dailyReport.create({
     *   data: {
     *     // ... data to create a DailyReport
     *   }
     * })
     * 
     */
    create<T extends DailyReportCreateArgs>(args: SelectSubset<T, DailyReportCreateArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyReports.
     * @param {DailyReportCreateManyArgs} args - Arguments to create many DailyReports.
     * @example
     * // Create many DailyReports
     * const dailyReport = await prisma.dailyReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyReportCreateManyArgs>(args?: SelectSubset<T, DailyReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyReports and returns the data saved in the database.
     * @param {DailyReportCreateManyAndReturnArgs} args - Arguments to create many DailyReports.
     * @example
     * // Create many DailyReports
     * const dailyReport = await prisma.dailyReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyReports and only return the `id`
     * const dailyReportWithIdOnly = await prisma.dailyReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyReportCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyReport.
     * @param {DailyReportDeleteArgs} args - Arguments to delete one DailyReport.
     * @example
     * // Delete one DailyReport
     * const DailyReport = await prisma.dailyReport.delete({
     *   where: {
     *     // ... filter to delete one DailyReport
     *   }
     * })
     * 
     */
    delete<T extends DailyReportDeleteArgs>(args: SelectSubset<T, DailyReportDeleteArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyReport.
     * @param {DailyReportUpdateArgs} args - Arguments to update one DailyReport.
     * @example
     * // Update one DailyReport
     * const dailyReport = await prisma.dailyReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyReportUpdateArgs>(args: SelectSubset<T, DailyReportUpdateArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyReports.
     * @param {DailyReportDeleteManyArgs} args - Arguments to filter DailyReports to delete.
     * @example
     * // Delete a few DailyReports
     * const { count } = await prisma.dailyReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyReportDeleteManyArgs>(args?: SelectSubset<T, DailyReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyReports
     * const dailyReport = await prisma.dailyReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyReportUpdateManyArgs>(args: SelectSubset<T, DailyReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyReports and returns the data updated in the database.
     * @param {DailyReportUpdateManyAndReturnArgs} args - Arguments to update many DailyReports.
     * @example
     * // Update many DailyReports
     * const dailyReport = await prisma.dailyReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyReports and only return the `id`
     * const dailyReportWithIdOnly = await prisma.dailyReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyReportUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyReport.
     * @param {DailyReportUpsertArgs} args - Arguments to update or create a DailyReport.
     * @example
     * // Update or create a DailyReport
     * const dailyReport = await prisma.dailyReport.upsert({
     *   create: {
     *     // ... data to create a DailyReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyReport we want to update
     *   }
     * })
     */
    upsert<T extends DailyReportUpsertArgs>(args: SelectSubset<T, DailyReportUpsertArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportCountArgs} args - Arguments to filter DailyReports to count.
     * @example
     * // Count the number of DailyReports
     * const count = await prisma.dailyReport.count({
     *   where: {
     *     // ... the filter for the DailyReports we want to count
     *   }
     * })
    **/
    count<T extends DailyReportCountArgs>(
      args?: Subset<T, DailyReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyReportAggregateArgs>(args: Subset<T, DailyReportAggregateArgs>): Prisma.PrismaPromise<GetDailyReportAggregateType<T>>

    /**
     * Group by DailyReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyReportGroupByArgs['orderBy'] }
        : { orderBy?: DailyReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyReport model
   */
  readonly fields: DailyReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reportDetails<T extends DailyReport$reportDetailsArgs<ExtArgs> = {}>(args?: Subset<T, DailyReport$reportDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportSignatures<T extends DailyReport$reportSignaturesArgs<ExtArgs> = {}>(args?: Subset<T, DailyReport$reportSignaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyReport model
   */
  interface DailyReportFieldRefs {
    readonly id: FieldRef<"DailyReport", 'Int'>
    readonly teamId: FieldRef<"DailyReport", 'Int'>
    readonly reportDate: FieldRef<"DailyReport", 'DateTime'>
    readonly managerName: FieldRef<"DailyReport", 'String'>
    readonly remarks: FieldRef<"DailyReport", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DailyReport findUnique
   */
  export type DailyReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport findUniqueOrThrow
   */
  export type DailyReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport findFirst
   */
  export type DailyReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyReports.
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyReports.
     */
    distinct?: DailyReportScalarFieldEnum | DailyReportScalarFieldEnum[]
  }

  /**
   * DailyReport findFirstOrThrow
   */
  export type DailyReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyReports.
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyReports.
     */
    distinct?: DailyReportScalarFieldEnum | DailyReportScalarFieldEnum[]
  }

  /**
   * DailyReport findMany
   */
  export type DailyReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * Filter, which DailyReports to fetch.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyReports.
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    distinct?: DailyReportScalarFieldEnum | DailyReportScalarFieldEnum[]
  }

  /**
   * DailyReport create
   */
  export type DailyReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyReport.
     */
    data: XOR<DailyReportCreateInput, DailyReportUncheckedCreateInput>
  }

  /**
   * DailyReport createMany
   */
  export type DailyReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyReports.
     */
    data: DailyReportCreateManyInput | DailyReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyReport createManyAndReturn
   */
  export type DailyReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * The data used to create many DailyReports.
     */
    data: DailyReportCreateManyInput | DailyReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyReport update
   */
  export type DailyReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyReport.
     */
    data: XOR<DailyReportUpdateInput, DailyReportUncheckedUpdateInput>
    /**
     * Choose, which DailyReport to update.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport updateMany
   */
  export type DailyReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyReports.
     */
    data: XOR<DailyReportUpdateManyMutationInput, DailyReportUncheckedUpdateManyInput>
    /**
     * Filter which DailyReports to update
     */
    where?: DailyReportWhereInput
    /**
     * Limit how many DailyReports to update.
     */
    limit?: number
  }

  /**
   * DailyReport updateManyAndReturn
   */
  export type DailyReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * The data used to update DailyReports.
     */
    data: XOR<DailyReportUpdateManyMutationInput, DailyReportUncheckedUpdateManyInput>
    /**
     * Filter which DailyReports to update
     */
    where?: DailyReportWhereInput
    /**
     * Limit how many DailyReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyReport upsert
   */
  export type DailyReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyReport to update in case it exists.
     */
    where: DailyReportWhereUniqueInput
    /**
     * In case the DailyReport found by the `where` argument doesn't exist, create a new DailyReport with this data.
     */
    create: XOR<DailyReportCreateInput, DailyReportUncheckedCreateInput>
    /**
     * In case the DailyReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyReportUpdateInput, DailyReportUncheckedUpdateInput>
  }

  /**
   * DailyReport delete
   */
  export type DailyReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
    /**
     * Filter which DailyReport to delete.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport deleteMany
   */
  export type DailyReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyReports to delete
     */
    where?: DailyReportWhereInput
    /**
     * Limit how many DailyReports to delete.
     */
    limit?: number
  }

  /**
   * DailyReport.reportDetails
   */
  export type DailyReport$reportDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    where?: ReportDetailWhereInput
    orderBy?: ReportDetailOrderByWithRelationInput | ReportDetailOrderByWithRelationInput[]
    cursor?: ReportDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportDetailScalarFieldEnum | ReportDetailScalarFieldEnum[]
  }

  /**
   * DailyReport.reportSignatures
   */
  export type DailyReport$reportSignaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    where?: ReportSignatureWhereInput
    orderBy?: ReportSignatureOrderByWithRelationInput | ReportSignatureOrderByWithRelationInput[]
    cursor?: ReportSignatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportSignatureScalarFieldEnum | ReportSignatureScalarFieldEnum[]
  }

  /**
   * DailyReport without action
   */
  export type DailyReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReportInclude<ExtArgs> | null
  }


  /**
   * Model ReportDetail
   */

  export type AggregateReportDetail = {
    _count: ReportDetailCountAggregateOutputType | null
    _avg: ReportDetailAvgAggregateOutputType | null
    _sum: ReportDetailSumAggregateOutputType | null
    _min: ReportDetailMinAggregateOutputType | null
    _max: ReportDetailMaxAggregateOutputType | null
  }

  export type ReportDetailAvgAggregateOutputType = {
    id: number | null
    reportId: number | null
    itemId: number | null
  }

  export type ReportDetailSumAggregateOutputType = {
    id: number | null
    reportId: number | null
    itemId: number | null
  }

  export type ReportDetailMinAggregateOutputType = {
    id: number | null
    reportId: number | null
    itemId: number | null
    checkState: string | null
  }

  export type ReportDetailMaxAggregateOutputType = {
    id: number | null
    reportId: number | null
    itemId: number | null
    checkState: string | null
  }

  export type ReportDetailCountAggregateOutputType = {
    id: number
    reportId: number
    itemId: number
    checkState: number
    _all: number
  }


  export type ReportDetailAvgAggregateInputType = {
    id?: true
    reportId?: true
    itemId?: true
  }

  export type ReportDetailSumAggregateInputType = {
    id?: true
    reportId?: true
    itemId?: true
  }

  export type ReportDetailMinAggregateInputType = {
    id?: true
    reportId?: true
    itemId?: true
    checkState?: true
  }

  export type ReportDetailMaxAggregateInputType = {
    id?: true
    reportId?: true
    itemId?: true
    checkState?: true
  }

  export type ReportDetailCountAggregateInputType = {
    id?: true
    reportId?: true
    itemId?: true
    checkState?: true
    _all?: true
  }

  export type ReportDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportDetail to aggregate.
     */
    where?: ReportDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDetails to fetch.
     */
    orderBy?: ReportDetailOrderByWithRelationInput | ReportDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportDetails
    **/
    _count?: true | ReportDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportDetailMaxAggregateInputType
  }

  export type GetReportDetailAggregateType<T extends ReportDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateReportDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportDetail[P]>
      : GetScalarType<T[P], AggregateReportDetail[P]>
  }




  export type ReportDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDetailWhereInput
    orderBy?: ReportDetailOrderByWithAggregationInput | ReportDetailOrderByWithAggregationInput[]
    by: ReportDetailScalarFieldEnum[] | ReportDetailScalarFieldEnum
    having?: ReportDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportDetailCountAggregateInputType | true
    _avg?: ReportDetailAvgAggregateInputType
    _sum?: ReportDetailSumAggregateInputType
    _min?: ReportDetailMinAggregateInputType
    _max?: ReportDetailMaxAggregateInputType
  }

  export type ReportDetailGroupByOutputType = {
    id: number
    reportId: number
    itemId: number
    checkState: string | null
    _count: ReportDetailCountAggregateOutputType | null
    _avg: ReportDetailAvgAggregateOutputType | null
    _sum: ReportDetailSumAggregateOutputType | null
    _min: ReportDetailMinAggregateOutputType | null
    _max: ReportDetailMaxAggregateOutputType | null
  }

  type GetReportDetailGroupByPayload<T extends ReportDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportDetailGroupByOutputType[P]>
            : GetScalarType<T[P], ReportDetailGroupByOutputType[P]>
        }
      >
    >


  export type ReportDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    itemId?: boolean
    checkState?: boolean
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    item?: boolean | TemplateItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportDetail"]>

  export type ReportDetailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    itemId?: boolean
    checkState?: boolean
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    item?: boolean | TemplateItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportDetail"]>

  export type ReportDetailSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    itemId?: boolean
    checkState?: boolean
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    item?: boolean | TemplateItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportDetail"]>

  export type ReportDetailSelectScalar = {
    id?: boolean
    reportId?: boolean
    itemId?: boolean
    checkState?: boolean
  }

  export type ReportDetailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportId" | "itemId" | "checkState", ExtArgs["result"]["reportDetail"]>
  export type ReportDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    item?: boolean | TemplateItemDefaultArgs<ExtArgs>
  }
  export type ReportDetailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    item?: boolean | TemplateItemDefaultArgs<ExtArgs>
  }
  export type ReportDetailIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    item?: boolean | TemplateItemDefaultArgs<ExtArgs>
  }

  export type $ReportDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportDetail"
    objects: {
      report: Prisma.$DailyReportPayload<ExtArgs>
      item: Prisma.$TemplateItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reportId: number
      itemId: number
      checkState: string | null
    }, ExtArgs["result"]["reportDetail"]>
    composites: {}
  }

  type ReportDetailGetPayload<S extends boolean | null | undefined | ReportDetailDefaultArgs> = $Result.GetResult<Prisma.$ReportDetailPayload, S>

  type ReportDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportDetailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportDetailCountAggregateInputType | true
    }

  export interface ReportDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportDetail'], meta: { name: 'ReportDetail' } }
    /**
     * Find zero or one ReportDetail that matches the filter.
     * @param {ReportDetailFindUniqueArgs} args - Arguments to find a ReportDetail
     * @example
     * // Get one ReportDetail
     * const reportDetail = await prisma.reportDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportDetailFindUniqueArgs>(args: SelectSubset<T, ReportDetailFindUniqueArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportDetail that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportDetailFindUniqueOrThrowArgs} args - Arguments to find a ReportDetail
     * @example
     * // Get one ReportDetail
     * const reportDetail = await prisma.reportDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportDetailFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportDetailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDetailFindFirstArgs} args - Arguments to find a ReportDetail
     * @example
     * // Get one ReportDetail
     * const reportDetail = await prisma.reportDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportDetailFindFirstArgs>(args?: SelectSubset<T, ReportDetailFindFirstArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDetailFindFirstOrThrowArgs} args - Arguments to find a ReportDetail
     * @example
     * // Get one ReportDetail
     * const reportDetail = await prisma.reportDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportDetailFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportDetailFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportDetails
     * const reportDetails = await prisma.reportDetail.findMany()
     * 
     * // Get first 10 ReportDetails
     * const reportDetails = await prisma.reportDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportDetailWithIdOnly = await prisma.reportDetail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportDetailFindManyArgs>(args?: SelectSubset<T, ReportDetailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportDetail.
     * @param {ReportDetailCreateArgs} args - Arguments to create a ReportDetail.
     * @example
     * // Create one ReportDetail
     * const ReportDetail = await prisma.reportDetail.create({
     *   data: {
     *     // ... data to create a ReportDetail
     *   }
     * })
     * 
     */
    create<T extends ReportDetailCreateArgs>(args: SelectSubset<T, ReportDetailCreateArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportDetails.
     * @param {ReportDetailCreateManyArgs} args - Arguments to create many ReportDetails.
     * @example
     * // Create many ReportDetails
     * const reportDetail = await prisma.reportDetail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportDetailCreateManyArgs>(args?: SelectSubset<T, ReportDetailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportDetails and returns the data saved in the database.
     * @param {ReportDetailCreateManyAndReturnArgs} args - Arguments to create many ReportDetails.
     * @example
     * // Create many ReportDetails
     * const reportDetail = await prisma.reportDetail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportDetails and only return the `id`
     * const reportDetailWithIdOnly = await prisma.reportDetail.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportDetailCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportDetailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportDetail.
     * @param {ReportDetailDeleteArgs} args - Arguments to delete one ReportDetail.
     * @example
     * // Delete one ReportDetail
     * const ReportDetail = await prisma.reportDetail.delete({
     *   where: {
     *     // ... filter to delete one ReportDetail
     *   }
     * })
     * 
     */
    delete<T extends ReportDetailDeleteArgs>(args: SelectSubset<T, ReportDetailDeleteArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportDetail.
     * @param {ReportDetailUpdateArgs} args - Arguments to update one ReportDetail.
     * @example
     * // Update one ReportDetail
     * const reportDetail = await prisma.reportDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportDetailUpdateArgs>(args: SelectSubset<T, ReportDetailUpdateArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportDetails.
     * @param {ReportDetailDeleteManyArgs} args - Arguments to filter ReportDetails to delete.
     * @example
     * // Delete a few ReportDetails
     * const { count } = await prisma.reportDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDetailDeleteManyArgs>(args?: SelectSubset<T, ReportDetailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportDetails
     * const reportDetail = await prisma.reportDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportDetailUpdateManyArgs>(args: SelectSubset<T, ReportDetailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportDetails and returns the data updated in the database.
     * @param {ReportDetailUpdateManyAndReturnArgs} args - Arguments to update many ReportDetails.
     * @example
     * // Update many ReportDetails
     * const reportDetail = await prisma.reportDetail.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportDetails and only return the `id`
     * const reportDetailWithIdOnly = await prisma.reportDetail.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportDetailUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportDetailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportDetail.
     * @param {ReportDetailUpsertArgs} args - Arguments to update or create a ReportDetail.
     * @example
     * // Update or create a ReportDetail
     * const reportDetail = await prisma.reportDetail.upsert({
     *   create: {
     *     // ... data to create a ReportDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportDetail we want to update
     *   }
     * })
     */
    upsert<T extends ReportDetailUpsertArgs>(args: SelectSubset<T, ReportDetailUpsertArgs<ExtArgs>>): Prisma__ReportDetailClient<$Result.GetResult<Prisma.$ReportDetailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDetailCountArgs} args - Arguments to filter ReportDetails to count.
     * @example
     * // Count the number of ReportDetails
     * const count = await prisma.reportDetail.count({
     *   where: {
     *     // ... the filter for the ReportDetails we want to count
     *   }
     * })
    **/
    count<T extends ReportDetailCountArgs>(
      args?: Subset<T, ReportDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportDetailAggregateArgs>(args: Subset<T, ReportDetailAggregateArgs>): Prisma.PrismaPromise<GetReportDetailAggregateType<T>>

    /**
     * Group by ReportDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportDetailGroupByArgs['orderBy'] }
        : { orderBy?: ReportDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportDetail model
   */
  readonly fields: ReportDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends DailyReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DailyReportDefaultArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends TemplateItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TemplateItemDefaultArgs<ExtArgs>>): Prisma__TemplateItemClient<$Result.GetResult<Prisma.$TemplateItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportDetail model
   */
  interface ReportDetailFieldRefs {
    readonly id: FieldRef<"ReportDetail", 'Int'>
    readonly reportId: FieldRef<"ReportDetail", 'Int'>
    readonly itemId: FieldRef<"ReportDetail", 'Int'>
    readonly checkState: FieldRef<"ReportDetail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportDetail findUnique
   */
  export type ReportDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * Filter, which ReportDetail to fetch.
     */
    where: ReportDetailWhereUniqueInput
  }

  /**
   * ReportDetail findUniqueOrThrow
   */
  export type ReportDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * Filter, which ReportDetail to fetch.
     */
    where: ReportDetailWhereUniqueInput
  }

  /**
   * ReportDetail findFirst
   */
  export type ReportDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * Filter, which ReportDetail to fetch.
     */
    where?: ReportDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDetails to fetch.
     */
    orderBy?: ReportDetailOrderByWithRelationInput | ReportDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportDetails.
     */
    cursor?: ReportDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportDetails.
     */
    distinct?: ReportDetailScalarFieldEnum | ReportDetailScalarFieldEnum[]
  }

  /**
   * ReportDetail findFirstOrThrow
   */
  export type ReportDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * Filter, which ReportDetail to fetch.
     */
    where?: ReportDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDetails to fetch.
     */
    orderBy?: ReportDetailOrderByWithRelationInput | ReportDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportDetails.
     */
    cursor?: ReportDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportDetails.
     */
    distinct?: ReportDetailScalarFieldEnum | ReportDetailScalarFieldEnum[]
  }

  /**
   * ReportDetail findMany
   */
  export type ReportDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * Filter, which ReportDetails to fetch.
     */
    where?: ReportDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDetails to fetch.
     */
    orderBy?: ReportDetailOrderByWithRelationInput | ReportDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportDetails.
     */
    cursor?: ReportDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDetails.
     */
    skip?: number
    distinct?: ReportDetailScalarFieldEnum | ReportDetailScalarFieldEnum[]
  }

  /**
   * ReportDetail create
   */
  export type ReportDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportDetail.
     */
    data: XOR<ReportDetailCreateInput, ReportDetailUncheckedCreateInput>
  }

  /**
   * ReportDetail createMany
   */
  export type ReportDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportDetails.
     */
    data: ReportDetailCreateManyInput | ReportDetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportDetail createManyAndReturn
   */
  export type ReportDetailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * The data used to create many ReportDetails.
     */
    data: ReportDetailCreateManyInput | ReportDetailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportDetail update
   */
  export type ReportDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportDetail.
     */
    data: XOR<ReportDetailUpdateInput, ReportDetailUncheckedUpdateInput>
    /**
     * Choose, which ReportDetail to update.
     */
    where: ReportDetailWhereUniqueInput
  }

  /**
   * ReportDetail updateMany
   */
  export type ReportDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportDetails.
     */
    data: XOR<ReportDetailUpdateManyMutationInput, ReportDetailUncheckedUpdateManyInput>
    /**
     * Filter which ReportDetails to update
     */
    where?: ReportDetailWhereInput
    /**
     * Limit how many ReportDetails to update.
     */
    limit?: number
  }

  /**
   * ReportDetail updateManyAndReturn
   */
  export type ReportDetailUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * The data used to update ReportDetails.
     */
    data: XOR<ReportDetailUpdateManyMutationInput, ReportDetailUncheckedUpdateManyInput>
    /**
     * Filter which ReportDetails to update
     */
    where?: ReportDetailWhereInput
    /**
     * Limit how many ReportDetails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportDetail upsert
   */
  export type ReportDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportDetail to update in case it exists.
     */
    where: ReportDetailWhereUniqueInput
    /**
     * In case the ReportDetail found by the `where` argument doesn't exist, create a new ReportDetail with this data.
     */
    create: XOR<ReportDetailCreateInput, ReportDetailUncheckedCreateInput>
    /**
     * In case the ReportDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportDetailUpdateInput, ReportDetailUncheckedUpdateInput>
  }

  /**
   * ReportDetail delete
   */
  export type ReportDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
    /**
     * Filter which ReportDetail to delete.
     */
    where: ReportDetailWhereUniqueInput
  }

  /**
   * ReportDetail deleteMany
   */
  export type ReportDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportDetails to delete
     */
    where?: ReportDetailWhereInput
    /**
     * Limit how many ReportDetails to delete.
     */
    limit?: number
  }

  /**
   * ReportDetail without action
   */
  export type ReportDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDetail
     */
    select?: ReportDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDetail
     */
    omit?: ReportDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDetailInclude<ExtArgs> | null
  }


  /**
   * Model ReportSignature
   */

  export type AggregateReportSignature = {
    _count: ReportSignatureCountAggregateOutputType | null
    _avg: ReportSignatureAvgAggregateOutputType | null
    _sum: ReportSignatureSumAggregateOutputType | null
    _min: ReportSignatureMinAggregateOutputType | null
    _max: ReportSignatureMaxAggregateOutputType | null
  }

  export type ReportSignatureAvgAggregateOutputType = {
    id: number | null
    reportId: number | null
    userId: number | null
  }

  export type ReportSignatureSumAggregateOutputType = {
    id: number | null
    reportId: number | null
    userId: number | null
  }

  export type ReportSignatureMinAggregateOutputType = {
    id: number | null
    reportId: number | null
    userId: number | null
    signedAt: Date | null
  }

  export type ReportSignatureMaxAggregateOutputType = {
    id: number | null
    reportId: number | null
    userId: number | null
    signedAt: Date | null
  }

  export type ReportSignatureCountAggregateOutputType = {
    id: number
    reportId: number
    userId: number
    signedAt: number
    _all: number
  }


  export type ReportSignatureAvgAggregateInputType = {
    id?: true
    reportId?: true
    userId?: true
  }

  export type ReportSignatureSumAggregateInputType = {
    id?: true
    reportId?: true
    userId?: true
  }

  export type ReportSignatureMinAggregateInputType = {
    id?: true
    reportId?: true
    userId?: true
    signedAt?: true
  }

  export type ReportSignatureMaxAggregateInputType = {
    id?: true
    reportId?: true
    userId?: true
    signedAt?: true
  }

  export type ReportSignatureCountAggregateInputType = {
    id?: true
    reportId?: true
    userId?: true
    signedAt?: true
    _all?: true
  }

  export type ReportSignatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportSignature to aggregate.
     */
    where?: ReportSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSignatures to fetch.
     */
    orderBy?: ReportSignatureOrderByWithRelationInput | ReportSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSignatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportSignatures
    **/
    _count?: true | ReportSignatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportSignatureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSignatureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportSignatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportSignatureMaxAggregateInputType
  }

  export type GetReportSignatureAggregateType<T extends ReportSignatureAggregateArgs> = {
        [P in keyof T & keyof AggregateReportSignature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportSignature[P]>
      : GetScalarType<T[P], AggregateReportSignature[P]>
  }




  export type ReportSignatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSignatureWhereInput
    orderBy?: ReportSignatureOrderByWithAggregationInput | ReportSignatureOrderByWithAggregationInput[]
    by: ReportSignatureScalarFieldEnum[] | ReportSignatureScalarFieldEnum
    having?: ReportSignatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportSignatureCountAggregateInputType | true
    _avg?: ReportSignatureAvgAggregateInputType
    _sum?: ReportSignatureSumAggregateInputType
    _min?: ReportSignatureMinAggregateInputType
    _max?: ReportSignatureMaxAggregateInputType
  }

  export type ReportSignatureGroupByOutputType = {
    id: number
    reportId: number
    userId: number
    signedAt: Date
    _count: ReportSignatureCountAggregateOutputType | null
    _avg: ReportSignatureAvgAggregateOutputType | null
    _sum: ReportSignatureSumAggregateOutputType | null
    _min: ReportSignatureMinAggregateOutputType | null
    _max: ReportSignatureMaxAggregateOutputType | null
  }

  type GetReportSignatureGroupByPayload<T extends ReportSignatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportSignatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportSignatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportSignatureGroupByOutputType[P]>
            : GetScalarType<T[P], ReportSignatureGroupByOutputType[P]>
        }
      >
    >


  export type ReportSignatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    userId?: boolean
    signedAt?: boolean
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    user?: boolean | TbmUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportSignature"]>

  export type ReportSignatureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    userId?: boolean
    signedAt?: boolean
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    user?: boolean | TbmUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportSignature"]>

  export type ReportSignatureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    userId?: boolean
    signedAt?: boolean
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    user?: boolean | TbmUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportSignature"]>

  export type ReportSignatureSelectScalar = {
    id?: boolean
    reportId?: boolean
    userId?: boolean
    signedAt?: boolean
  }

  export type ReportSignatureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportId" | "userId" | "signedAt", ExtArgs["result"]["reportSignature"]>
  export type ReportSignatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    user?: boolean | TbmUserDefaultArgs<ExtArgs>
  }
  export type ReportSignatureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    user?: boolean | TbmUserDefaultArgs<ExtArgs>
  }
  export type ReportSignatureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | DailyReportDefaultArgs<ExtArgs>
    user?: boolean | TbmUserDefaultArgs<ExtArgs>
  }

  export type $ReportSignaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportSignature"
    objects: {
      report: Prisma.$DailyReportPayload<ExtArgs>
      user: Prisma.$TbmUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reportId: number
      userId: number
      signedAt: Date
    }, ExtArgs["result"]["reportSignature"]>
    composites: {}
  }

  type ReportSignatureGetPayload<S extends boolean | null | undefined | ReportSignatureDefaultArgs> = $Result.GetResult<Prisma.$ReportSignaturePayload, S>

  type ReportSignatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportSignatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportSignatureCountAggregateInputType | true
    }

  export interface ReportSignatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportSignature'], meta: { name: 'ReportSignature' } }
    /**
     * Find zero or one ReportSignature that matches the filter.
     * @param {ReportSignatureFindUniqueArgs} args - Arguments to find a ReportSignature
     * @example
     * // Get one ReportSignature
     * const reportSignature = await prisma.reportSignature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportSignatureFindUniqueArgs>(args: SelectSubset<T, ReportSignatureFindUniqueArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportSignature that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportSignatureFindUniqueOrThrowArgs} args - Arguments to find a ReportSignature
     * @example
     * // Get one ReportSignature
     * const reportSignature = await prisma.reportSignature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportSignatureFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportSignatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportSignature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSignatureFindFirstArgs} args - Arguments to find a ReportSignature
     * @example
     * // Get one ReportSignature
     * const reportSignature = await prisma.reportSignature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportSignatureFindFirstArgs>(args?: SelectSubset<T, ReportSignatureFindFirstArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportSignature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSignatureFindFirstOrThrowArgs} args - Arguments to find a ReportSignature
     * @example
     * // Get one ReportSignature
     * const reportSignature = await prisma.reportSignature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportSignatureFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportSignatureFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportSignatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSignatureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportSignatures
     * const reportSignatures = await prisma.reportSignature.findMany()
     * 
     * // Get first 10 ReportSignatures
     * const reportSignatures = await prisma.reportSignature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportSignatureWithIdOnly = await prisma.reportSignature.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportSignatureFindManyArgs>(args?: SelectSubset<T, ReportSignatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportSignature.
     * @param {ReportSignatureCreateArgs} args - Arguments to create a ReportSignature.
     * @example
     * // Create one ReportSignature
     * const ReportSignature = await prisma.reportSignature.create({
     *   data: {
     *     // ... data to create a ReportSignature
     *   }
     * })
     * 
     */
    create<T extends ReportSignatureCreateArgs>(args: SelectSubset<T, ReportSignatureCreateArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportSignatures.
     * @param {ReportSignatureCreateManyArgs} args - Arguments to create many ReportSignatures.
     * @example
     * // Create many ReportSignatures
     * const reportSignature = await prisma.reportSignature.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportSignatureCreateManyArgs>(args?: SelectSubset<T, ReportSignatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportSignatures and returns the data saved in the database.
     * @param {ReportSignatureCreateManyAndReturnArgs} args - Arguments to create many ReportSignatures.
     * @example
     * // Create many ReportSignatures
     * const reportSignature = await prisma.reportSignature.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportSignatures and only return the `id`
     * const reportSignatureWithIdOnly = await prisma.reportSignature.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportSignatureCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportSignatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportSignature.
     * @param {ReportSignatureDeleteArgs} args - Arguments to delete one ReportSignature.
     * @example
     * // Delete one ReportSignature
     * const ReportSignature = await prisma.reportSignature.delete({
     *   where: {
     *     // ... filter to delete one ReportSignature
     *   }
     * })
     * 
     */
    delete<T extends ReportSignatureDeleteArgs>(args: SelectSubset<T, ReportSignatureDeleteArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportSignature.
     * @param {ReportSignatureUpdateArgs} args - Arguments to update one ReportSignature.
     * @example
     * // Update one ReportSignature
     * const reportSignature = await prisma.reportSignature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportSignatureUpdateArgs>(args: SelectSubset<T, ReportSignatureUpdateArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportSignatures.
     * @param {ReportSignatureDeleteManyArgs} args - Arguments to filter ReportSignatures to delete.
     * @example
     * // Delete a few ReportSignatures
     * const { count } = await prisma.reportSignature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportSignatureDeleteManyArgs>(args?: SelectSubset<T, ReportSignatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportSignatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSignatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportSignatures
     * const reportSignature = await prisma.reportSignature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportSignatureUpdateManyArgs>(args: SelectSubset<T, ReportSignatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportSignatures and returns the data updated in the database.
     * @param {ReportSignatureUpdateManyAndReturnArgs} args - Arguments to update many ReportSignatures.
     * @example
     * // Update many ReportSignatures
     * const reportSignature = await prisma.reportSignature.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportSignatures and only return the `id`
     * const reportSignatureWithIdOnly = await prisma.reportSignature.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportSignatureUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportSignatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportSignature.
     * @param {ReportSignatureUpsertArgs} args - Arguments to update or create a ReportSignature.
     * @example
     * // Update or create a ReportSignature
     * const reportSignature = await prisma.reportSignature.upsert({
     *   create: {
     *     // ... data to create a ReportSignature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportSignature we want to update
     *   }
     * })
     */
    upsert<T extends ReportSignatureUpsertArgs>(args: SelectSubset<T, ReportSignatureUpsertArgs<ExtArgs>>): Prisma__ReportSignatureClient<$Result.GetResult<Prisma.$ReportSignaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportSignatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSignatureCountArgs} args - Arguments to filter ReportSignatures to count.
     * @example
     * // Count the number of ReportSignatures
     * const count = await prisma.reportSignature.count({
     *   where: {
     *     // ... the filter for the ReportSignatures we want to count
     *   }
     * })
    **/
    count<T extends ReportSignatureCountArgs>(
      args?: Subset<T, ReportSignatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportSignatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportSignature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSignatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportSignatureAggregateArgs>(args: Subset<T, ReportSignatureAggregateArgs>): Prisma.PrismaPromise<GetReportSignatureAggregateType<T>>

    /**
     * Group by ReportSignature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSignatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportSignatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportSignatureGroupByArgs['orderBy'] }
        : { orderBy?: ReportSignatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportSignatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportSignatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportSignature model
   */
  readonly fields: ReportSignatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportSignature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportSignatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends DailyReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DailyReportDefaultArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends TbmUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TbmUserDefaultArgs<ExtArgs>>): Prisma__TbmUserClient<$Result.GetResult<Prisma.$TbmUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportSignature model
   */
  interface ReportSignatureFieldRefs {
    readonly id: FieldRef<"ReportSignature", 'Int'>
    readonly reportId: FieldRef<"ReportSignature", 'Int'>
    readonly userId: FieldRef<"ReportSignature", 'Int'>
    readonly signedAt: FieldRef<"ReportSignature", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportSignature findUnique
   */
  export type ReportSignatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ReportSignature to fetch.
     */
    where: ReportSignatureWhereUniqueInput
  }

  /**
   * ReportSignature findUniqueOrThrow
   */
  export type ReportSignatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ReportSignature to fetch.
     */
    where: ReportSignatureWhereUniqueInput
  }

  /**
   * ReportSignature findFirst
   */
  export type ReportSignatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ReportSignature to fetch.
     */
    where?: ReportSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSignatures to fetch.
     */
    orderBy?: ReportSignatureOrderByWithRelationInput | ReportSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportSignatures.
     */
    cursor?: ReportSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSignatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportSignatures.
     */
    distinct?: ReportSignatureScalarFieldEnum | ReportSignatureScalarFieldEnum[]
  }

  /**
   * ReportSignature findFirstOrThrow
   */
  export type ReportSignatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ReportSignature to fetch.
     */
    where?: ReportSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSignatures to fetch.
     */
    orderBy?: ReportSignatureOrderByWithRelationInput | ReportSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportSignatures.
     */
    cursor?: ReportSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSignatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportSignatures.
     */
    distinct?: ReportSignatureScalarFieldEnum | ReportSignatureScalarFieldEnum[]
  }

  /**
   * ReportSignature findMany
   */
  export type ReportSignatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ReportSignatures to fetch.
     */
    where?: ReportSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSignatures to fetch.
     */
    orderBy?: ReportSignatureOrderByWithRelationInput | ReportSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportSignatures.
     */
    cursor?: ReportSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSignatures.
     */
    skip?: number
    distinct?: ReportSignatureScalarFieldEnum | ReportSignatureScalarFieldEnum[]
  }

  /**
   * ReportSignature create
   */
  export type ReportSignatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportSignature.
     */
    data: XOR<ReportSignatureCreateInput, ReportSignatureUncheckedCreateInput>
  }

  /**
   * ReportSignature createMany
   */
  export type ReportSignatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportSignatures.
     */
    data: ReportSignatureCreateManyInput | ReportSignatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportSignature createManyAndReturn
   */
  export type ReportSignatureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * The data used to create many ReportSignatures.
     */
    data: ReportSignatureCreateManyInput | ReportSignatureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportSignature update
   */
  export type ReportSignatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportSignature.
     */
    data: XOR<ReportSignatureUpdateInput, ReportSignatureUncheckedUpdateInput>
    /**
     * Choose, which ReportSignature to update.
     */
    where: ReportSignatureWhereUniqueInput
  }

  /**
   * ReportSignature updateMany
   */
  export type ReportSignatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportSignatures.
     */
    data: XOR<ReportSignatureUpdateManyMutationInput, ReportSignatureUncheckedUpdateManyInput>
    /**
     * Filter which ReportSignatures to update
     */
    where?: ReportSignatureWhereInput
    /**
     * Limit how many ReportSignatures to update.
     */
    limit?: number
  }

  /**
   * ReportSignature updateManyAndReturn
   */
  export type ReportSignatureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * The data used to update ReportSignatures.
     */
    data: XOR<ReportSignatureUpdateManyMutationInput, ReportSignatureUncheckedUpdateManyInput>
    /**
     * Filter which ReportSignatures to update
     */
    where?: ReportSignatureWhereInput
    /**
     * Limit how many ReportSignatures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportSignature upsert
   */
  export type ReportSignatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportSignature to update in case it exists.
     */
    where: ReportSignatureWhereUniqueInput
    /**
     * In case the ReportSignature found by the `where` argument doesn't exist, create a new ReportSignature with this data.
     */
    create: XOR<ReportSignatureCreateInput, ReportSignatureUncheckedCreateInput>
    /**
     * In case the ReportSignature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportSignatureUpdateInput, ReportSignatureUncheckedUpdateInput>
  }

  /**
   * ReportSignature delete
   */
  export type ReportSignatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
    /**
     * Filter which ReportSignature to delete.
     */
    where: ReportSignatureWhereUniqueInput
  }

  /**
   * ReportSignature deleteMany
   */
  export type ReportSignatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportSignatures to delete
     */
    where?: ReportSignatureWhereInput
    /**
     * Limit how many ReportSignatures to delete.
     */
    limit?: number
  }

  /**
   * ReportSignature without action
   */
  export type ReportSignatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSignature
     */
    select?: ReportSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSignature
     */
    omit?: ReportSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSignatureInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CourseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    duration: 'duration',
    videoUrl: 'videoUrl',
    documentUrl: 'documentUrl',
    color: 'color',
    icon: 'icon',
    isActive: 'isActive'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const UserProgressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    courseId: 'courseId',
    progress: 'progress',
    completed: 'completed',
    currentStep: 'currentStep',
    timeSpent: 'timeSpent',
    lastAccessed: 'lastAccessed'
  };

  export type UserProgressScalarFieldEnum = (typeof UserProgressScalarFieldEnum)[keyof typeof UserProgressScalarFieldEnum]


  export const AssessmentScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    question: 'question',
    options: 'options',
    correctAnswer: 'correctAnswer',
    difficulty: 'difficulty'
  };

  export type AssessmentScalarFieldEnum = (typeof AssessmentScalarFieldEnum)[keyof typeof AssessmentScalarFieldEnum]


  export const UserAssessmentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    courseId: 'courseId',
    score: 'score',
    totalQuestions: 'totalQuestions',
    passed: 'passed',
    attemptNumber: 'attemptNumber',
    completedAt: 'completedAt'
  };

  export type UserAssessmentScalarFieldEnum = (typeof UserAssessmentScalarFieldEnum)[keyof typeof UserAssessmentScalarFieldEnum]


  export const CertificateScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    courseId: 'courseId',
    certificateUrl: 'certificateUrl',
    issuedAt: 'issuedAt'
  };

  export type CertificateScalarFieldEnum = (typeof CertificateScalarFieldEnum)[keyof typeof CertificateScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TbmUserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    teamId: 'teamId'
  };

  export type TbmUserScalarFieldEnum = (typeof TbmUserScalarFieldEnum)[keyof typeof TbmUserScalarFieldEnum]


  export const ChecklistTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    teamId: 'teamId'
  };

  export type ChecklistTemplateScalarFieldEnum = (typeof ChecklistTemplateScalarFieldEnum)[keyof typeof ChecklistTemplateScalarFieldEnum]


  export const TemplateItemScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    category: 'category',
    subCategory: 'subCategory',
    description: 'description',
    displayOrder: 'displayOrder'
  };

  export type TemplateItemScalarFieldEnum = (typeof TemplateItemScalarFieldEnum)[keyof typeof TemplateItemScalarFieldEnum]


  export const DailyReportScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    reportDate: 'reportDate',
    managerName: 'managerName',
    remarks: 'remarks'
  };

  export type DailyReportScalarFieldEnum = (typeof DailyReportScalarFieldEnum)[keyof typeof DailyReportScalarFieldEnum]


  export const ReportDetailScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    itemId: 'itemId',
    checkState: 'checkState'
  };

  export type ReportDetailScalarFieldEnum = (typeof ReportDetailScalarFieldEnum)[keyof typeof ReportDetailScalarFieldEnum]


  export const ReportSignatureScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    userId: 'userId',
    signedAt: 'signedAt'
  };

  export type ReportSignatureScalarFieldEnum = (typeof ReportSignatureScalarFieldEnum)[keyof typeof ReportSignatureScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    title?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    type?: StringFilter<"Course"> | string
    duration?: IntFilter<"Course"> | number
    videoUrl?: StringNullableFilter<"Course"> | string | null
    documentUrl?: StringNullableFilter<"Course"> | string | null
    color?: StringFilter<"Course"> | string
    icon?: StringFilter<"Course"> | string
    isActive?: BoolFilter<"Course"> | boolean
    userProgress?: UserProgressListRelationFilter
    assessments?: AssessmentListRelationFilter
    userAssessments?: UserAssessmentListRelationFilter
    certificates?: CertificateListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    duration?: SortOrder
    videoUrl?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    color?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    userProgress?: UserProgressOrderByRelationAggregateInput
    assessments?: AssessmentOrderByRelationAggregateInput
    userAssessments?: UserAssessmentOrderByRelationAggregateInput
    certificates?: CertificateOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    title?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    type?: StringFilter<"Course"> | string
    duration?: IntFilter<"Course"> | number
    videoUrl?: StringNullableFilter<"Course"> | string | null
    documentUrl?: StringNullableFilter<"Course"> | string | null
    color?: StringFilter<"Course"> | string
    icon?: StringFilter<"Course"> | string
    isActive?: BoolFilter<"Course"> | boolean
    userProgress?: UserProgressListRelationFilter
    assessments?: AssessmentListRelationFilter
    userAssessments?: UserAssessmentListRelationFilter
    certificates?: CertificateListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    duration?: SortOrder
    videoUrl?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    color?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    title?: StringWithAggregatesFilter<"Course"> | string
    description?: StringWithAggregatesFilter<"Course"> | string
    type?: StringWithAggregatesFilter<"Course"> | string
    duration?: IntWithAggregatesFilter<"Course"> | number
    videoUrl?: StringNullableWithAggregatesFilter<"Course"> | string | null
    documentUrl?: StringNullableWithAggregatesFilter<"Course"> | string | null
    color?: StringWithAggregatesFilter<"Course"> | string
    icon?: StringWithAggregatesFilter<"Course"> | string
    isActive?: BoolWithAggregatesFilter<"Course"> | boolean
  }

  export type UserProgressWhereInput = {
    AND?: UserProgressWhereInput | UserProgressWhereInput[]
    OR?: UserProgressWhereInput[]
    NOT?: UserProgressWhereInput | UserProgressWhereInput[]
    id?: StringFilter<"UserProgress"> | string
    userId?: StringFilter<"UserProgress"> | string
    courseId?: StringFilter<"UserProgress"> | string
    progress?: IntFilter<"UserProgress"> | number
    completed?: BoolFilter<"UserProgress"> | boolean
    currentStep?: IntFilter<"UserProgress"> | number
    timeSpent?: IntFilter<"UserProgress"> | number
    lastAccessed?: DateTimeFilter<"UserProgress"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type UserProgressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    progress?: SortOrder
    completed?: SortOrder
    currentStep?: SortOrder
    timeSpent?: SortOrder
    lastAccessed?: SortOrder
    course?: CourseOrderByWithRelationInput
  }

  export type UserProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserProgressWhereInput | UserProgressWhereInput[]
    OR?: UserProgressWhereInput[]
    NOT?: UserProgressWhereInput | UserProgressWhereInput[]
    userId?: StringFilter<"UserProgress"> | string
    courseId?: StringFilter<"UserProgress"> | string
    progress?: IntFilter<"UserProgress"> | number
    completed?: BoolFilter<"UserProgress"> | boolean
    currentStep?: IntFilter<"UserProgress"> | number
    timeSpent?: IntFilter<"UserProgress"> | number
    lastAccessed?: DateTimeFilter<"UserProgress"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type UserProgressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    progress?: SortOrder
    completed?: SortOrder
    currentStep?: SortOrder
    timeSpent?: SortOrder
    lastAccessed?: SortOrder
    _count?: UserProgressCountOrderByAggregateInput
    _avg?: UserProgressAvgOrderByAggregateInput
    _max?: UserProgressMaxOrderByAggregateInput
    _min?: UserProgressMinOrderByAggregateInput
    _sum?: UserProgressSumOrderByAggregateInput
  }

  export type UserProgressScalarWhereWithAggregatesInput = {
    AND?: UserProgressScalarWhereWithAggregatesInput | UserProgressScalarWhereWithAggregatesInput[]
    OR?: UserProgressScalarWhereWithAggregatesInput[]
    NOT?: UserProgressScalarWhereWithAggregatesInput | UserProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProgress"> | string
    userId?: StringWithAggregatesFilter<"UserProgress"> | string
    courseId?: StringWithAggregatesFilter<"UserProgress"> | string
    progress?: IntWithAggregatesFilter<"UserProgress"> | number
    completed?: BoolWithAggregatesFilter<"UserProgress"> | boolean
    currentStep?: IntWithAggregatesFilter<"UserProgress"> | number
    timeSpent?: IntWithAggregatesFilter<"UserProgress"> | number
    lastAccessed?: DateTimeWithAggregatesFilter<"UserProgress"> | Date | string
  }

  export type AssessmentWhereInput = {
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    id?: StringFilter<"Assessment"> | string
    courseId?: StringFilter<"Assessment"> | string
    question?: StringFilter<"Assessment"> | string
    options?: StringFilter<"Assessment"> | string
    correctAnswer?: IntFilter<"Assessment"> | number
    difficulty?: StringFilter<"Assessment"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type AssessmentOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    difficulty?: SortOrder
    course?: CourseOrderByWithRelationInput
  }

  export type AssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    courseId?: StringFilter<"Assessment"> | string
    question?: StringFilter<"Assessment"> | string
    options?: StringFilter<"Assessment"> | string
    correctAnswer?: IntFilter<"Assessment"> | number
    difficulty?: StringFilter<"Assessment"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type AssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    difficulty?: SortOrder
    _count?: AssessmentCountOrderByAggregateInput
    _avg?: AssessmentAvgOrderByAggregateInput
    _max?: AssessmentMaxOrderByAggregateInput
    _min?: AssessmentMinOrderByAggregateInput
    _sum?: AssessmentSumOrderByAggregateInput
  }

  export type AssessmentScalarWhereWithAggregatesInput = {
    AND?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    OR?: AssessmentScalarWhereWithAggregatesInput[]
    NOT?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assessment"> | string
    courseId?: StringWithAggregatesFilter<"Assessment"> | string
    question?: StringWithAggregatesFilter<"Assessment"> | string
    options?: StringWithAggregatesFilter<"Assessment"> | string
    correctAnswer?: IntWithAggregatesFilter<"Assessment"> | number
    difficulty?: StringWithAggregatesFilter<"Assessment"> | string
  }

  export type UserAssessmentWhereInput = {
    AND?: UserAssessmentWhereInput | UserAssessmentWhereInput[]
    OR?: UserAssessmentWhereInput[]
    NOT?: UserAssessmentWhereInput | UserAssessmentWhereInput[]
    id?: StringFilter<"UserAssessment"> | string
    userId?: StringFilter<"UserAssessment"> | string
    courseId?: StringFilter<"UserAssessment"> | string
    score?: IntFilter<"UserAssessment"> | number
    totalQuestions?: IntFilter<"UserAssessment"> | number
    passed?: BoolFilter<"UserAssessment"> | boolean
    attemptNumber?: IntFilter<"UserAssessment"> | number
    completedAt?: DateTimeFilter<"UserAssessment"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type UserAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    score?: SortOrder
    totalQuestions?: SortOrder
    passed?: SortOrder
    attemptNumber?: SortOrder
    completedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
  }

  export type UserAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserAssessmentWhereInput | UserAssessmentWhereInput[]
    OR?: UserAssessmentWhereInput[]
    NOT?: UserAssessmentWhereInput | UserAssessmentWhereInput[]
    userId?: StringFilter<"UserAssessment"> | string
    courseId?: StringFilter<"UserAssessment"> | string
    score?: IntFilter<"UserAssessment"> | number
    totalQuestions?: IntFilter<"UserAssessment"> | number
    passed?: BoolFilter<"UserAssessment"> | boolean
    attemptNumber?: IntFilter<"UserAssessment"> | number
    completedAt?: DateTimeFilter<"UserAssessment"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type UserAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    score?: SortOrder
    totalQuestions?: SortOrder
    passed?: SortOrder
    attemptNumber?: SortOrder
    completedAt?: SortOrder
    _count?: UserAssessmentCountOrderByAggregateInput
    _avg?: UserAssessmentAvgOrderByAggregateInput
    _max?: UserAssessmentMaxOrderByAggregateInput
    _min?: UserAssessmentMinOrderByAggregateInput
    _sum?: UserAssessmentSumOrderByAggregateInput
  }

  export type UserAssessmentScalarWhereWithAggregatesInput = {
    AND?: UserAssessmentScalarWhereWithAggregatesInput | UserAssessmentScalarWhereWithAggregatesInput[]
    OR?: UserAssessmentScalarWhereWithAggregatesInput[]
    NOT?: UserAssessmentScalarWhereWithAggregatesInput | UserAssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAssessment"> | string
    userId?: StringWithAggregatesFilter<"UserAssessment"> | string
    courseId?: StringWithAggregatesFilter<"UserAssessment"> | string
    score?: IntWithAggregatesFilter<"UserAssessment"> | number
    totalQuestions?: IntWithAggregatesFilter<"UserAssessment"> | number
    passed?: BoolWithAggregatesFilter<"UserAssessment"> | boolean
    attemptNumber?: IntWithAggregatesFilter<"UserAssessment"> | number
    completedAt?: DateTimeWithAggregatesFilter<"UserAssessment"> | Date | string
  }

  export type CertificateWhereInput = {
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    id?: StringFilter<"Certificate"> | string
    userId?: StringFilter<"Certificate"> | string
    courseId?: StringFilter<"Certificate"> | string
    certificateUrl?: StringFilter<"Certificate"> | string
    issuedAt?: DateTimeFilter<"Certificate"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type CertificateOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    certificateUrl?: SortOrder
    issuedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
  }

  export type CertificateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    userId?: StringFilter<"Certificate"> | string
    courseId?: StringFilter<"Certificate"> | string
    certificateUrl?: StringFilter<"Certificate"> | string
    issuedAt?: DateTimeFilter<"Certificate"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type CertificateOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    certificateUrl?: SortOrder
    issuedAt?: SortOrder
    _count?: CertificateCountOrderByAggregateInput
    _max?: CertificateMaxOrderByAggregateInput
    _min?: CertificateMinOrderByAggregateInput
  }

  export type CertificateScalarWhereWithAggregatesInput = {
    AND?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    OR?: CertificateScalarWhereWithAggregatesInput[]
    NOT?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Certificate"> | string
    userId?: StringWithAggregatesFilter<"Certificate"> | string
    courseId?: StringWithAggregatesFilter<"Certificate"> | string
    certificateUrl?: StringWithAggregatesFilter<"Certificate"> | string
    issuedAt?: DateTimeWithAggregatesFilter<"Certificate"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringNullableFilter<"Team"> | string | null
    checklistTemplates?: ChecklistTemplateListRelationFilter
    dailyReports?: DailyReportListRelationFilter
    users?: TbmUserListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    checklistTemplates?: ChecklistTemplateOrderByRelationAggregateInput
    dailyReports?: DailyReportOrderByRelationAggregateInput
    users?: TbmUserOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringNullableFilter<"Team"> | string | null
    checklistTemplates?: ChecklistTemplateListRelationFilter
    dailyReports?: DailyReportListRelationFilter
    users?: TbmUserListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringNullableWithAggregatesFilter<"Team"> | string | null
  }

  export type TbmUserWhereInput = {
    AND?: TbmUserWhereInput | TbmUserWhereInput[]
    OR?: TbmUserWhereInput[]
    NOT?: TbmUserWhereInput | TbmUserWhereInput[]
    id?: IntFilter<"TbmUser"> | number
    name?: StringNullableFilter<"TbmUser"> | string | null
    teamId?: IntFilter<"TbmUser"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    reportSignatures?: ReportSignatureListRelationFilter
  }

  export type TbmUserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    reportSignatures?: ReportSignatureOrderByRelationAggregateInput
  }

  export type TbmUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TbmUserWhereInput | TbmUserWhereInput[]
    OR?: TbmUserWhereInput[]
    NOT?: TbmUserWhereInput | TbmUserWhereInput[]
    name?: StringNullableFilter<"TbmUser"> | string | null
    teamId?: IntFilter<"TbmUser"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    reportSignatures?: ReportSignatureListRelationFilter
  }, "id">

  export type TbmUserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    teamId?: SortOrder
    _count?: TbmUserCountOrderByAggregateInput
    _avg?: TbmUserAvgOrderByAggregateInput
    _max?: TbmUserMaxOrderByAggregateInput
    _min?: TbmUserMinOrderByAggregateInput
    _sum?: TbmUserSumOrderByAggregateInput
  }

  export type TbmUserScalarWhereWithAggregatesInput = {
    AND?: TbmUserScalarWhereWithAggregatesInput | TbmUserScalarWhereWithAggregatesInput[]
    OR?: TbmUserScalarWhereWithAggregatesInput[]
    NOT?: TbmUserScalarWhereWithAggregatesInput | TbmUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TbmUser"> | number
    name?: StringNullableWithAggregatesFilter<"TbmUser"> | string | null
    teamId?: IntWithAggregatesFilter<"TbmUser"> | number
  }

  export type ChecklistTemplateWhereInput = {
    AND?: ChecklistTemplateWhereInput | ChecklistTemplateWhereInput[]
    OR?: ChecklistTemplateWhereInput[]
    NOT?: ChecklistTemplateWhereInput | ChecklistTemplateWhereInput[]
    id?: IntFilter<"ChecklistTemplate"> | number
    name?: StringNullableFilter<"ChecklistTemplate"> | string | null
    teamId?: IntFilter<"ChecklistTemplate"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    templateItems?: TemplateItemListRelationFilter
  }

  export type ChecklistTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    templateItems?: TemplateItemOrderByRelationAggregateInput
  }

  export type ChecklistTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChecklistTemplateWhereInput | ChecklistTemplateWhereInput[]
    OR?: ChecklistTemplateWhereInput[]
    NOT?: ChecklistTemplateWhereInput | ChecklistTemplateWhereInput[]
    name?: StringNullableFilter<"ChecklistTemplate"> | string | null
    teamId?: IntFilter<"ChecklistTemplate"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    templateItems?: TemplateItemListRelationFilter
  }, "id">

  export type ChecklistTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    teamId?: SortOrder
    _count?: ChecklistTemplateCountOrderByAggregateInput
    _avg?: ChecklistTemplateAvgOrderByAggregateInput
    _max?: ChecklistTemplateMaxOrderByAggregateInput
    _min?: ChecklistTemplateMinOrderByAggregateInput
    _sum?: ChecklistTemplateSumOrderByAggregateInput
  }

  export type ChecklistTemplateScalarWhereWithAggregatesInput = {
    AND?: ChecklistTemplateScalarWhereWithAggregatesInput | ChecklistTemplateScalarWhereWithAggregatesInput[]
    OR?: ChecklistTemplateScalarWhereWithAggregatesInput[]
    NOT?: ChecklistTemplateScalarWhereWithAggregatesInput | ChecklistTemplateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChecklistTemplate"> | number
    name?: StringNullableWithAggregatesFilter<"ChecklistTemplate"> | string | null
    teamId?: IntWithAggregatesFilter<"ChecklistTemplate"> | number
  }

  export type TemplateItemWhereInput = {
    AND?: TemplateItemWhereInput | TemplateItemWhereInput[]
    OR?: TemplateItemWhereInput[]
    NOT?: TemplateItemWhereInput | TemplateItemWhereInput[]
    id?: IntFilter<"TemplateItem"> | number
    templateId?: IntFilter<"TemplateItem"> | number
    category?: StringNullableFilter<"TemplateItem"> | string | null
    subCategory?: StringNullableFilter<"TemplateItem"> | string | null
    description?: StringNullableFilter<"TemplateItem"> | string | null
    displayOrder?: IntFilter<"TemplateItem"> | number
    template?: XOR<ChecklistTemplateScalarRelationFilter, ChecklistTemplateWhereInput>
    reportDetails?: ReportDetailListRelationFilter
  }

  export type TemplateItemOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    category?: SortOrderInput | SortOrder
    subCategory?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    displayOrder?: SortOrder
    template?: ChecklistTemplateOrderByWithRelationInput
    reportDetails?: ReportDetailOrderByRelationAggregateInput
  }

  export type TemplateItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TemplateItemWhereInput | TemplateItemWhereInput[]
    OR?: TemplateItemWhereInput[]
    NOT?: TemplateItemWhereInput | TemplateItemWhereInput[]
    templateId?: IntFilter<"TemplateItem"> | number
    category?: StringNullableFilter<"TemplateItem"> | string | null
    subCategory?: StringNullableFilter<"TemplateItem"> | string | null
    description?: StringNullableFilter<"TemplateItem"> | string | null
    displayOrder?: IntFilter<"TemplateItem"> | number
    template?: XOR<ChecklistTemplateScalarRelationFilter, ChecklistTemplateWhereInput>
    reportDetails?: ReportDetailListRelationFilter
  }, "id">

  export type TemplateItemOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    category?: SortOrderInput | SortOrder
    subCategory?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    displayOrder?: SortOrder
    _count?: TemplateItemCountOrderByAggregateInput
    _avg?: TemplateItemAvgOrderByAggregateInput
    _max?: TemplateItemMaxOrderByAggregateInput
    _min?: TemplateItemMinOrderByAggregateInput
    _sum?: TemplateItemSumOrderByAggregateInput
  }

  export type TemplateItemScalarWhereWithAggregatesInput = {
    AND?: TemplateItemScalarWhereWithAggregatesInput | TemplateItemScalarWhereWithAggregatesInput[]
    OR?: TemplateItemScalarWhereWithAggregatesInput[]
    NOT?: TemplateItemScalarWhereWithAggregatesInput | TemplateItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TemplateItem"> | number
    templateId?: IntWithAggregatesFilter<"TemplateItem"> | number
    category?: StringNullableWithAggregatesFilter<"TemplateItem"> | string | null
    subCategory?: StringNullableWithAggregatesFilter<"TemplateItem"> | string | null
    description?: StringNullableWithAggregatesFilter<"TemplateItem"> | string | null
    displayOrder?: IntWithAggregatesFilter<"TemplateItem"> | number
  }

  export type DailyReportWhereInput = {
    AND?: DailyReportWhereInput | DailyReportWhereInput[]
    OR?: DailyReportWhereInput[]
    NOT?: DailyReportWhereInput | DailyReportWhereInput[]
    id?: IntFilter<"DailyReport"> | number
    teamId?: IntFilter<"DailyReport"> | number
    reportDate?: DateTimeFilter<"DailyReport"> | Date | string
    managerName?: StringNullableFilter<"DailyReport"> | string | null
    remarks?: StringNullableFilter<"DailyReport"> | string | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    reportDetails?: ReportDetailListRelationFilter
    reportSignatures?: ReportSignatureListRelationFilter
  }

  export type DailyReportOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    reportDate?: SortOrder
    managerName?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    team?: TeamOrderByWithRelationInput
    reportDetails?: ReportDetailOrderByRelationAggregateInput
    reportSignatures?: ReportSignatureOrderByRelationAggregateInput
  }

  export type DailyReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DailyReportWhereInput | DailyReportWhereInput[]
    OR?: DailyReportWhereInput[]
    NOT?: DailyReportWhereInput | DailyReportWhereInput[]
    teamId?: IntFilter<"DailyReport"> | number
    reportDate?: DateTimeFilter<"DailyReport"> | Date | string
    managerName?: StringNullableFilter<"DailyReport"> | string | null
    remarks?: StringNullableFilter<"DailyReport"> | string | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    reportDetails?: ReportDetailListRelationFilter
    reportSignatures?: ReportSignatureListRelationFilter
  }, "id">

  export type DailyReportOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    reportDate?: SortOrder
    managerName?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    _count?: DailyReportCountOrderByAggregateInput
    _avg?: DailyReportAvgOrderByAggregateInput
    _max?: DailyReportMaxOrderByAggregateInput
    _min?: DailyReportMinOrderByAggregateInput
    _sum?: DailyReportSumOrderByAggregateInput
  }

  export type DailyReportScalarWhereWithAggregatesInput = {
    AND?: DailyReportScalarWhereWithAggregatesInput | DailyReportScalarWhereWithAggregatesInput[]
    OR?: DailyReportScalarWhereWithAggregatesInput[]
    NOT?: DailyReportScalarWhereWithAggregatesInput | DailyReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DailyReport"> | number
    teamId?: IntWithAggregatesFilter<"DailyReport"> | number
    reportDate?: DateTimeWithAggregatesFilter<"DailyReport"> | Date | string
    managerName?: StringNullableWithAggregatesFilter<"DailyReport"> | string | null
    remarks?: StringNullableWithAggregatesFilter<"DailyReport"> | string | null
  }

  export type ReportDetailWhereInput = {
    AND?: ReportDetailWhereInput | ReportDetailWhereInput[]
    OR?: ReportDetailWhereInput[]
    NOT?: ReportDetailWhereInput | ReportDetailWhereInput[]
    id?: IntFilter<"ReportDetail"> | number
    reportId?: IntFilter<"ReportDetail"> | number
    itemId?: IntFilter<"ReportDetail"> | number
    checkState?: StringNullableFilter<"ReportDetail"> | string | null
    report?: XOR<DailyReportScalarRelationFilter, DailyReportWhereInput>
    item?: XOR<TemplateItemScalarRelationFilter, TemplateItemWhereInput>
  }

  export type ReportDetailOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    itemId?: SortOrder
    checkState?: SortOrderInput | SortOrder
    report?: DailyReportOrderByWithRelationInput
    item?: TemplateItemOrderByWithRelationInput
  }

  export type ReportDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportDetailWhereInput | ReportDetailWhereInput[]
    OR?: ReportDetailWhereInput[]
    NOT?: ReportDetailWhereInput | ReportDetailWhereInput[]
    reportId?: IntFilter<"ReportDetail"> | number
    itemId?: IntFilter<"ReportDetail"> | number
    checkState?: StringNullableFilter<"ReportDetail"> | string | null
    report?: XOR<DailyReportScalarRelationFilter, DailyReportWhereInput>
    item?: XOR<TemplateItemScalarRelationFilter, TemplateItemWhereInput>
  }, "id">

  export type ReportDetailOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    itemId?: SortOrder
    checkState?: SortOrderInput | SortOrder
    _count?: ReportDetailCountOrderByAggregateInput
    _avg?: ReportDetailAvgOrderByAggregateInput
    _max?: ReportDetailMaxOrderByAggregateInput
    _min?: ReportDetailMinOrderByAggregateInput
    _sum?: ReportDetailSumOrderByAggregateInput
  }

  export type ReportDetailScalarWhereWithAggregatesInput = {
    AND?: ReportDetailScalarWhereWithAggregatesInput | ReportDetailScalarWhereWithAggregatesInput[]
    OR?: ReportDetailScalarWhereWithAggregatesInput[]
    NOT?: ReportDetailScalarWhereWithAggregatesInput | ReportDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReportDetail"> | number
    reportId?: IntWithAggregatesFilter<"ReportDetail"> | number
    itemId?: IntWithAggregatesFilter<"ReportDetail"> | number
    checkState?: StringNullableWithAggregatesFilter<"ReportDetail"> | string | null
  }

  export type ReportSignatureWhereInput = {
    AND?: ReportSignatureWhereInput | ReportSignatureWhereInput[]
    OR?: ReportSignatureWhereInput[]
    NOT?: ReportSignatureWhereInput | ReportSignatureWhereInput[]
    id?: IntFilter<"ReportSignature"> | number
    reportId?: IntFilter<"ReportSignature"> | number
    userId?: IntFilter<"ReportSignature"> | number
    signedAt?: DateTimeFilter<"ReportSignature"> | Date | string
    report?: XOR<DailyReportScalarRelationFilter, DailyReportWhereInput>
    user?: XOR<TbmUserScalarRelationFilter, TbmUserWhereInput>
  }

  export type ReportSignatureOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    signedAt?: SortOrder
    report?: DailyReportOrderByWithRelationInput
    user?: TbmUserOrderByWithRelationInput
  }

  export type ReportSignatureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportSignatureWhereInput | ReportSignatureWhereInput[]
    OR?: ReportSignatureWhereInput[]
    NOT?: ReportSignatureWhereInput | ReportSignatureWhereInput[]
    reportId?: IntFilter<"ReportSignature"> | number
    userId?: IntFilter<"ReportSignature"> | number
    signedAt?: DateTimeFilter<"ReportSignature"> | Date | string
    report?: XOR<DailyReportScalarRelationFilter, DailyReportWhereInput>
    user?: XOR<TbmUserScalarRelationFilter, TbmUserWhereInput>
  }, "id">

  export type ReportSignatureOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    signedAt?: SortOrder
    _count?: ReportSignatureCountOrderByAggregateInput
    _avg?: ReportSignatureAvgOrderByAggregateInput
    _max?: ReportSignatureMaxOrderByAggregateInput
    _min?: ReportSignatureMinOrderByAggregateInput
    _sum?: ReportSignatureSumOrderByAggregateInput
  }

  export type ReportSignatureScalarWhereWithAggregatesInput = {
    AND?: ReportSignatureScalarWhereWithAggregatesInput | ReportSignatureScalarWhereWithAggregatesInput[]
    OR?: ReportSignatureScalarWhereWithAggregatesInput[]
    NOT?: ReportSignatureScalarWhereWithAggregatesInput | ReportSignatureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReportSignature"> | number
    reportId?: IntWithAggregatesFilter<"ReportSignature"> | number
    userId?: IntWithAggregatesFilter<"ReportSignature"> | number
    signedAt?: DateTimeWithAggregatesFilter<"ReportSignature"> | Date | string
  }

  export type CourseCreateInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentCreateNestedManyWithoutCourseInput
    certificates?: CertificateCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentUncheckedCreateNestedManyWithoutCourseInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUncheckedUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserProgressCreateInput = {
    id?: string
    userId: string
    progress?: number
    completed?: boolean
    currentStep?: number
    timeSpent?: number
    lastAccessed?: Date | string
    course: CourseCreateNestedOneWithoutUserProgressInput
  }

  export type UserProgressUncheckedCreateInput = {
    id?: string
    userId: string
    courseId: string
    progress?: number
    completed?: boolean
    currentStep?: number
    timeSpent?: number
    lastAccessed?: Date | string
  }

  export type UserProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    currentStep?: IntFieldUpdateOperationsInput | number
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastAccessed?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutUserProgressNestedInput
  }

  export type UserProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    currentStep?: IntFieldUpdateOperationsInput | number
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastAccessed?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProgressCreateManyInput = {
    id?: string
    userId: string
    courseId: string
    progress?: number
    completed?: boolean
    currentStep?: number
    timeSpent?: number
    lastAccessed?: Date | string
  }

  export type UserProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    currentStep?: IntFieldUpdateOperationsInput | number
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastAccessed?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    currentStep?: IntFieldUpdateOperationsInput | number
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastAccessed?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentCreateInput = {
    id?: string
    question: string
    options: string
    correctAnswer: number
    difficulty?: string
    course: CourseCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentUncheckedCreateInput = {
    id?: string
    courseId: string
    question: string
    options: string
    correctAnswer: number
    difficulty?: string
  }

  export type AssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    correctAnswer?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutAssessmentsNestedInput
  }

  export type AssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    correctAnswer?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
  }

  export type AssessmentCreateManyInput = {
    id?: string
    courseId: string
    question: string
    options: string
    correctAnswer: number
    difficulty?: string
  }

  export type AssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    correctAnswer?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
  }

  export type AssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    correctAnswer?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
  }

  export type UserAssessmentCreateInput = {
    id?: string
    userId: string
    score: number
    totalQuestions: number
    passed: boolean
    attemptNumber?: number
    completedAt?: Date | string
    course: CourseCreateNestedOneWithoutUserAssessmentsInput
  }

  export type UserAssessmentUncheckedCreateInput = {
    id?: string
    userId: string
    courseId: string
    score: number
    totalQuestions: number
    passed: boolean
    attemptNumber?: number
    completedAt?: Date | string
  }

  export type UserAssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    attemptNumber?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutUserAssessmentsNestedInput
  }

  export type UserAssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    attemptNumber?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssessmentCreateManyInput = {
    id?: string
    userId: string
    courseId: string
    score: number
    totalQuestions: number
    passed: boolean
    attemptNumber?: number
    completedAt?: Date | string
  }

  export type UserAssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    attemptNumber?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    attemptNumber?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateCreateInput = {
    id?: string
    userId: string
    certificateUrl: string
    issuedAt?: Date | string
    course: CourseCreateNestedOneWithoutCertificatesInput
  }

  export type CertificateUncheckedCreateInput = {
    id?: string
    userId: string
    courseId: string
    certificateUrl: string
    issuedAt?: Date | string
  }

  export type CertificateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    certificateUrl?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutCertificatesNestedInput
  }

  export type CertificateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    certificateUrl?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateCreateManyInput = {
    id?: string
    userId: string
    courseId: string
    certificateUrl: string
    issuedAt?: Date | string
  }

  export type CertificateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    certificateUrl?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    certificateUrl?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    name?: string | null
    checklistTemplates?: ChecklistTemplateCreateNestedManyWithoutTeamInput
    dailyReports?: DailyReportCreateNestedManyWithoutTeamInput
    users?: TbmUserCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name?: string | null
    checklistTemplates?: ChecklistTemplateUncheckedCreateNestedManyWithoutTeamInput
    dailyReports?: DailyReportUncheckedCreateNestedManyWithoutTeamInput
    users?: TbmUserUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    checklistTemplates?: ChecklistTemplateUpdateManyWithoutTeamNestedInput
    dailyReports?: DailyReportUpdateManyWithoutTeamNestedInput
    users?: TbmUserUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    checklistTemplates?: ChecklistTemplateUncheckedUpdateManyWithoutTeamNestedInput
    dailyReports?: DailyReportUncheckedUpdateManyWithoutTeamNestedInput
    users?: TbmUserUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name?: string | null
  }

  export type TeamUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TbmUserCreateInput = {
    name?: string | null
    team: TeamCreateNestedOneWithoutUsersInput
    reportSignatures?: ReportSignatureCreateNestedManyWithoutUserInput
  }

  export type TbmUserUncheckedCreateInput = {
    id?: number
    name?: string | null
    teamId: number
    reportSignatures?: ReportSignatureUncheckedCreateNestedManyWithoutUserInput
  }

  export type TbmUserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    reportSignatures?: ReportSignatureUpdateManyWithoutUserNestedInput
  }

  export type TbmUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
    reportSignatures?: ReportSignatureUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TbmUserCreateManyInput = {
    id?: number
    name?: string | null
    teamId: number
  }

  export type TbmUserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TbmUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type ChecklistTemplateCreateInput = {
    name?: string | null
    team: TeamCreateNestedOneWithoutChecklistTemplatesInput
    templateItems?: TemplateItemCreateNestedManyWithoutTemplateInput
  }

  export type ChecklistTemplateUncheckedCreateInput = {
    id?: number
    name?: string | null
    teamId: number
    templateItems?: TemplateItemUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type ChecklistTemplateUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutChecklistTemplatesNestedInput
    templateItems?: TemplateItemUpdateManyWithoutTemplateNestedInput
  }

  export type ChecklistTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
    templateItems?: TemplateItemUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type ChecklistTemplateCreateManyInput = {
    id?: number
    name?: string | null
    teamId: number
  }

  export type ChecklistTemplateUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChecklistTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type TemplateItemCreateInput = {
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
    template: ChecklistTemplateCreateNestedOneWithoutTemplateItemsInput
    reportDetails?: ReportDetailCreateNestedManyWithoutItemInput
  }

  export type TemplateItemUncheckedCreateInput = {
    id?: number
    templateId: number
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
    reportDetails?: ReportDetailUncheckedCreateNestedManyWithoutItemInput
  }

  export type TemplateItemUpdateInput = {
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    template?: ChecklistTemplateUpdateOneRequiredWithoutTemplateItemsNestedInput
    reportDetails?: ReportDetailUpdateManyWithoutItemNestedInput
  }

  export type TemplateItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    reportDetails?: ReportDetailUncheckedUpdateManyWithoutItemNestedInput
  }

  export type TemplateItemCreateManyInput = {
    id?: number
    templateId: number
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
  }

  export type TemplateItemUpdateManyMutationInput = {
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type TemplateItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type DailyReportCreateInput = {
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    team: TeamCreateNestedOneWithoutDailyReportsInput
    reportDetails?: ReportDetailCreateNestedManyWithoutReportInput
    reportSignatures?: ReportSignatureCreateNestedManyWithoutReportInput
  }

  export type DailyReportUncheckedCreateInput = {
    id?: number
    teamId: number
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    reportDetails?: ReportDetailUncheckedCreateNestedManyWithoutReportInput
    reportSignatures?: ReportSignatureUncheckedCreateNestedManyWithoutReportInput
  }

  export type DailyReportUpdateInput = {
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutDailyReportsNestedInput
    reportDetails?: ReportDetailUpdateManyWithoutReportNestedInput
    reportSignatures?: ReportSignatureUpdateManyWithoutReportNestedInput
  }

  export type DailyReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    reportDetails?: ReportDetailUncheckedUpdateManyWithoutReportNestedInput
    reportSignatures?: ReportSignatureUncheckedUpdateManyWithoutReportNestedInput
  }

  export type DailyReportCreateManyInput = {
    id?: number
    teamId: number
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
  }

  export type DailyReportUpdateManyMutationInput = {
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DailyReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDetailCreateInput = {
    checkState?: string | null
    report: DailyReportCreateNestedOneWithoutReportDetailsInput
    item: TemplateItemCreateNestedOneWithoutReportDetailsInput
  }

  export type ReportDetailUncheckedCreateInput = {
    id?: number
    reportId: number
    itemId: number
    checkState?: string | null
  }

  export type ReportDetailUpdateInput = {
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
    report?: DailyReportUpdateOneRequiredWithoutReportDetailsNestedInput
    item?: TemplateItemUpdateOneRequiredWithoutReportDetailsNestedInput
  }

  export type ReportDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDetailCreateManyInput = {
    id?: number
    reportId: number
    itemId: number
    checkState?: string | null
  }

  export type ReportDetailUpdateManyMutationInput = {
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportSignatureCreateInput = {
    signedAt?: Date | string
    report: DailyReportCreateNestedOneWithoutReportSignaturesInput
    user: TbmUserCreateNestedOneWithoutReportSignaturesInput
  }

  export type ReportSignatureUncheckedCreateInput = {
    id?: number
    reportId: number
    userId: number
    signedAt?: Date | string
  }

  export type ReportSignatureUpdateInput = {
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: DailyReportUpdateOneRequiredWithoutReportSignaturesNestedInput
    user?: TbmUserUpdateOneRequiredWithoutReportSignaturesNestedInput
  }

  export type ReportSignatureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSignatureCreateManyInput = {
    id?: number
    reportId: number
    userId: number
    signedAt?: Date | string
  }

  export type ReportSignatureUpdateManyMutationInput = {
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSignatureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserProgressListRelationFilter = {
    every?: UserProgressWhereInput
    some?: UserProgressWhereInput
    none?: UserProgressWhereInput
  }

  export type AssessmentListRelationFilter = {
    every?: AssessmentWhereInput
    some?: AssessmentWhereInput
    none?: AssessmentWhereInput
  }

  export type UserAssessmentListRelationFilter = {
    every?: UserAssessmentWhereInput
    some?: UserAssessmentWhereInput
    none?: UserAssessmentWhereInput
  }

  export type CertificateListRelationFilter = {
    every?: CertificateWhereInput
    some?: CertificateWhereInput
    none?: CertificateWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    duration?: SortOrder
    videoUrl?: SortOrder
    documentUrl?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    duration?: SortOrder
    videoUrl?: SortOrder
    documentUrl?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    duration?: SortOrder
    videoUrl?: SortOrder
    documentUrl?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type UserProgressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    progress?: SortOrder
    completed?: SortOrder
    currentStep?: SortOrder
    timeSpent?: SortOrder
    lastAccessed?: SortOrder
  }

  export type UserProgressAvgOrderByAggregateInput = {
    progress?: SortOrder
    currentStep?: SortOrder
    timeSpent?: SortOrder
  }

  export type UserProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    progress?: SortOrder
    completed?: SortOrder
    currentStep?: SortOrder
    timeSpent?: SortOrder
    lastAccessed?: SortOrder
  }

  export type UserProgressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    progress?: SortOrder
    completed?: SortOrder
    currentStep?: SortOrder
    timeSpent?: SortOrder
    lastAccessed?: SortOrder
  }

  export type UserProgressSumOrderByAggregateInput = {
    progress?: SortOrder
    currentStep?: SortOrder
    timeSpent?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    difficulty?: SortOrder
  }

  export type AssessmentAvgOrderByAggregateInput = {
    correctAnswer?: SortOrder
  }

  export type AssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    difficulty?: SortOrder
  }

  export type AssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    difficulty?: SortOrder
  }

  export type AssessmentSumOrderByAggregateInput = {
    correctAnswer?: SortOrder
  }

  export type UserAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    score?: SortOrder
    totalQuestions?: SortOrder
    passed?: SortOrder
    attemptNumber?: SortOrder
    completedAt?: SortOrder
  }

  export type UserAssessmentAvgOrderByAggregateInput = {
    score?: SortOrder
    totalQuestions?: SortOrder
    attemptNumber?: SortOrder
  }

  export type UserAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    score?: SortOrder
    totalQuestions?: SortOrder
    passed?: SortOrder
    attemptNumber?: SortOrder
    completedAt?: SortOrder
  }

  export type UserAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    score?: SortOrder
    totalQuestions?: SortOrder
    passed?: SortOrder
    attemptNumber?: SortOrder
    completedAt?: SortOrder
  }

  export type UserAssessmentSumOrderByAggregateInput = {
    score?: SortOrder
    totalQuestions?: SortOrder
    attemptNumber?: SortOrder
  }

  export type CertificateCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    certificateUrl?: SortOrder
    issuedAt?: SortOrder
  }

  export type CertificateMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    certificateUrl?: SortOrder
    issuedAt?: SortOrder
  }

  export type CertificateMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    courseId?: SortOrder
    certificateUrl?: SortOrder
    issuedAt?: SortOrder
  }

  export type ChecklistTemplateListRelationFilter = {
    every?: ChecklistTemplateWhereInput
    some?: ChecklistTemplateWhereInput
    none?: ChecklistTemplateWhereInput
  }

  export type DailyReportListRelationFilter = {
    every?: DailyReportWhereInput
    some?: DailyReportWhereInput
    none?: DailyReportWhereInput
  }

  export type TbmUserListRelationFilter = {
    every?: TbmUserWhereInput
    some?: TbmUserWhereInput
    none?: TbmUserWhereInput
  }

  export type ChecklistTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TbmUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type ReportSignatureListRelationFilter = {
    every?: ReportSignatureWhereInput
    some?: ReportSignatureWhereInput
    none?: ReportSignatureWhereInput
  }

  export type ReportSignatureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TbmUserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    teamId?: SortOrder
  }

  export type TbmUserAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type TbmUserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    teamId?: SortOrder
  }

  export type TbmUserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    teamId?: SortOrder
  }

  export type TbmUserSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type TemplateItemListRelationFilter = {
    every?: TemplateItemWhereInput
    some?: TemplateItemWhereInput
    none?: TemplateItemWhereInput
  }

  export type TemplateItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChecklistTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    teamId?: SortOrder
  }

  export type ChecklistTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type ChecklistTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    teamId?: SortOrder
  }

  export type ChecklistTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    teamId?: SortOrder
  }

  export type ChecklistTemplateSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type ChecklistTemplateScalarRelationFilter = {
    is?: ChecklistTemplateWhereInput
    isNot?: ChecklistTemplateWhereInput
  }

  export type ReportDetailListRelationFilter = {
    every?: ReportDetailWhereInput
    some?: ReportDetailWhereInput
    none?: ReportDetailWhereInput
  }

  export type ReportDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TemplateItemCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    category?: SortOrder
    subCategory?: SortOrder
    description?: SortOrder
    displayOrder?: SortOrder
  }

  export type TemplateItemAvgOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    displayOrder?: SortOrder
  }

  export type TemplateItemMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    category?: SortOrder
    subCategory?: SortOrder
    description?: SortOrder
    displayOrder?: SortOrder
  }

  export type TemplateItemMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    category?: SortOrder
    subCategory?: SortOrder
    description?: SortOrder
    displayOrder?: SortOrder
  }

  export type TemplateItemSumOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    displayOrder?: SortOrder
  }

  export type DailyReportCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    reportDate?: SortOrder
    managerName?: SortOrder
    remarks?: SortOrder
  }

  export type DailyReportAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type DailyReportMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    reportDate?: SortOrder
    managerName?: SortOrder
    remarks?: SortOrder
  }

  export type DailyReportMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    reportDate?: SortOrder
    managerName?: SortOrder
    remarks?: SortOrder
  }

  export type DailyReportSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type DailyReportScalarRelationFilter = {
    is?: DailyReportWhereInput
    isNot?: DailyReportWhereInput
  }

  export type TemplateItemScalarRelationFilter = {
    is?: TemplateItemWhereInput
    isNot?: TemplateItemWhereInput
  }

  export type ReportDetailCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    itemId?: SortOrder
    checkState?: SortOrder
  }

  export type ReportDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    itemId?: SortOrder
  }

  export type ReportDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    itemId?: SortOrder
    checkState?: SortOrder
  }

  export type ReportDetailMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    itemId?: SortOrder
    checkState?: SortOrder
  }

  export type ReportDetailSumOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    itemId?: SortOrder
  }

  export type TbmUserScalarRelationFilter = {
    is?: TbmUserWhereInput
    isNot?: TbmUserWhereInput
  }

  export type ReportSignatureCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    signedAt?: SortOrder
  }

  export type ReportSignatureAvgOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
  }

  export type ReportSignatureMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    signedAt?: SortOrder
  }

  export type ReportSignatureMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    signedAt?: SortOrder
  }

  export type ReportSignatureSumOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
  }

  export type UserProgressCreateNestedManyWithoutCourseInput = {
    create?: XOR<UserProgressCreateWithoutCourseInput, UserProgressUncheckedCreateWithoutCourseInput> | UserProgressCreateWithoutCourseInput[] | UserProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserProgressCreateOrConnectWithoutCourseInput | UserProgressCreateOrConnectWithoutCourseInput[]
    createMany?: UserProgressCreateManyCourseInputEnvelope
    connect?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
  }

  export type AssessmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type UserAssessmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<UserAssessmentCreateWithoutCourseInput, UserAssessmentUncheckedCreateWithoutCourseInput> | UserAssessmentCreateWithoutCourseInput[] | UserAssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserAssessmentCreateOrConnectWithoutCourseInput | UserAssessmentCreateOrConnectWithoutCourseInput[]
    createMany?: UserAssessmentCreateManyCourseInputEnvelope
    connect?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
  }

  export type CertificateCreateNestedManyWithoutCourseInput = {
    create?: XOR<CertificateCreateWithoutCourseInput, CertificateUncheckedCreateWithoutCourseInput> | CertificateCreateWithoutCourseInput[] | CertificateUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutCourseInput | CertificateCreateOrConnectWithoutCourseInput[]
    createMany?: CertificateCreateManyCourseInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type UserProgressUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<UserProgressCreateWithoutCourseInput, UserProgressUncheckedCreateWithoutCourseInput> | UserProgressCreateWithoutCourseInput[] | UserProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserProgressCreateOrConnectWithoutCourseInput | UserProgressCreateOrConnectWithoutCourseInput[]
    createMany?: UserProgressCreateManyCourseInputEnvelope
    connect?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
  }

  export type AssessmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type UserAssessmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<UserAssessmentCreateWithoutCourseInput, UserAssessmentUncheckedCreateWithoutCourseInput> | UserAssessmentCreateWithoutCourseInput[] | UserAssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserAssessmentCreateOrConnectWithoutCourseInput | UserAssessmentCreateOrConnectWithoutCourseInput[]
    createMany?: UserAssessmentCreateManyCourseInputEnvelope
    connect?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
  }

  export type CertificateUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CertificateCreateWithoutCourseInput, CertificateUncheckedCreateWithoutCourseInput> | CertificateCreateWithoutCourseInput[] | CertificateUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutCourseInput | CertificateCreateOrConnectWithoutCourseInput[]
    createMany?: CertificateCreateManyCourseInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserProgressUpdateManyWithoutCourseNestedInput = {
    create?: XOR<UserProgressCreateWithoutCourseInput, UserProgressUncheckedCreateWithoutCourseInput> | UserProgressCreateWithoutCourseInput[] | UserProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserProgressCreateOrConnectWithoutCourseInput | UserProgressCreateOrConnectWithoutCourseInput[]
    upsert?: UserProgressUpsertWithWhereUniqueWithoutCourseInput | UserProgressUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: UserProgressCreateManyCourseInputEnvelope
    set?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    disconnect?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    delete?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    connect?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    update?: UserProgressUpdateWithWhereUniqueWithoutCourseInput | UserProgressUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: UserProgressUpdateManyWithWhereWithoutCourseInput | UserProgressUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: UserProgressScalarWhereInput | UserProgressScalarWhereInput[]
  }

  export type AssessmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutCourseInput | AssessmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutCourseInput | AssessmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutCourseInput | AssessmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type UserAssessmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<UserAssessmentCreateWithoutCourseInput, UserAssessmentUncheckedCreateWithoutCourseInput> | UserAssessmentCreateWithoutCourseInput[] | UserAssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserAssessmentCreateOrConnectWithoutCourseInput | UserAssessmentCreateOrConnectWithoutCourseInput[]
    upsert?: UserAssessmentUpsertWithWhereUniqueWithoutCourseInput | UserAssessmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: UserAssessmentCreateManyCourseInputEnvelope
    set?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    disconnect?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    delete?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    connect?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    update?: UserAssessmentUpdateWithWhereUniqueWithoutCourseInput | UserAssessmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: UserAssessmentUpdateManyWithWhereWithoutCourseInput | UserAssessmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: UserAssessmentScalarWhereInput | UserAssessmentScalarWhereInput[]
  }

  export type CertificateUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CertificateCreateWithoutCourseInput, CertificateUncheckedCreateWithoutCourseInput> | CertificateCreateWithoutCourseInput[] | CertificateUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutCourseInput | CertificateCreateOrConnectWithoutCourseInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutCourseInput | CertificateUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CertificateCreateManyCourseInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutCourseInput | CertificateUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutCourseInput | CertificateUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type UserProgressUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<UserProgressCreateWithoutCourseInput, UserProgressUncheckedCreateWithoutCourseInput> | UserProgressCreateWithoutCourseInput[] | UserProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserProgressCreateOrConnectWithoutCourseInput | UserProgressCreateOrConnectWithoutCourseInput[]
    upsert?: UserProgressUpsertWithWhereUniqueWithoutCourseInput | UserProgressUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: UserProgressCreateManyCourseInputEnvelope
    set?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    disconnect?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    delete?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    connect?: UserProgressWhereUniqueInput | UserProgressWhereUniqueInput[]
    update?: UserProgressUpdateWithWhereUniqueWithoutCourseInput | UserProgressUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: UserProgressUpdateManyWithWhereWithoutCourseInput | UserProgressUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: UserProgressScalarWhereInput | UserProgressScalarWhereInput[]
  }

  export type AssessmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutCourseInput | AssessmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutCourseInput | AssessmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutCourseInput | AssessmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type UserAssessmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<UserAssessmentCreateWithoutCourseInput, UserAssessmentUncheckedCreateWithoutCourseInput> | UserAssessmentCreateWithoutCourseInput[] | UserAssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: UserAssessmentCreateOrConnectWithoutCourseInput | UserAssessmentCreateOrConnectWithoutCourseInput[]
    upsert?: UserAssessmentUpsertWithWhereUniqueWithoutCourseInput | UserAssessmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: UserAssessmentCreateManyCourseInputEnvelope
    set?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    disconnect?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    delete?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    connect?: UserAssessmentWhereUniqueInput | UserAssessmentWhereUniqueInput[]
    update?: UserAssessmentUpdateWithWhereUniqueWithoutCourseInput | UserAssessmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: UserAssessmentUpdateManyWithWhereWithoutCourseInput | UserAssessmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: UserAssessmentScalarWhereInput | UserAssessmentScalarWhereInput[]
  }

  export type CertificateUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CertificateCreateWithoutCourseInput, CertificateUncheckedCreateWithoutCourseInput> | CertificateCreateWithoutCourseInput[] | CertificateUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutCourseInput | CertificateCreateOrConnectWithoutCourseInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutCourseInput | CertificateUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CertificateCreateManyCourseInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutCourseInput | CertificateUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutCourseInput | CertificateUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutUserProgressInput = {
    create?: XOR<CourseCreateWithoutUserProgressInput, CourseUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: CourseCreateOrConnectWithoutUserProgressInput
    connect?: CourseWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CourseUpdateOneRequiredWithoutUserProgressNestedInput = {
    create?: XOR<CourseCreateWithoutUserProgressInput, CourseUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: CourseCreateOrConnectWithoutUserProgressInput
    upsert?: CourseUpsertWithoutUserProgressInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutUserProgressInput, CourseUpdateWithoutUserProgressInput>, CourseUncheckedUpdateWithoutUserProgressInput>
  }

  export type CourseCreateNestedOneWithoutAssessmentsInput = {
    create?: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssessmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutAssessmentsNestedInput = {
    create?: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssessmentsInput
    upsert?: CourseUpsertWithoutAssessmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutAssessmentsInput, CourseUpdateWithoutAssessmentsInput>, CourseUncheckedUpdateWithoutAssessmentsInput>
  }

  export type CourseCreateNestedOneWithoutUserAssessmentsInput = {
    create?: XOR<CourseCreateWithoutUserAssessmentsInput, CourseUncheckedCreateWithoutUserAssessmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutUserAssessmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutUserAssessmentsNestedInput = {
    create?: XOR<CourseCreateWithoutUserAssessmentsInput, CourseUncheckedCreateWithoutUserAssessmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutUserAssessmentsInput
    upsert?: CourseUpsertWithoutUserAssessmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutUserAssessmentsInput, CourseUpdateWithoutUserAssessmentsInput>, CourseUncheckedUpdateWithoutUserAssessmentsInput>
  }

  export type CourseCreateNestedOneWithoutCertificatesInput = {
    create?: XOR<CourseCreateWithoutCertificatesInput, CourseUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCertificatesInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutCertificatesNestedInput = {
    create?: XOR<CourseCreateWithoutCertificatesInput, CourseUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCertificatesInput
    upsert?: CourseUpsertWithoutCertificatesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCertificatesInput, CourseUpdateWithoutCertificatesInput>, CourseUncheckedUpdateWithoutCertificatesInput>
  }

  export type ChecklistTemplateCreateNestedManyWithoutTeamInput = {
    create?: XOR<ChecklistTemplateCreateWithoutTeamInput, ChecklistTemplateUncheckedCreateWithoutTeamInput> | ChecklistTemplateCreateWithoutTeamInput[] | ChecklistTemplateUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ChecklistTemplateCreateOrConnectWithoutTeamInput | ChecklistTemplateCreateOrConnectWithoutTeamInput[]
    createMany?: ChecklistTemplateCreateManyTeamInputEnvelope
    connect?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
  }

  export type DailyReportCreateNestedManyWithoutTeamInput = {
    create?: XOR<DailyReportCreateWithoutTeamInput, DailyReportUncheckedCreateWithoutTeamInput> | DailyReportCreateWithoutTeamInput[] | DailyReportUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DailyReportCreateOrConnectWithoutTeamInput | DailyReportCreateOrConnectWithoutTeamInput[]
    createMany?: DailyReportCreateManyTeamInputEnvelope
    connect?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
  }

  export type TbmUserCreateNestedManyWithoutTeamInput = {
    create?: XOR<TbmUserCreateWithoutTeamInput, TbmUserUncheckedCreateWithoutTeamInput> | TbmUserCreateWithoutTeamInput[] | TbmUserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TbmUserCreateOrConnectWithoutTeamInput | TbmUserCreateOrConnectWithoutTeamInput[]
    createMany?: TbmUserCreateManyTeamInputEnvelope
    connect?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
  }

  export type ChecklistTemplateUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<ChecklistTemplateCreateWithoutTeamInput, ChecklistTemplateUncheckedCreateWithoutTeamInput> | ChecklistTemplateCreateWithoutTeamInput[] | ChecklistTemplateUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ChecklistTemplateCreateOrConnectWithoutTeamInput | ChecklistTemplateCreateOrConnectWithoutTeamInput[]
    createMany?: ChecklistTemplateCreateManyTeamInputEnvelope
    connect?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
  }

  export type DailyReportUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<DailyReportCreateWithoutTeamInput, DailyReportUncheckedCreateWithoutTeamInput> | DailyReportCreateWithoutTeamInput[] | DailyReportUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DailyReportCreateOrConnectWithoutTeamInput | DailyReportCreateOrConnectWithoutTeamInput[]
    createMany?: DailyReportCreateManyTeamInputEnvelope
    connect?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
  }

  export type TbmUserUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TbmUserCreateWithoutTeamInput, TbmUserUncheckedCreateWithoutTeamInput> | TbmUserCreateWithoutTeamInput[] | TbmUserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TbmUserCreateOrConnectWithoutTeamInput | TbmUserCreateOrConnectWithoutTeamInput[]
    createMany?: TbmUserCreateManyTeamInputEnvelope
    connect?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
  }

  export type ChecklistTemplateUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ChecklistTemplateCreateWithoutTeamInput, ChecklistTemplateUncheckedCreateWithoutTeamInput> | ChecklistTemplateCreateWithoutTeamInput[] | ChecklistTemplateUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ChecklistTemplateCreateOrConnectWithoutTeamInput | ChecklistTemplateCreateOrConnectWithoutTeamInput[]
    upsert?: ChecklistTemplateUpsertWithWhereUniqueWithoutTeamInput | ChecklistTemplateUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ChecklistTemplateCreateManyTeamInputEnvelope
    set?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    disconnect?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    delete?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    connect?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    update?: ChecklistTemplateUpdateWithWhereUniqueWithoutTeamInput | ChecklistTemplateUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ChecklistTemplateUpdateManyWithWhereWithoutTeamInput | ChecklistTemplateUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ChecklistTemplateScalarWhereInput | ChecklistTemplateScalarWhereInput[]
  }

  export type DailyReportUpdateManyWithoutTeamNestedInput = {
    create?: XOR<DailyReportCreateWithoutTeamInput, DailyReportUncheckedCreateWithoutTeamInput> | DailyReportCreateWithoutTeamInput[] | DailyReportUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DailyReportCreateOrConnectWithoutTeamInput | DailyReportCreateOrConnectWithoutTeamInput[]
    upsert?: DailyReportUpsertWithWhereUniqueWithoutTeamInput | DailyReportUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: DailyReportCreateManyTeamInputEnvelope
    set?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    disconnect?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    delete?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    connect?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    update?: DailyReportUpdateWithWhereUniqueWithoutTeamInput | DailyReportUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: DailyReportUpdateManyWithWhereWithoutTeamInput | DailyReportUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: DailyReportScalarWhereInput | DailyReportScalarWhereInput[]
  }

  export type TbmUserUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TbmUserCreateWithoutTeamInput, TbmUserUncheckedCreateWithoutTeamInput> | TbmUserCreateWithoutTeamInput[] | TbmUserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TbmUserCreateOrConnectWithoutTeamInput | TbmUserCreateOrConnectWithoutTeamInput[]
    upsert?: TbmUserUpsertWithWhereUniqueWithoutTeamInput | TbmUserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TbmUserCreateManyTeamInputEnvelope
    set?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    disconnect?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    delete?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    connect?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    update?: TbmUserUpdateWithWhereUniqueWithoutTeamInput | TbmUserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TbmUserUpdateManyWithWhereWithoutTeamInput | TbmUserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TbmUserScalarWhereInput | TbmUserScalarWhereInput[]
  }

  export type ChecklistTemplateUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ChecklistTemplateCreateWithoutTeamInput, ChecklistTemplateUncheckedCreateWithoutTeamInput> | ChecklistTemplateCreateWithoutTeamInput[] | ChecklistTemplateUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ChecklistTemplateCreateOrConnectWithoutTeamInput | ChecklistTemplateCreateOrConnectWithoutTeamInput[]
    upsert?: ChecklistTemplateUpsertWithWhereUniqueWithoutTeamInput | ChecklistTemplateUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ChecklistTemplateCreateManyTeamInputEnvelope
    set?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    disconnect?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    delete?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    connect?: ChecklistTemplateWhereUniqueInput | ChecklistTemplateWhereUniqueInput[]
    update?: ChecklistTemplateUpdateWithWhereUniqueWithoutTeamInput | ChecklistTemplateUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ChecklistTemplateUpdateManyWithWhereWithoutTeamInput | ChecklistTemplateUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ChecklistTemplateScalarWhereInput | ChecklistTemplateScalarWhereInput[]
  }

  export type DailyReportUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<DailyReportCreateWithoutTeamInput, DailyReportUncheckedCreateWithoutTeamInput> | DailyReportCreateWithoutTeamInput[] | DailyReportUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DailyReportCreateOrConnectWithoutTeamInput | DailyReportCreateOrConnectWithoutTeamInput[]
    upsert?: DailyReportUpsertWithWhereUniqueWithoutTeamInput | DailyReportUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: DailyReportCreateManyTeamInputEnvelope
    set?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    disconnect?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    delete?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    connect?: DailyReportWhereUniqueInput | DailyReportWhereUniqueInput[]
    update?: DailyReportUpdateWithWhereUniqueWithoutTeamInput | DailyReportUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: DailyReportUpdateManyWithWhereWithoutTeamInput | DailyReportUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: DailyReportScalarWhereInput | DailyReportScalarWhereInput[]
  }

  export type TbmUserUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TbmUserCreateWithoutTeamInput, TbmUserUncheckedCreateWithoutTeamInput> | TbmUserCreateWithoutTeamInput[] | TbmUserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TbmUserCreateOrConnectWithoutTeamInput | TbmUserCreateOrConnectWithoutTeamInput[]
    upsert?: TbmUserUpsertWithWhereUniqueWithoutTeamInput | TbmUserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TbmUserCreateManyTeamInputEnvelope
    set?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    disconnect?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    delete?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    connect?: TbmUserWhereUniqueInput | TbmUserWhereUniqueInput[]
    update?: TbmUserUpdateWithWhereUniqueWithoutTeamInput | TbmUserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TbmUserUpdateManyWithWhereWithoutTeamInput | TbmUserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TbmUserScalarWhereInput | TbmUserScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutUsersInput = {
    create?: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUsersInput
    connect?: TeamWhereUniqueInput
  }

  export type ReportSignatureCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportSignatureCreateWithoutUserInput, ReportSignatureUncheckedCreateWithoutUserInput> | ReportSignatureCreateWithoutUserInput[] | ReportSignatureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutUserInput | ReportSignatureCreateOrConnectWithoutUserInput[]
    createMany?: ReportSignatureCreateManyUserInputEnvelope
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
  }

  export type ReportSignatureUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportSignatureCreateWithoutUserInput, ReportSignatureUncheckedCreateWithoutUserInput> | ReportSignatureCreateWithoutUserInput[] | ReportSignatureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutUserInput | ReportSignatureCreateOrConnectWithoutUserInput[]
    createMany?: ReportSignatureCreateManyUserInputEnvelope
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
  }

  export type TeamUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUsersInput
    upsert?: TeamUpsertWithoutUsersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutUsersInput, TeamUpdateWithoutUsersInput>, TeamUncheckedUpdateWithoutUsersInput>
  }

  export type ReportSignatureUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportSignatureCreateWithoutUserInput, ReportSignatureUncheckedCreateWithoutUserInput> | ReportSignatureCreateWithoutUserInput[] | ReportSignatureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutUserInput | ReportSignatureCreateOrConnectWithoutUserInput[]
    upsert?: ReportSignatureUpsertWithWhereUniqueWithoutUserInput | ReportSignatureUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportSignatureCreateManyUserInputEnvelope
    set?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    disconnect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    delete?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    update?: ReportSignatureUpdateWithWhereUniqueWithoutUserInput | ReportSignatureUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportSignatureUpdateManyWithWhereWithoutUserInput | ReportSignatureUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportSignatureScalarWhereInput | ReportSignatureScalarWhereInput[]
  }

  export type ReportSignatureUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportSignatureCreateWithoutUserInput, ReportSignatureUncheckedCreateWithoutUserInput> | ReportSignatureCreateWithoutUserInput[] | ReportSignatureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutUserInput | ReportSignatureCreateOrConnectWithoutUserInput[]
    upsert?: ReportSignatureUpsertWithWhereUniqueWithoutUserInput | ReportSignatureUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportSignatureCreateManyUserInputEnvelope
    set?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    disconnect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    delete?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    update?: ReportSignatureUpdateWithWhereUniqueWithoutUserInput | ReportSignatureUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportSignatureUpdateManyWithWhereWithoutUserInput | ReportSignatureUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportSignatureScalarWhereInput | ReportSignatureScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutChecklistTemplatesInput = {
    create?: XOR<TeamCreateWithoutChecklistTemplatesInput, TeamUncheckedCreateWithoutChecklistTemplatesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutChecklistTemplatesInput
    connect?: TeamWhereUniqueInput
  }

  export type TemplateItemCreateNestedManyWithoutTemplateInput = {
    create?: XOR<TemplateItemCreateWithoutTemplateInput, TemplateItemUncheckedCreateWithoutTemplateInput> | TemplateItemCreateWithoutTemplateInput[] | TemplateItemUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateItemCreateOrConnectWithoutTemplateInput | TemplateItemCreateOrConnectWithoutTemplateInput[]
    createMany?: TemplateItemCreateManyTemplateInputEnvelope
    connect?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
  }

  export type TemplateItemUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<TemplateItemCreateWithoutTemplateInput, TemplateItemUncheckedCreateWithoutTemplateInput> | TemplateItemCreateWithoutTemplateInput[] | TemplateItemUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateItemCreateOrConnectWithoutTemplateInput | TemplateItemCreateOrConnectWithoutTemplateInput[]
    createMany?: TemplateItemCreateManyTemplateInputEnvelope
    connect?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
  }

  export type TeamUpdateOneRequiredWithoutChecklistTemplatesNestedInput = {
    create?: XOR<TeamCreateWithoutChecklistTemplatesInput, TeamUncheckedCreateWithoutChecklistTemplatesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutChecklistTemplatesInput
    upsert?: TeamUpsertWithoutChecklistTemplatesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutChecklistTemplatesInput, TeamUpdateWithoutChecklistTemplatesInput>, TeamUncheckedUpdateWithoutChecklistTemplatesInput>
  }

  export type TemplateItemUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<TemplateItemCreateWithoutTemplateInput, TemplateItemUncheckedCreateWithoutTemplateInput> | TemplateItemCreateWithoutTemplateInput[] | TemplateItemUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateItemCreateOrConnectWithoutTemplateInput | TemplateItemCreateOrConnectWithoutTemplateInput[]
    upsert?: TemplateItemUpsertWithWhereUniqueWithoutTemplateInput | TemplateItemUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: TemplateItemCreateManyTemplateInputEnvelope
    set?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    disconnect?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    delete?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    connect?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    update?: TemplateItemUpdateWithWhereUniqueWithoutTemplateInput | TemplateItemUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: TemplateItemUpdateManyWithWhereWithoutTemplateInput | TemplateItemUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: TemplateItemScalarWhereInput | TemplateItemScalarWhereInput[]
  }

  export type TemplateItemUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<TemplateItemCreateWithoutTemplateInput, TemplateItemUncheckedCreateWithoutTemplateInput> | TemplateItemCreateWithoutTemplateInput[] | TemplateItemUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateItemCreateOrConnectWithoutTemplateInput | TemplateItemCreateOrConnectWithoutTemplateInput[]
    upsert?: TemplateItemUpsertWithWhereUniqueWithoutTemplateInput | TemplateItemUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: TemplateItemCreateManyTemplateInputEnvelope
    set?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    disconnect?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    delete?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    connect?: TemplateItemWhereUniqueInput | TemplateItemWhereUniqueInput[]
    update?: TemplateItemUpdateWithWhereUniqueWithoutTemplateInput | TemplateItemUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: TemplateItemUpdateManyWithWhereWithoutTemplateInput | TemplateItemUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: TemplateItemScalarWhereInput | TemplateItemScalarWhereInput[]
  }

  export type ChecklistTemplateCreateNestedOneWithoutTemplateItemsInput = {
    create?: XOR<ChecklistTemplateCreateWithoutTemplateItemsInput, ChecklistTemplateUncheckedCreateWithoutTemplateItemsInput>
    connectOrCreate?: ChecklistTemplateCreateOrConnectWithoutTemplateItemsInput
    connect?: ChecklistTemplateWhereUniqueInput
  }

  export type ReportDetailCreateNestedManyWithoutItemInput = {
    create?: XOR<ReportDetailCreateWithoutItemInput, ReportDetailUncheckedCreateWithoutItemInput> | ReportDetailCreateWithoutItemInput[] | ReportDetailUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutItemInput | ReportDetailCreateOrConnectWithoutItemInput[]
    createMany?: ReportDetailCreateManyItemInputEnvelope
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
  }

  export type ReportDetailUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<ReportDetailCreateWithoutItemInput, ReportDetailUncheckedCreateWithoutItemInput> | ReportDetailCreateWithoutItemInput[] | ReportDetailUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutItemInput | ReportDetailCreateOrConnectWithoutItemInput[]
    createMany?: ReportDetailCreateManyItemInputEnvelope
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
  }

  export type ChecklistTemplateUpdateOneRequiredWithoutTemplateItemsNestedInput = {
    create?: XOR<ChecklistTemplateCreateWithoutTemplateItemsInput, ChecklistTemplateUncheckedCreateWithoutTemplateItemsInput>
    connectOrCreate?: ChecklistTemplateCreateOrConnectWithoutTemplateItemsInput
    upsert?: ChecklistTemplateUpsertWithoutTemplateItemsInput
    connect?: ChecklistTemplateWhereUniqueInput
    update?: XOR<XOR<ChecklistTemplateUpdateToOneWithWhereWithoutTemplateItemsInput, ChecklistTemplateUpdateWithoutTemplateItemsInput>, ChecklistTemplateUncheckedUpdateWithoutTemplateItemsInput>
  }

  export type ReportDetailUpdateManyWithoutItemNestedInput = {
    create?: XOR<ReportDetailCreateWithoutItemInput, ReportDetailUncheckedCreateWithoutItemInput> | ReportDetailCreateWithoutItemInput[] | ReportDetailUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutItemInput | ReportDetailCreateOrConnectWithoutItemInput[]
    upsert?: ReportDetailUpsertWithWhereUniqueWithoutItemInput | ReportDetailUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ReportDetailCreateManyItemInputEnvelope
    set?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    disconnect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    delete?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    update?: ReportDetailUpdateWithWhereUniqueWithoutItemInput | ReportDetailUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ReportDetailUpdateManyWithWhereWithoutItemInput | ReportDetailUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ReportDetailScalarWhereInput | ReportDetailScalarWhereInput[]
  }

  export type ReportDetailUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<ReportDetailCreateWithoutItemInput, ReportDetailUncheckedCreateWithoutItemInput> | ReportDetailCreateWithoutItemInput[] | ReportDetailUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutItemInput | ReportDetailCreateOrConnectWithoutItemInput[]
    upsert?: ReportDetailUpsertWithWhereUniqueWithoutItemInput | ReportDetailUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ReportDetailCreateManyItemInputEnvelope
    set?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    disconnect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    delete?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    update?: ReportDetailUpdateWithWhereUniqueWithoutItemInput | ReportDetailUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ReportDetailUpdateManyWithWhereWithoutItemInput | ReportDetailUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ReportDetailScalarWhereInput | ReportDetailScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutDailyReportsInput = {
    create?: XOR<TeamCreateWithoutDailyReportsInput, TeamUncheckedCreateWithoutDailyReportsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutDailyReportsInput
    connect?: TeamWhereUniqueInput
  }

  export type ReportDetailCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportDetailCreateWithoutReportInput, ReportDetailUncheckedCreateWithoutReportInput> | ReportDetailCreateWithoutReportInput[] | ReportDetailUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutReportInput | ReportDetailCreateOrConnectWithoutReportInput[]
    createMany?: ReportDetailCreateManyReportInputEnvelope
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
  }

  export type ReportSignatureCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportSignatureCreateWithoutReportInput, ReportSignatureUncheckedCreateWithoutReportInput> | ReportSignatureCreateWithoutReportInput[] | ReportSignatureUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutReportInput | ReportSignatureCreateOrConnectWithoutReportInput[]
    createMany?: ReportSignatureCreateManyReportInputEnvelope
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
  }

  export type ReportDetailUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportDetailCreateWithoutReportInput, ReportDetailUncheckedCreateWithoutReportInput> | ReportDetailCreateWithoutReportInput[] | ReportDetailUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutReportInput | ReportDetailCreateOrConnectWithoutReportInput[]
    createMany?: ReportDetailCreateManyReportInputEnvelope
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
  }

  export type ReportSignatureUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportSignatureCreateWithoutReportInput, ReportSignatureUncheckedCreateWithoutReportInput> | ReportSignatureCreateWithoutReportInput[] | ReportSignatureUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutReportInput | ReportSignatureCreateOrConnectWithoutReportInput[]
    createMany?: ReportSignatureCreateManyReportInputEnvelope
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
  }

  export type TeamUpdateOneRequiredWithoutDailyReportsNestedInput = {
    create?: XOR<TeamCreateWithoutDailyReportsInput, TeamUncheckedCreateWithoutDailyReportsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutDailyReportsInput
    upsert?: TeamUpsertWithoutDailyReportsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutDailyReportsInput, TeamUpdateWithoutDailyReportsInput>, TeamUncheckedUpdateWithoutDailyReportsInput>
  }

  export type ReportDetailUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportDetailCreateWithoutReportInput, ReportDetailUncheckedCreateWithoutReportInput> | ReportDetailCreateWithoutReportInput[] | ReportDetailUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutReportInput | ReportDetailCreateOrConnectWithoutReportInput[]
    upsert?: ReportDetailUpsertWithWhereUniqueWithoutReportInput | ReportDetailUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportDetailCreateManyReportInputEnvelope
    set?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    disconnect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    delete?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    update?: ReportDetailUpdateWithWhereUniqueWithoutReportInput | ReportDetailUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportDetailUpdateManyWithWhereWithoutReportInput | ReportDetailUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportDetailScalarWhereInput | ReportDetailScalarWhereInput[]
  }

  export type ReportSignatureUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportSignatureCreateWithoutReportInput, ReportSignatureUncheckedCreateWithoutReportInput> | ReportSignatureCreateWithoutReportInput[] | ReportSignatureUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutReportInput | ReportSignatureCreateOrConnectWithoutReportInput[]
    upsert?: ReportSignatureUpsertWithWhereUniqueWithoutReportInput | ReportSignatureUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportSignatureCreateManyReportInputEnvelope
    set?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    disconnect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    delete?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    update?: ReportSignatureUpdateWithWhereUniqueWithoutReportInput | ReportSignatureUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportSignatureUpdateManyWithWhereWithoutReportInput | ReportSignatureUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportSignatureScalarWhereInput | ReportSignatureScalarWhereInput[]
  }

  export type ReportDetailUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportDetailCreateWithoutReportInput, ReportDetailUncheckedCreateWithoutReportInput> | ReportDetailCreateWithoutReportInput[] | ReportDetailUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDetailCreateOrConnectWithoutReportInput | ReportDetailCreateOrConnectWithoutReportInput[]
    upsert?: ReportDetailUpsertWithWhereUniqueWithoutReportInput | ReportDetailUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportDetailCreateManyReportInputEnvelope
    set?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    disconnect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    delete?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    connect?: ReportDetailWhereUniqueInput | ReportDetailWhereUniqueInput[]
    update?: ReportDetailUpdateWithWhereUniqueWithoutReportInput | ReportDetailUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportDetailUpdateManyWithWhereWithoutReportInput | ReportDetailUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportDetailScalarWhereInput | ReportDetailScalarWhereInput[]
  }

  export type ReportSignatureUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportSignatureCreateWithoutReportInput, ReportSignatureUncheckedCreateWithoutReportInput> | ReportSignatureCreateWithoutReportInput[] | ReportSignatureUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSignatureCreateOrConnectWithoutReportInput | ReportSignatureCreateOrConnectWithoutReportInput[]
    upsert?: ReportSignatureUpsertWithWhereUniqueWithoutReportInput | ReportSignatureUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportSignatureCreateManyReportInputEnvelope
    set?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    disconnect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    delete?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    connect?: ReportSignatureWhereUniqueInput | ReportSignatureWhereUniqueInput[]
    update?: ReportSignatureUpdateWithWhereUniqueWithoutReportInput | ReportSignatureUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportSignatureUpdateManyWithWhereWithoutReportInput | ReportSignatureUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportSignatureScalarWhereInput | ReportSignatureScalarWhereInput[]
  }

  export type DailyReportCreateNestedOneWithoutReportDetailsInput = {
    create?: XOR<DailyReportCreateWithoutReportDetailsInput, DailyReportUncheckedCreateWithoutReportDetailsInput>
    connectOrCreate?: DailyReportCreateOrConnectWithoutReportDetailsInput
    connect?: DailyReportWhereUniqueInput
  }

  export type TemplateItemCreateNestedOneWithoutReportDetailsInput = {
    create?: XOR<TemplateItemCreateWithoutReportDetailsInput, TemplateItemUncheckedCreateWithoutReportDetailsInput>
    connectOrCreate?: TemplateItemCreateOrConnectWithoutReportDetailsInput
    connect?: TemplateItemWhereUniqueInput
  }

  export type DailyReportUpdateOneRequiredWithoutReportDetailsNestedInput = {
    create?: XOR<DailyReportCreateWithoutReportDetailsInput, DailyReportUncheckedCreateWithoutReportDetailsInput>
    connectOrCreate?: DailyReportCreateOrConnectWithoutReportDetailsInput
    upsert?: DailyReportUpsertWithoutReportDetailsInput
    connect?: DailyReportWhereUniqueInput
    update?: XOR<XOR<DailyReportUpdateToOneWithWhereWithoutReportDetailsInput, DailyReportUpdateWithoutReportDetailsInput>, DailyReportUncheckedUpdateWithoutReportDetailsInput>
  }

  export type TemplateItemUpdateOneRequiredWithoutReportDetailsNestedInput = {
    create?: XOR<TemplateItemCreateWithoutReportDetailsInput, TemplateItemUncheckedCreateWithoutReportDetailsInput>
    connectOrCreate?: TemplateItemCreateOrConnectWithoutReportDetailsInput
    upsert?: TemplateItemUpsertWithoutReportDetailsInput
    connect?: TemplateItemWhereUniqueInput
    update?: XOR<XOR<TemplateItemUpdateToOneWithWhereWithoutReportDetailsInput, TemplateItemUpdateWithoutReportDetailsInput>, TemplateItemUncheckedUpdateWithoutReportDetailsInput>
  }

  export type DailyReportCreateNestedOneWithoutReportSignaturesInput = {
    create?: XOR<DailyReportCreateWithoutReportSignaturesInput, DailyReportUncheckedCreateWithoutReportSignaturesInput>
    connectOrCreate?: DailyReportCreateOrConnectWithoutReportSignaturesInput
    connect?: DailyReportWhereUniqueInput
  }

  export type TbmUserCreateNestedOneWithoutReportSignaturesInput = {
    create?: XOR<TbmUserCreateWithoutReportSignaturesInput, TbmUserUncheckedCreateWithoutReportSignaturesInput>
    connectOrCreate?: TbmUserCreateOrConnectWithoutReportSignaturesInput
    connect?: TbmUserWhereUniqueInput
  }

  export type DailyReportUpdateOneRequiredWithoutReportSignaturesNestedInput = {
    create?: XOR<DailyReportCreateWithoutReportSignaturesInput, DailyReportUncheckedCreateWithoutReportSignaturesInput>
    connectOrCreate?: DailyReportCreateOrConnectWithoutReportSignaturesInput
    upsert?: DailyReportUpsertWithoutReportSignaturesInput
    connect?: DailyReportWhereUniqueInput
    update?: XOR<XOR<DailyReportUpdateToOneWithWhereWithoutReportSignaturesInput, DailyReportUpdateWithoutReportSignaturesInput>, DailyReportUncheckedUpdateWithoutReportSignaturesInput>
  }

  export type TbmUserUpdateOneRequiredWithoutReportSignaturesNestedInput = {
    create?: XOR<TbmUserCreateWithoutReportSignaturesInput, TbmUserUncheckedCreateWithoutReportSignaturesInput>
    connectOrCreate?: TbmUserCreateOrConnectWithoutReportSignaturesInput
    upsert?: TbmUserUpsertWithoutReportSignaturesInput
    connect?: TbmUserWhereUniqueInput
    update?: XOR<XOR<TbmUserUpdateToOneWithWhereWithoutReportSignaturesInput, TbmUserUpdateWithoutReportSignaturesInput>, TbmUserUncheckedUpdateWithoutReportSignaturesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserProgressCreateWithoutCourseInput = {
    id?: string
    userId: string
    progress?: number
    completed?: boolean
    currentStep?: number
    timeSpent?: number
    lastAccessed?: Date | string
  }

  export type UserProgressUncheckedCreateWithoutCourseInput = {
    id?: string
    userId: string
    progress?: number
    completed?: boolean
    currentStep?: number
    timeSpent?: number
    lastAccessed?: Date | string
  }

  export type UserProgressCreateOrConnectWithoutCourseInput = {
    where: UserProgressWhereUniqueInput
    create: XOR<UserProgressCreateWithoutCourseInput, UserProgressUncheckedCreateWithoutCourseInput>
  }

  export type UserProgressCreateManyCourseInputEnvelope = {
    data: UserProgressCreateManyCourseInput | UserProgressCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentCreateWithoutCourseInput = {
    id?: string
    question: string
    options: string
    correctAnswer: number
    difficulty?: string
  }

  export type AssessmentUncheckedCreateWithoutCourseInput = {
    id?: string
    question: string
    options: string
    correctAnswer: number
    difficulty?: string
  }

  export type AssessmentCreateOrConnectWithoutCourseInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput>
  }

  export type AssessmentCreateManyCourseInputEnvelope = {
    data: AssessmentCreateManyCourseInput | AssessmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type UserAssessmentCreateWithoutCourseInput = {
    id?: string
    userId: string
    score: number
    totalQuestions: number
    passed: boolean
    attemptNumber?: number
    completedAt?: Date | string
  }

  export type UserAssessmentUncheckedCreateWithoutCourseInput = {
    id?: string
    userId: string
    score: number
    totalQuestions: number
    passed: boolean
    attemptNumber?: number
    completedAt?: Date | string
  }

  export type UserAssessmentCreateOrConnectWithoutCourseInput = {
    where: UserAssessmentWhereUniqueInput
    create: XOR<UserAssessmentCreateWithoutCourseInput, UserAssessmentUncheckedCreateWithoutCourseInput>
  }

  export type UserAssessmentCreateManyCourseInputEnvelope = {
    data: UserAssessmentCreateManyCourseInput | UserAssessmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CertificateCreateWithoutCourseInput = {
    id?: string
    userId: string
    certificateUrl: string
    issuedAt?: Date | string
  }

  export type CertificateUncheckedCreateWithoutCourseInput = {
    id?: string
    userId: string
    certificateUrl: string
    issuedAt?: Date | string
  }

  export type CertificateCreateOrConnectWithoutCourseInput = {
    where: CertificateWhereUniqueInput
    create: XOR<CertificateCreateWithoutCourseInput, CertificateUncheckedCreateWithoutCourseInput>
  }

  export type CertificateCreateManyCourseInputEnvelope = {
    data: CertificateCreateManyCourseInput | CertificateCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type UserProgressUpsertWithWhereUniqueWithoutCourseInput = {
    where: UserProgressWhereUniqueInput
    update: XOR<UserProgressUpdateWithoutCourseInput, UserProgressUncheckedUpdateWithoutCourseInput>
    create: XOR<UserProgressCreateWithoutCourseInput, UserProgressUncheckedCreateWithoutCourseInput>
  }

  export type UserProgressUpdateWithWhereUniqueWithoutCourseInput = {
    where: UserProgressWhereUniqueInput
    data: XOR<UserProgressUpdateWithoutCourseInput, UserProgressUncheckedUpdateWithoutCourseInput>
  }

  export type UserProgressUpdateManyWithWhereWithoutCourseInput = {
    where: UserProgressScalarWhereInput
    data: XOR<UserProgressUpdateManyMutationInput, UserProgressUncheckedUpdateManyWithoutCourseInput>
  }

  export type UserProgressScalarWhereInput = {
    AND?: UserProgressScalarWhereInput | UserProgressScalarWhereInput[]
    OR?: UserProgressScalarWhereInput[]
    NOT?: UserProgressScalarWhereInput | UserProgressScalarWhereInput[]
    id?: StringFilter<"UserProgress"> | string
    userId?: StringFilter<"UserProgress"> | string
    courseId?: StringFilter<"UserProgress"> | string
    progress?: IntFilter<"UserProgress"> | number
    completed?: BoolFilter<"UserProgress"> | boolean
    currentStep?: IntFilter<"UserProgress"> | number
    timeSpent?: IntFilter<"UserProgress"> | number
    lastAccessed?: DateTimeFilter<"UserProgress"> | Date | string
  }

  export type AssessmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: AssessmentWhereUniqueInput
    update: XOR<AssessmentUpdateWithoutCourseInput, AssessmentUncheckedUpdateWithoutCourseInput>
    create: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput>
  }

  export type AssessmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: AssessmentWhereUniqueInput
    data: XOR<AssessmentUpdateWithoutCourseInput, AssessmentUncheckedUpdateWithoutCourseInput>
  }

  export type AssessmentUpdateManyWithWhereWithoutCourseInput = {
    where: AssessmentScalarWhereInput
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type AssessmentScalarWhereInput = {
    AND?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
    OR?: AssessmentScalarWhereInput[]
    NOT?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
    id?: StringFilter<"Assessment"> | string
    courseId?: StringFilter<"Assessment"> | string
    question?: StringFilter<"Assessment"> | string
    options?: StringFilter<"Assessment"> | string
    correctAnswer?: IntFilter<"Assessment"> | number
    difficulty?: StringFilter<"Assessment"> | string
  }

  export type UserAssessmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: UserAssessmentWhereUniqueInput
    update: XOR<UserAssessmentUpdateWithoutCourseInput, UserAssessmentUncheckedUpdateWithoutCourseInput>
    create: XOR<UserAssessmentCreateWithoutCourseInput, UserAssessmentUncheckedCreateWithoutCourseInput>
  }

  export type UserAssessmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: UserAssessmentWhereUniqueInput
    data: XOR<UserAssessmentUpdateWithoutCourseInput, UserAssessmentUncheckedUpdateWithoutCourseInput>
  }

  export type UserAssessmentUpdateManyWithWhereWithoutCourseInput = {
    where: UserAssessmentScalarWhereInput
    data: XOR<UserAssessmentUpdateManyMutationInput, UserAssessmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type UserAssessmentScalarWhereInput = {
    AND?: UserAssessmentScalarWhereInput | UserAssessmentScalarWhereInput[]
    OR?: UserAssessmentScalarWhereInput[]
    NOT?: UserAssessmentScalarWhereInput | UserAssessmentScalarWhereInput[]
    id?: StringFilter<"UserAssessment"> | string
    userId?: StringFilter<"UserAssessment"> | string
    courseId?: StringFilter<"UserAssessment"> | string
    score?: IntFilter<"UserAssessment"> | number
    totalQuestions?: IntFilter<"UserAssessment"> | number
    passed?: BoolFilter<"UserAssessment"> | boolean
    attemptNumber?: IntFilter<"UserAssessment"> | number
    completedAt?: DateTimeFilter<"UserAssessment"> | Date | string
  }

  export type CertificateUpsertWithWhereUniqueWithoutCourseInput = {
    where: CertificateWhereUniqueInput
    update: XOR<CertificateUpdateWithoutCourseInput, CertificateUncheckedUpdateWithoutCourseInput>
    create: XOR<CertificateCreateWithoutCourseInput, CertificateUncheckedCreateWithoutCourseInput>
  }

  export type CertificateUpdateWithWhereUniqueWithoutCourseInput = {
    where: CertificateWhereUniqueInput
    data: XOR<CertificateUpdateWithoutCourseInput, CertificateUncheckedUpdateWithoutCourseInput>
  }

  export type CertificateUpdateManyWithWhereWithoutCourseInput = {
    where: CertificateScalarWhereInput
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyWithoutCourseInput>
  }

  export type CertificateScalarWhereInput = {
    AND?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    OR?: CertificateScalarWhereInput[]
    NOT?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    id?: StringFilter<"Certificate"> | string
    userId?: StringFilter<"Certificate"> | string
    courseId?: StringFilter<"Certificate"> | string
    certificateUrl?: StringFilter<"Certificate"> | string
    issuedAt?: DateTimeFilter<"Certificate"> | Date | string
  }

  export type CourseCreateWithoutUserProgressInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentCreateNestedManyWithoutCourseInput
    certificates?: CertificateCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutUserProgressInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentUncheckedCreateNestedManyWithoutCourseInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutUserProgressInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutUserProgressInput, CourseUncheckedCreateWithoutUserProgressInput>
  }

  export type CourseUpsertWithoutUserProgressInput = {
    update: XOR<CourseUpdateWithoutUserProgressInput, CourseUncheckedUpdateWithoutUserProgressInput>
    create: XOR<CourseCreateWithoutUserProgressInput, CourseUncheckedCreateWithoutUserProgressInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutUserProgressInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutUserProgressInput, CourseUncheckedUpdateWithoutUserProgressInput>
  }

  export type CourseUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUncheckedUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateWithoutAssessmentsInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentCreateNestedManyWithoutCourseInput
    certificates?: CertificateCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutAssessmentsInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressUncheckedCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentUncheckedCreateNestedManyWithoutCourseInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutAssessmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
  }

  export type CourseUpsertWithoutAssessmentsInput = {
    update: XOR<CourseUpdateWithoutAssessmentsInput, CourseUncheckedUpdateWithoutAssessmentsInput>
    create: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutAssessmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutAssessmentsInput, CourseUncheckedUpdateWithoutAssessmentsInput>
  }

  export type CourseUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUncheckedUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUncheckedUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateWithoutUserAssessmentsInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    certificates?: CertificateCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutUserAssessmentsInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutUserAssessmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutUserAssessmentsInput, CourseUncheckedCreateWithoutUserAssessmentsInput>
  }

  export type CourseUpsertWithoutUserAssessmentsInput = {
    update: XOR<CourseUpdateWithoutUserAssessmentsInput, CourseUncheckedUpdateWithoutUserAssessmentsInput>
    create: XOR<CourseCreateWithoutUserAssessmentsInput, CourseUncheckedCreateWithoutUserAssessmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutUserAssessmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutUserAssessmentsInput, CourseUncheckedUpdateWithoutUserAssessmentsInput>
  }

  export type CourseUpdateWithoutUserAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutUserAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateWithoutCertificatesInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCertificatesInput = {
    id?: string
    title: string
    description: string
    type: string
    duration: number
    videoUrl?: string | null
    documentUrl?: string | null
    color?: string
    icon: string
    isActive?: boolean
    userProgress?: UserProgressUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    userAssessments?: UserAssessmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCertificatesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCertificatesInput, CourseUncheckedCreateWithoutCertificatesInput>
  }

  export type CourseUpsertWithoutCertificatesInput = {
    update: XOR<CourseUpdateWithoutCertificatesInput, CourseUncheckedUpdateWithoutCertificatesInput>
    create: XOR<CourseCreateWithoutCertificatesInput, CourseUncheckedCreateWithoutCertificatesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCertificatesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCertificatesInput, CourseUncheckedUpdateWithoutCertificatesInput>
  }

  export type CourseUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userProgress?: UserProgressUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    userAssessments?: UserAssessmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type ChecklistTemplateCreateWithoutTeamInput = {
    name?: string | null
    templateItems?: TemplateItemCreateNestedManyWithoutTemplateInput
  }

  export type ChecklistTemplateUncheckedCreateWithoutTeamInput = {
    id?: number
    name?: string | null
    templateItems?: TemplateItemUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type ChecklistTemplateCreateOrConnectWithoutTeamInput = {
    where: ChecklistTemplateWhereUniqueInput
    create: XOR<ChecklistTemplateCreateWithoutTeamInput, ChecklistTemplateUncheckedCreateWithoutTeamInput>
  }

  export type ChecklistTemplateCreateManyTeamInputEnvelope = {
    data: ChecklistTemplateCreateManyTeamInput | ChecklistTemplateCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type DailyReportCreateWithoutTeamInput = {
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    reportDetails?: ReportDetailCreateNestedManyWithoutReportInput
    reportSignatures?: ReportSignatureCreateNestedManyWithoutReportInput
  }

  export type DailyReportUncheckedCreateWithoutTeamInput = {
    id?: number
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    reportDetails?: ReportDetailUncheckedCreateNestedManyWithoutReportInput
    reportSignatures?: ReportSignatureUncheckedCreateNestedManyWithoutReportInput
  }

  export type DailyReportCreateOrConnectWithoutTeamInput = {
    where: DailyReportWhereUniqueInput
    create: XOR<DailyReportCreateWithoutTeamInput, DailyReportUncheckedCreateWithoutTeamInput>
  }

  export type DailyReportCreateManyTeamInputEnvelope = {
    data: DailyReportCreateManyTeamInput | DailyReportCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TbmUserCreateWithoutTeamInput = {
    name?: string | null
    reportSignatures?: ReportSignatureCreateNestedManyWithoutUserInput
  }

  export type TbmUserUncheckedCreateWithoutTeamInput = {
    id?: number
    name?: string | null
    reportSignatures?: ReportSignatureUncheckedCreateNestedManyWithoutUserInput
  }

  export type TbmUserCreateOrConnectWithoutTeamInput = {
    where: TbmUserWhereUniqueInput
    create: XOR<TbmUserCreateWithoutTeamInput, TbmUserUncheckedCreateWithoutTeamInput>
  }

  export type TbmUserCreateManyTeamInputEnvelope = {
    data: TbmUserCreateManyTeamInput | TbmUserCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type ChecklistTemplateUpsertWithWhereUniqueWithoutTeamInput = {
    where: ChecklistTemplateWhereUniqueInput
    update: XOR<ChecklistTemplateUpdateWithoutTeamInput, ChecklistTemplateUncheckedUpdateWithoutTeamInput>
    create: XOR<ChecklistTemplateCreateWithoutTeamInput, ChecklistTemplateUncheckedCreateWithoutTeamInput>
  }

  export type ChecklistTemplateUpdateWithWhereUniqueWithoutTeamInput = {
    where: ChecklistTemplateWhereUniqueInput
    data: XOR<ChecklistTemplateUpdateWithoutTeamInput, ChecklistTemplateUncheckedUpdateWithoutTeamInput>
  }

  export type ChecklistTemplateUpdateManyWithWhereWithoutTeamInput = {
    where: ChecklistTemplateScalarWhereInput
    data: XOR<ChecklistTemplateUpdateManyMutationInput, ChecklistTemplateUncheckedUpdateManyWithoutTeamInput>
  }

  export type ChecklistTemplateScalarWhereInput = {
    AND?: ChecklistTemplateScalarWhereInput | ChecklistTemplateScalarWhereInput[]
    OR?: ChecklistTemplateScalarWhereInput[]
    NOT?: ChecklistTemplateScalarWhereInput | ChecklistTemplateScalarWhereInput[]
    id?: IntFilter<"ChecklistTemplate"> | number
    name?: StringNullableFilter<"ChecklistTemplate"> | string | null
    teamId?: IntFilter<"ChecklistTemplate"> | number
  }

  export type DailyReportUpsertWithWhereUniqueWithoutTeamInput = {
    where: DailyReportWhereUniqueInput
    update: XOR<DailyReportUpdateWithoutTeamInput, DailyReportUncheckedUpdateWithoutTeamInput>
    create: XOR<DailyReportCreateWithoutTeamInput, DailyReportUncheckedCreateWithoutTeamInput>
  }

  export type DailyReportUpdateWithWhereUniqueWithoutTeamInput = {
    where: DailyReportWhereUniqueInput
    data: XOR<DailyReportUpdateWithoutTeamInput, DailyReportUncheckedUpdateWithoutTeamInput>
  }

  export type DailyReportUpdateManyWithWhereWithoutTeamInput = {
    where: DailyReportScalarWhereInput
    data: XOR<DailyReportUpdateManyMutationInput, DailyReportUncheckedUpdateManyWithoutTeamInput>
  }

  export type DailyReportScalarWhereInput = {
    AND?: DailyReportScalarWhereInput | DailyReportScalarWhereInput[]
    OR?: DailyReportScalarWhereInput[]
    NOT?: DailyReportScalarWhereInput | DailyReportScalarWhereInput[]
    id?: IntFilter<"DailyReport"> | number
    teamId?: IntFilter<"DailyReport"> | number
    reportDate?: DateTimeFilter<"DailyReport"> | Date | string
    managerName?: StringNullableFilter<"DailyReport"> | string | null
    remarks?: StringNullableFilter<"DailyReport"> | string | null
  }

  export type TbmUserUpsertWithWhereUniqueWithoutTeamInput = {
    where: TbmUserWhereUniqueInput
    update: XOR<TbmUserUpdateWithoutTeamInput, TbmUserUncheckedUpdateWithoutTeamInput>
    create: XOR<TbmUserCreateWithoutTeamInput, TbmUserUncheckedCreateWithoutTeamInput>
  }

  export type TbmUserUpdateWithWhereUniqueWithoutTeamInput = {
    where: TbmUserWhereUniqueInput
    data: XOR<TbmUserUpdateWithoutTeamInput, TbmUserUncheckedUpdateWithoutTeamInput>
  }

  export type TbmUserUpdateManyWithWhereWithoutTeamInput = {
    where: TbmUserScalarWhereInput
    data: XOR<TbmUserUpdateManyMutationInput, TbmUserUncheckedUpdateManyWithoutTeamInput>
  }

  export type TbmUserScalarWhereInput = {
    AND?: TbmUserScalarWhereInput | TbmUserScalarWhereInput[]
    OR?: TbmUserScalarWhereInput[]
    NOT?: TbmUserScalarWhereInput | TbmUserScalarWhereInput[]
    id?: IntFilter<"TbmUser"> | number
    name?: StringNullableFilter<"TbmUser"> | string | null
    teamId?: IntFilter<"TbmUser"> | number
  }

  export type TeamCreateWithoutUsersInput = {
    name?: string | null
    checklistTemplates?: ChecklistTemplateCreateNestedManyWithoutTeamInput
    dailyReports?: DailyReportCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutUsersInput = {
    id?: number
    name?: string | null
    checklistTemplates?: ChecklistTemplateUncheckedCreateNestedManyWithoutTeamInput
    dailyReports?: DailyReportUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutUsersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
  }

  export type ReportSignatureCreateWithoutUserInput = {
    signedAt?: Date | string
    report: DailyReportCreateNestedOneWithoutReportSignaturesInput
  }

  export type ReportSignatureUncheckedCreateWithoutUserInput = {
    id?: number
    reportId: number
    signedAt?: Date | string
  }

  export type ReportSignatureCreateOrConnectWithoutUserInput = {
    where: ReportSignatureWhereUniqueInput
    create: XOR<ReportSignatureCreateWithoutUserInput, ReportSignatureUncheckedCreateWithoutUserInput>
  }

  export type ReportSignatureCreateManyUserInputEnvelope = {
    data: ReportSignatureCreateManyUserInput | ReportSignatureCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutUsersInput = {
    update: XOR<TeamUpdateWithoutUsersInput, TeamUncheckedUpdateWithoutUsersInput>
    create: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutUsersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutUsersInput, TeamUncheckedUpdateWithoutUsersInput>
  }

  export type TeamUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    checklistTemplates?: ChecklistTemplateUpdateManyWithoutTeamNestedInput
    dailyReports?: DailyReportUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    checklistTemplates?: ChecklistTemplateUncheckedUpdateManyWithoutTeamNestedInput
    dailyReports?: DailyReportUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type ReportSignatureUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportSignatureWhereUniqueInput
    update: XOR<ReportSignatureUpdateWithoutUserInput, ReportSignatureUncheckedUpdateWithoutUserInput>
    create: XOR<ReportSignatureCreateWithoutUserInput, ReportSignatureUncheckedCreateWithoutUserInput>
  }

  export type ReportSignatureUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportSignatureWhereUniqueInput
    data: XOR<ReportSignatureUpdateWithoutUserInput, ReportSignatureUncheckedUpdateWithoutUserInput>
  }

  export type ReportSignatureUpdateManyWithWhereWithoutUserInput = {
    where: ReportSignatureScalarWhereInput
    data: XOR<ReportSignatureUpdateManyMutationInput, ReportSignatureUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportSignatureScalarWhereInput = {
    AND?: ReportSignatureScalarWhereInput | ReportSignatureScalarWhereInput[]
    OR?: ReportSignatureScalarWhereInput[]
    NOT?: ReportSignatureScalarWhereInput | ReportSignatureScalarWhereInput[]
    id?: IntFilter<"ReportSignature"> | number
    reportId?: IntFilter<"ReportSignature"> | number
    userId?: IntFilter<"ReportSignature"> | number
    signedAt?: DateTimeFilter<"ReportSignature"> | Date | string
  }

  export type TeamCreateWithoutChecklistTemplatesInput = {
    name?: string | null
    dailyReports?: DailyReportCreateNestedManyWithoutTeamInput
    users?: TbmUserCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutChecklistTemplatesInput = {
    id?: number
    name?: string | null
    dailyReports?: DailyReportUncheckedCreateNestedManyWithoutTeamInput
    users?: TbmUserUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutChecklistTemplatesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutChecklistTemplatesInput, TeamUncheckedCreateWithoutChecklistTemplatesInput>
  }

  export type TemplateItemCreateWithoutTemplateInput = {
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
    reportDetails?: ReportDetailCreateNestedManyWithoutItemInput
  }

  export type TemplateItemUncheckedCreateWithoutTemplateInput = {
    id?: number
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
    reportDetails?: ReportDetailUncheckedCreateNestedManyWithoutItemInput
  }

  export type TemplateItemCreateOrConnectWithoutTemplateInput = {
    where: TemplateItemWhereUniqueInput
    create: XOR<TemplateItemCreateWithoutTemplateInput, TemplateItemUncheckedCreateWithoutTemplateInput>
  }

  export type TemplateItemCreateManyTemplateInputEnvelope = {
    data: TemplateItemCreateManyTemplateInput | TemplateItemCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutChecklistTemplatesInput = {
    update: XOR<TeamUpdateWithoutChecklistTemplatesInput, TeamUncheckedUpdateWithoutChecklistTemplatesInput>
    create: XOR<TeamCreateWithoutChecklistTemplatesInput, TeamUncheckedCreateWithoutChecklistTemplatesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutChecklistTemplatesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutChecklistTemplatesInput, TeamUncheckedUpdateWithoutChecklistTemplatesInput>
  }

  export type TeamUpdateWithoutChecklistTemplatesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dailyReports?: DailyReportUpdateManyWithoutTeamNestedInput
    users?: TbmUserUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutChecklistTemplatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dailyReports?: DailyReportUncheckedUpdateManyWithoutTeamNestedInput
    users?: TbmUserUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TemplateItemUpsertWithWhereUniqueWithoutTemplateInput = {
    where: TemplateItemWhereUniqueInput
    update: XOR<TemplateItemUpdateWithoutTemplateInput, TemplateItemUncheckedUpdateWithoutTemplateInput>
    create: XOR<TemplateItemCreateWithoutTemplateInput, TemplateItemUncheckedCreateWithoutTemplateInput>
  }

  export type TemplateItemUpdateWithWhereUniqueWithoutTemplateInput = {
    where: TemplateItemWhereUniqueInput
    data: XOR<TemplateItemUpdateWithoutTemplateInput, TemplateItemUncheckedUpdateWithoutTemplateInput>
  }

  export type TemplateItemUpdateManyWithWhereWithoutTemplateInput = {
    where: TemplateItemScalarWhereInput
    data: XOR<TemplateItemUpdateManyMutationInput, TemplateItemUncheckedUpdateManyWithoutTemplateInput>
  }

  export type TemplateItemScalarWhereInput = {
    AND?: TemplateItemScalarWhereInput | TemplateItemScalarWhereInput[]
    OR?: TemplateItemScalarWhereInput[]
    NOT?: TemplateItemScalarWhereInput | TemplateItemScalarWhereInput[]
    id?: IntFilter<"TemplateItem"> | number
    templateId?: IntFilter<"TemplateItem"> | number
    category?: StringNullableFilter<"TemplateItem"> | string | null
    subCategory?: StringNullableFilter<"TemplateItem"> | string | null
    description?: StringNullableFilter<"TemplateItem"> | string | null
    displayOrder?: IntFilter<"TemplateItem"> | number
  }

  export type ChecklistTemplateCreateWithoutTemplateItemsInput = {
    name?: string | null
    team: TeamCreateNestedOneWithoutChecklistTemplatesInput
  }

  export type ChecklistTemplateUncheckedCreateWithoutTemplateItemsInput = {
    id?: number
    name?: string | null
    teamId: number
  }

  export type ChecklistTemplateCreateOrConnectWithoutTemplateItemsInput = {
    where: ChecklistTemplateWhereUniqueInput
    create: XOR<ChecklistTemplateCreateWithoutTemplateItemsInput, ChecklistTemplateUncheckedCreateWithoutTemplateItemsInput>
  }

  export type ReportDetailCreateWithoutItemInput = {
    checkState?: string | null
    report: DailyReportCreateNestedOneWithoutReportDetailsInput
  }

  export type ReportDetailUncheckedCreateWithoutItemInput = {
    id?: number
    reportId: number
    checkState?: string | null
  }

  export type ReportDetailCreateOrConnectWithoutItemInput = {
    where: ReportDetailWhereUniqueInput
    create: XOR<ReportDetailCreateWithoutItemInput, ReportDetailUncheckedCreateWithoutItemInput>
  }

  export type ReportDetailCreateManyItemInputEnvelope = {
    data: ReportDetailCreateManyItemInput | ReportDetailCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type ChecklistTemplateUpsertWithoutTemplateItemsInput = {
    update: XOR<ChecklistTemplateUpdateWithoutTemplateItemsInput, ChecklistTemplateUncheckedUpdateWithoutTemplateItemsInput>
    create: XOR<ChecklistTemplateCreateWithoutTemplateItemsInput, ChecklistTemplateUncheckedCreateWithoutTemplateItemsInput>
    where?: ChecklistTemplateWhereInput
  }

  export type ChecklistTemplateUpdateToOneWithWhereWithoutTemplateItemsInput = {
    where?: ChecklistTemplateWhereInput
    data: XOR<ChecklistTemplateUpdateWithoutTemplateItemsInput, ChecklistTemplateUncheckedUpdateWithoutTemplateItemsInput>
  }

  export type ChecklistTemplateUpdateWithoutTemplateItemsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutChecklistTemplatesNestedInput
  }

  export type ChecklistTemplateUncheckedUpdateWithoutTemplateItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportDetailUpsertWithWhereUniqueWithoutItemInput = {
    where: ReportDetailWhereUniqueInput
    update: XOR<ReportDetailUpdateWithoutItemInput, ReportDetailUncheckedUpdateWithoutItemInput>
    create: XOR<ReportDetailCreateWithoutItemInput, ReportDetailUncheckedCreateWithoutItemInput>
  }

  export type ReportDetailUpdateWithWhereUniqueWithoutItemInput = {
    where: ReportDetailWhereUniqueInput
    data: XOR<ReportDetailUpdateWithoutItemInput, ReportDetailUncheckedUpdateWithoutItemInput>
  }

  export type ReportDetailUpdateManyWithWhereWithoutItemInput = {
    where: ReportDetailScalarWhereInput
    data: XOR<ReportDetailUpdateManyMutationInput, ReportDetailUncheckedUpdateManyWithoutItemInput>
  }

  export type ReportDetailScalarWhereInput = {
    AND?: ReportDetailScalarWhereInput | ReportDetailScalarWhereInput[]
    OR?: ReportDetailScalarWhereInput[]
    NOT?: ReportDetailScalarWhereInput | ReportDetailScalarWhereInput[]
    id?: IntFilter<"ReportDetail"> | number
    reportId?: IntFilter<"ReportDetail"> | number
    itemId?: IntFilter<"ReportDetail"> | number
    checkState?: StringNullableFilter<"ReportDetail"> | string | null
  }

  export type TeamCreateWithoutDailyReportsInput = {
    name?: string | null
    checklistTemplates?: ChecklistTemplateCreateNestedManyWithoutTeamInput
    users?: TbmUserCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutDailyReportsInput = {
    id?: number
    name?: string | null
    checklistTemplates?: ChecklistTemplateUncheckedCreateNestedManyWithoutTeamInput
    users?: TbmUserUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutDailyReportsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutDailyReportsInput, TeamUncheckedCreateWithoutDailyReportsInput>
  }

  export type ReportDetailCreateWithoutReportInput = {
    checkState?: string | null
    item: TemplateItemCreateNestedOneWithoutReportDetailsInput
  }

  export type ReportDetailUncheckedCreateWithoutReportInput = {
    id?: number
    itemId: number
    checkState?: string | null
  }

  export type ReportDetailCreateOrConnectWithoutReportInput = {
    where: ReportDetailWhereUniqueInput
    create: XOR<ReportDetailCreateWithoutReportInput, ReportDetailUncheckedCreateWithoutReportInput>
  }

  export type ReportDetailCreateManyReportInputEnvelope = {
    data: ReportDetailCreateManyReportInput | ReportDetailCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type ReportSignatureCreateWithoutReportInput = {
    signedAt?: Date | string
    user: TbmUserCreateNestedOneWithoutReportSignaturesInput
  }

  export type ReportSignatureUncheckedCreateWithoutReportInput = {
    id?: number
    userId: number
    signedAt?: Date | string
  }

  export type ReportSignatureCreateOrConnectWithoutReportInput = {
    where: ReportSignatureWhereUniqueInput
    create: XOR<ReportSignatureCreateWithoutReportInput, ReportSignatureUncheckedCreateWithoutReportInput>
  }

  export type ReportSignatureCreateManyReportInputEnvelope = {
    data: ReportSignatureCreateManyReportInput | ReportSignatureCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutDailyReportsInput = {
    update: XOR<TeamUpdateWithoutDailyReportsInput, TeamUncheckedUpdateWithoutDailyReportsInput>
    create: XOR<TeamCreateWithoutDailyReportsInput, TeamUncheckedCreateWithoutDailyReportsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutDailyReportsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutDailyReportsInput, TeamUncheckedUpdateWithoutDailyReportsInput>
  }

  export type TeamUpdateWithoutDailyReportsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    checklistTemplates?: ChecklistTemplateUpdateManyWithoutTeamNestedInput
    users?: TbmUserUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutDailyReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    checklistTemplates?: ChecklistTemplateUncheckedUpdateManyWithoutTeamNestedInput
    users?: TbmUserUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type ReportDetailUpsertWithWhereUniqueWithoutReportInput = {
    where: ReportDetailWhereUniqueInput
    update: XOR<ReportDetailUpdateWithoutReportInput, ReportDetailUncheckedUpdateWithoutReportInput>
    create: XOR<ReportDetailCreateWithoutReportInput, ReportDetailUncheckedCreateWithoutReportInput>
  }

  export type ReportDetailUpdateWithWhereUniqueWithoutReportInput = {
    where: ReportDetailWhereUniqueInput
    data: XOR<ReportDetailUpdateWithoutReportInput, ReportDetailUncheckedUpdateWithoutReportInput>
  }

  export type ReportDetailUpdateManyWithWhereWithoutReportInput = {
    where: ReportDetailScalarWhereInput
    data: XOR<ReportDetailUpdateManyMutationInput, ReportDetailUncheckedUpdateManyWithoutReportInput>
  }

  export type ReportSignatureUpsertWithWhereUniqueWithoutReportInput = {
    where: ReportSignatureWhereUniqueInput
    update: XOR<ReportSignatureUpdateWithoutReportInput, ReportSignatureUncheckedUpdateWithoutReportInput>
    create: XOR<ReportSignatureCreateWithoutReportInput, ReportSignatureUncheckedCreateWithoutReportInput>
  }

  export type ReportSignatureUpdateWithWhereUniqueWithoutReportInput = {
    where: ReportSignatureWhereUniqueInput
    data: XOR<ReportSignatureUpdateWithoutReportInput, ReportSignatureUncheckedUpdateWithoutReportInput>
  }

  export type ReportSignatureUpdateManyWithWhereWithoutReportInput = {
    where: ReportSignatureScalarWhereInput
    data: XOR<ReportSignatureUpdateManyMutationInput, ReportSignatureUncheckedUpdateManyWithoutReportInput>
  }

  export type DailyReportCreateWithoutReportDetailsInput = {
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    team: TeamCreateNestedOneWithoutDailyReportsInput
    reportSignatures?: ReportSignatureCreateNestedManyWithoutReportInput
  }

  export type DailyReportUncheckedCreateWithoutReportDetailsInput = {
    id?: number
    teamId: number
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    reportSignatures?: ReportSignatureUncheckedCreateNestedManyWithoutReportInput
  }

  export type DailyReportCreateOrConnectWithoutReportDetailsInput = {
    where: DailyReportWhereUniqueInput
    create: XOR<DailyReportCreateWithoutReportDetailsInput, DailyReportUncheckedCreateWithoutReportDetailsInput>
  }

  export type TemplateItemCreateWithoutReportDetailsInput = {
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
    template: ChecklistTemplateCreateNestedOneWithoutTemplateItemsInput
  }

  export type TemplateItemUncheckedCreateWithoutReportDetailsInput = {
    id?: number
    templateId: number
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
  }

  export type TemplateItemCreateOrConnectWithoutReportDetailsInput = {
    where: TemplateItemWhereUniqueInput
    create: XOR<TemplateItemCreateWithoutReportDetailsInput, TemplateItemUncheckedCreateWithoutReportDetailsInput>
  }

  export type DailyReportUpsertWithoutReportDetailsInput = {
    update: XOR<DailyReportUpdateWithoutReportDetailsInput, DailyReportUncheckedUpdateWithoutReportDetailsInput>
    create: XOR<DailyReportCreateWithoutReportDetailsInput, DailyReportUncheckedCreateWithoutReportDetailsInput>
    where?: DailyReportWhereInput
  }

  export type DailyReportUpdateToOneWithWhereWithoutReportDetailsInput = {
    where?: DailyReportWhereInput
    data: XOR<DailyReportUpdateWithoutReportDetailsInput, DailyReportUncheckedUpdateWithoutReportDetailsInput>
  }

  export type DailyReportUpdateWithoutReportDetailsInput = {
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutDailyReportsNestedInput
    reportSignatures?: ReportSignatureUpdateManyWithoutReportNestedInput
  }

  export type DailyReportUncheckedUpdateWithoutReportDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    reportSignatures?: ReportSignatureUncheckedUpdateManyWithoutReportNestedInput
  }

  export type TemplateItemUpsertWithoutReportDetailsInput = {
    update: XOR<TemplateItemUpdateWithoutReportDetailsInput, TemplateItemUncheckedUpdateWithoutReportDetailsInput>
    create: XOR<TemplateItemCreateWithoutReportDetailsInput, TemplateItemUncheckedCreateWithoutReportDetailsInput>
    where?: TemplateItemWhereInput
  }

  export type TemplateItemUpdateToOneWithWhereWithoutReportDetailsInput = {
    where?: TemplateItemWhereInput
    data: XOR<TemplateItemUpdateWithoutReportDetailsInput, TemplateItemUncheckedUpdateWithoutReportDetailsInput>
  }

  export type TemplateItemUpdateWithoutReportDetailsInput = {
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    template?: ChecklistTemplateUpdateOneRequiredWithoutTemplateItemsNestedInput
  }

  export type TemplateItemUncheckedUpdateWithoutReportDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type DailyReportCreateWithoutReportSignaturesInput = {
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    team: TeamCreateNestedOneWithoutDailyReportsInput
    reportDetails?: ReportDetailCreateNestedManyWithoutReportInput
  }

  export type DailyReportUncheckedCreateWithoutReportSignaturesInput = {
    id?: number
    teamId: number
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
    reportDetails?: ReportDetailUncheckedCreateNestedManyWithoutReportInput
  }

  export type DailyReportCreateOrConnectWithoutReportSignaturesInput = {
    where: DailyReportWhereUniqueInput
    create: XOR<DailyReportCreateWithoutReportSignaturesInput, DailyReportUncheckedCreateWithoutReportSignaturesInput>
  }

  export type TbmUserCreateWithoutReportSignaturesInput = {
    name?: string | null
    team: TeamCreateNestedOneWithoutUsersInput
  }

  export type TbmUserUncheckedCreateWithoutReportSignaturesInput = {
    id?: number
    name?: string | null
    teamId: number
  }

  export type TbmUserCreateOrConnectWithoutReportSignaturesInput = {
    where: TbmUserWhereUniqueInput
    create: XOR<TbmUserCreateWithoutReportSignaturesInput, TbmUserUncheckedCreateWithoutReportSignaturesInput>
  }

  export type DailyReportUpsertWithoutReportSignaturesInput = {
    update: XOR<DailyReportUpdateWithoutReportSignaturesInput, DailyReportUncheckedUpdateWithoutReportSignaturesInput>
    create: XOR<DailyReportCreateWithoutReportSignaturesInput, DailyReportUncheckedCreateWithoutReportSignaturesInput>
    where?: DailyReportWhereInput
  }

  export type DailyReportUpdateToOneWithWhereWithoutReportSignaturesInput = {
    where?: DailyReportWhereInput
    data: XOR<DailyReportUpdateWithoutReportSignaturesInput, DailyReportUncheckedUpdateWithoutReportSignaturesInput>
  }

  export type DailyReportUpdateWithoutReportSignaturesInput = {
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutDailyReportsNestedInput
    reportDetails?: ReportDetailUpdateManyWithoutReportNestedInput
  }

  export type DailyReportUncheckedUpdateWithoutReportSignaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    reportDetails?: ReportDetailUncheckedUpdateManyWithoutReportNestedInput
  }

  export type TbmUserUpsertWithoutReportSignaturesInput = {
    update: XOR<TbmUserUpdateWithoutReportSignaturesInput, TbmUserUncheckedUpdateWithoutReportSignaturesInput>
    create: XOR<TbmUserCreateWithoutReportSignaturesInput, TbmUserUncheckedCreateWithoutReportSignaturesInput>
    where?: TbmUserWhereInput
  }

  export type TbmUserUpdateToOneWithWhereWithoutReportSignaturesInput = {
    where?: TbmUserWhereInput
    data: XOR<TbmUserUpdateWithoutReportSignaturesInput, TbmUserUncheckedUpdateWithoutReportSignaturesInput>
  }

  export type TbmUserUpdateWithoutReportSignaturesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
  }

  export type TbmUserUncheckedUpdateWithoutReportSignaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type UserProgressCreateManyCourseInput = {
    id?: string
    userId: string
    progress?: number
    completed?: boolean
    currentStep?: number
    timeSpent?: number
    lastAccessed?: Date | string
  }

  export type AssessmentCreateManyCourseInput = {
    id?: string
    question: string
    options: string
    correctAnswer: number
    difficulty?: string
  }

  export type UserAssessmentCreateManyCourseInput = {
    id?: string
    userId: string
    score: number
    totalQuestions: number
    passed: boolean
    attemptNumber?: number
    completedAt?: Date | string
  }

  export type CertificateCreateManyCourseInput = {
    id?: string
    userId: string
    certificateUrl: string
    issuedAt?: Date | string
  }

  export type UserProgressUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    currentStep?: IntFieldUpdateOperationsInput | number
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastAccessed?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProgressUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    currentStep?: IntFieldUpdateOperationsInput | number
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastAccessed?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProgressUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    currentStep?: IntFieldUpdateOperationsInput | number
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastAccessed?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    correctAnswer?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
  }

  export type AssessmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    correctAnswer?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
  }

  export type AssessmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    options?: StringFieldUpdateOperationsInput | string
    correctAnswer?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
  }

  export type UserAssessmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    attemptNumber?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssessmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    attemptNumber?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssessmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    attemptNumber?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    certificateUrl?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    certificateUrl?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    certificateUrl?: StringFieldUpdateOperationsInput | string
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChecklistTemplateCreateManyTeamInput = {
    id?: number
    name?: string | null
  }

  export type DailyReportCreateManyTeamInput = {
    id?: number
    reportDate: Date | string
    managerName?: string | null
    remarks?: string | null
  }

  export type TbmUserCreateManyTeamInput = {
    id?: number
    name?: string | null
  }

  export type ChecklistTemplateUpdateWithoutTeamInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    templateItems?: TemplateItemUpdateManyWithoutTemplateNestedInput
  }

  export type ChecklistTemplateUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    templateItems?: TemplateItemUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type ChecklistTemplateUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DailyReportUpdateWithoutTeamInput = {
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    reportDetails?: ReportDetailUpdateManyWithoutReportNestedInput
    reportSignatures?: ReportSignatureUpdateManyWithoutReportNestedInput
  }

  export type DailyReportUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    reportDetails?: ReportDetailUncheckedUpdateManyWithoutReportNestedInput
    reportSignatures?: ReportSignatureUncheckedUpdateManyWithoutReportNestedInput
  }

  export type DailyReportUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    managerName?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TbmUserUpdateWithoutTeamInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    reportSignatures?: ReportSignatureUpdateManyWithoutUserNestedInput
  }

  export type TbmUserUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    reportSignatures?: ReportSignatureUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TbmUserUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportSignatureCreateManyUserInput = {
    id?: number
    reportId: number
    signedAt?: Date | string
  }

  export type ReportSignatureUpdateWithoutUserInput = {
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: DailyReportUpdateOneRequiredWithoutReportSignaturesNestedInput
  }

  export type ReportSignatureUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSignatureUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateItemCreateManyTemplateInput = {
    id?: number
    category?: string | null
    subCategory?: string | null
    description?: string | null
    displayOrder?: number
  }

  export type TemplateItemUpdateWithoutTemplateInput = {
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    reportDetails?: ReportDetailUpdateManyWithoutItemNestedInput
  }

  export type TemplateItemUncheckedUpdateWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    reportDetails?: ReportDetailUncheckedUpdateManyWithoutItemNestedInput
  }

  export type TemplateItemUncheckedUpdateManyWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ReportDetailCreateManyItemInput = {
    id?: number
    reportId: number
    checkState?: string | null
  }

  export type ReportDetailUpdateWithoutItemInput = {
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
    report?: DailyReportUpdateOneRequiredWithoutReportDetailsNestedInput
  }

  export type ReportDetailUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDetailUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDetailCreateManyReportInput = {
    id?: number
    itemId: number
    checkState?: string | null
  }

  export type ReportSignatureCreateManyReportInput = {
    id?: number
    userId: number
    signedAt?: Date | string
  }

  export type ReportDetailUpdateWithoutReportInput = {
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
    item?: TemplateItemUpdateOneRequiredWithoutReportDetailsNestedInput
  }

  export type ReportDetailUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDetailUncheckedUpdateManyWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    checkState?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportSignatureUpdateWithoutReportInput = {
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: TbmUserUpdateOneRequiredWithoutReportSignaturesNestedInput
  }

  export type ReportSignatureUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSignatureUncheckedUpdateManyWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}