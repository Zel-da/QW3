
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  site: 'site',
  teamId: 'teamId',
  createdAt: 'createdAt'
};

exports.Prisma.NoticeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  viewCount: 'viewCount',
  imageUrl: 'imageUrl',
  attachmentUrl: 'attachmentUrl',
  attachmentName: 'attachmentName'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  imageUrl: 'imageUrl',
  authorId: 'authorId',
  noticeId: 'noticeId',
  createdAt: 'createdAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  duration: 'duration',
  videoUrl: 'videoUrl',
  documentUrl: 'documentUrl',
  color: 'color',
  icon: 'icon',
  isActive: 'isActive'
};

exports.Prisma.UserProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  progress: 'progress',
  completed: 'completed',
  currentStep: 'currentStep',
  timeSpent: 'timeSpent',
  lastAccessed: 'lastAccessed'
};

exports.Prisma.AssessmentScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  question: 'question',
  options: 'options',
  correctAnswer: 'correctAnswer',
  difficulty: 'difficulty'
};

exports.Prisma.UserAssessmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  score: 'score',
  totalQuestions: 'totalQuestions',
  passed: 'passed',
  attemptNumber: 'attemptNumber',
  completedAt: 'completedAt'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  certificateUrl: 'certificateUrl',
  issuedAt: 'issuedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  site: 'site',
  leaderId: 'leaderId'
};

exports.Prisma.ChecklistTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  teamId: 'teamId'
};

exports.Prisma.TemplateItemScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  category: 'category',
  subCategory: 'subCategory',
  description: 'description',
  displayOrder: 'displayOrder'
};

exports.Prisma.DailyReportScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  reportDate: 'reportDate',
  managerName: 'managerName',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  site: 'site'
};

exports.Prisma.ReportDetailScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  itemId: 'itemId',
  checkState: 'checkState',
  authorId: 'authorId',
  photoUrl: 'photoUrl',
  actionDescription: 'actionDescription',
  actionStatus: 'actionStatus'
};

exports.Prisma.ReportSignatureScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  userId: 'userId',
  signedAt: 'signedAt',
  signatureImage: 'signatureImage'
};

exports.Prisma.MonthlyApprovalScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  year: 'year',
  month: 'month',
  status: 'status',
  pdfUrl: 'pdfUrl',
  approverId: 'approverId',
  submittedAt: 'submittedAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Notice: 'Notice',
  Comment: 'Comment',
  Course: 'Course',
  UserProgress: 'UserProgress',
  Assessment: 'Assessment',
  UserAssessment: 'UserAssessment',
  Certificate: 'Certificate',
  Team: 'Team',
  ChecklistTemplate: 'ChecklistTemplate',
  TemplateItem: 'TemplateItem',
  DailyReport: 'DailyReport',
  ReportDetail: 'ReportDetail',
  ReportSignature: 'ReportSignature',
  MonthlyApproval: 'MonthlyApproval'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Administrator\\Downloads\\QW3\\FoodieMatch\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Administrator\\Downloads\\QW3\\FoodieMatch\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Consolidated User Model\nmodel User {\n  id        String   @id @default(uuid())\n  username  String   @unique\n  name      String? // User's full name\n  email     String?  @unique\n  password  String? // Optional for workers without login\n  role      String   @default(\"WORKER\")\n  site      String? // e.g., Asan, Hwaseong\n  teamId    Int?\n  createdAt DateTime @default(now())\n\n  team             Team?             @relation(\"TeamMembers\", fields: [teamId], references: [id])\n  ledTeams         Team[]            @relation(\"TeamLeader\")\n  notices          Notice[]\n  createdApprovals MonthlyApproval[] @relation(\"Approver\")\n  signatures       ReportSignature[]\n  comments         Comment[]\n  reportDetails    ReportDetail[]\n\n  @@index([teamId])\n}\n\nmodel Notice {\n  id             String    @id @default(uuid())\n  title          String\n  content        String\n  authorId       String\n  category       String    @default(\"GENERAL\")\n  createdAt      DateTime  @default(now())\n  updatedAt      DateTime  @updatedAt\n  isActive       Boolean   @default(true)\n  viewCount      Int       @default(0)\n  imageUrl       String?\n  attachmentUrl  String?\n  attachmentName String?\n  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  comments       Comment[]\n\n  @@index([authorId])\n}\n\nmodel Comment {\n  id        String   @id @default(uuid())\n  content   String\n  imageUrl  String?\n  authorId  String\n  noticeId  String\n  createdAt DateTime @default(now())\n\n  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  notice Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade)\n\n  @@index([authorId])\n  @@index([noticeId])\n}\n\nmodel Course {\n  id              String           @id @default(uuid())\n  title           String\n  description     String\n  type            String\n  duration        Int\n  videoUrl        String?\n  documentUrl     String?\n  color           String           @default(\"blue\")\n  icon            String\n  isActive        Boolean          @default(true)\n  assessments     Assessment[]\n  certificates    Certificate[]\n  userAssessments UserAssessment[]\n  userProgress    UserProgress[]\n}\n\nmodel UserProgress {\n  id           String   @id @default(uuid())\n  userId       String\n  courseId     String\n  progress     Int      @default(0)\n  completed    Boolean  @default(false)\n  currentStep  Int      @default(1)\n  timeSpent    Int      @default(0)\n  lastAccessed DateTime @default(now())\n  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([courseId])\n}\n\nmodel Assessment {\n  id            String @id @default(uuid())\n  courseId      String\n  question      String\n  options       String\n  correctAnswer Int\n  difficulty    String @default(\"medium\")\n  course        Course @relation(fields: [courseId], references: [id], onDelete: Cascade)\n\n  @@index([courseId])\n}\n\nmodel UserAssessment {\n  id             String   @id @default(uuid())\n  userId         String\n  courseId       String\n  score          Int\n  totalQuestions Int\n  passed         Boolean\n  attemptNumber  Int      @default(1)\n  completedAt    DateTime @default(now())\n  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([courseId])\n}\n\nmodel Certificate {\n  id             String   @id @default(uuid())\n  userId         String\n  courseId       String\n  certificateUrl String\n  issuedAt       DateTime @default(now())\n  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([courseId])\n}\n\nmodel Team {\n  id       Int     @id @default(autoincrement())\n  name     String\n  site     String?\n  leaderId String? // Team Leader\n\n  leader             User?               @relation(\"TeamLeader\", fields: [leaderId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  members            User[]              @relation(\"TeamMembers\")\n  checklistTemplates ChecklistTemplate[]\n  dailyReports       DailyReport[]\n  monthlyApprovals   MonthlyApproval[]\n\n  @@map(\"Teams\")\n}\n\nmodel ChecklistTemplate {\n  id     Int    @id @default(autoincrement())\n  name   String\n  teamId Int\n\n  team          Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  templateItems TemplateItem[]\n\n  @@index([teamId])\n  @@map(\"ChecklistTemplates\")\n}\n\nmodel TemplateItem {\n  id           Int     @id @default(autoincrement())\n  templateId   Int\n  category     String\n  subCategory  String?\n  description  String\n  displayOrder Int     @default(0)\n\n  template      ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)\n  reportDetails ReportDetail[]\n\n  @@index([templateId])\n  @@map(\"TemplateItems\")\n}\n\nmodel DailyReport {\n  id          Int      @id @default(autoincrement())\n  teamId      Int\n  reportDate  DateTime\n  managerName String?\n  remarks     String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  site        String?\n\n  team             Team              @relation(fields: [teamId], references: [id], onDelete: NoAction)\n  reportDetails    ReportDetail[]\n  reportSignatures ReportSignature[]\n\n  @@index([teamId])\n  @@map(\"DailyReports\")\n}\n\nmodel ReportDetail {\n  id         Int     @id @default(autoincrement())\n  reportId   Int\n  itemId     Int\n  checkState String?\n  authorId   String?\n\n  photoUrl          String?\n  actionDescription String?\n  actionStatus      String? @default(\"PENDING\")\n\n  item   TemplateItem @relation(fields: [itemId], references: [id], onDelete: NoAction)\n  report DailyReport  @relation(fields: [reportId], references: [id], onDelete: Cascade)\n  author User?        @relation(fields: [authorId], references: [id])\n\n  @@index([reportId])\n  @@index([itemId])\n  @@index([authorId])\n  @@map(\"ReportDetails\")\n}\n\nmodel ReportSignature {\n  id             Int      @id @default(autoincrement())\n  reportId       Int\n  userId         String\n  signedAt       DateTime @default(now())\n  signatureImage String?\n\n  report DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)\n  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([reportId])\n  @@index([userId])\n  @@map(\"ReportSignatures\")\n}\n\nmodel MonthlyApproval {\n  id          String    @id @default(uuid())\n  teamId      Int\n  year        Int\n  month       Int\n  status      String    @default(\"DRAFT\")\n  pdfUrl      String?\n  approverId  String?\n  submittedAt DateTime?\n  approvedAt  DateTime?\n\n  team     Team  @relation(fields: [teamId], references: [id])\n  approver User? @relation(\"Approver\", fields: [approverId], references: [id], onDelete: SetNull)\n\n  @@unique([teamId, year, month])\n  @@index([teamId])\n  @@index([approverId])\n}\n",
  "inlineSchemaHash": "6cbd82cfbac34270352af4eea1134e4c28b562bda3a5a6ce07e80cf2d98f78a6",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"site\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"TeamMembers\"},{\"name\":\"ledTeams\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"TeamLeader\"},{\"name\":\"notices\",\"kind\":\"object\",\"type\":\"Notice\",\"relationName\":\"NoticeToUser\"},{\"name\":\"createdApprovals\",\"kind\":\"object\",\"type\":\"MonthlyApproval\",\"relationName\":\"Approver\"},{\"name\":\"signatures\",\"kind\":\"object\",\"type\":\"ReportSignature\",\"relationName\":\"ReportSignatureToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"reportDetails\",\"kind\":\"object\",\"type\":\"ReportDetail\",\"relationName\":\"ReportDetailToUser\"}],\"dbName\":null},\"Notice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"viewCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachmentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachmentName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NoticeToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToNotice\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"noticeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"notice\",\"kind\":\"object\",\"type\":\"Notice\",\"relationName\":\"CommentToNotice\"}],\"dbName\":null},\"Course\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"videoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"assessments\",\"kind\":\"object\",\"type\":\"Assessment\",\"relationName\":\"AssessmentToCourse\"},{\"name\":\"certificates\",\"kind\":\"object\",\"type\":\"Certificate\",\"relationName\":\"CertificateToCourse\"},{\"name\":\"userAssessments\",\"kind\":\"object\",\"type\":\"UserAssessment\",\"relationName\":\"CourseToUserAssessment\"},{\"name\":\"userProgress\",\"kind\":\"object\",\"type\":\"UserProgress\",\"relationName\":\"CourseToUserProgress\"}],\"dbName\":null},\"UserProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"currentStep\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastAccessed\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToUserProgress\"}],\"dbName\":null},\"Assessment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"correctAnswer\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"AssessmentToCourse\"}],\"dbName\":null},\"UserAssessment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalQuestions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"passed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"attemptNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToUserAssessment\"}],\"dbName\":null},\"Certificate\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"certificateUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"issuedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CertificateToCourse\"}],\"dbName\":null},\"Team\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"site\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"leaderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"leader\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeamLeader\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeamMembers\"},{\"name\":\"checklistTemplates\",\"kind\":\"object\",\"type\":\"ChecklistTemplate\",\"relationName\":\"ChecklistTemplateToTeam\"},{\"name\":\"dailyReports\",\"kind\":\"object\",\"type\":\"DailyReport\",\"relationName\":\"DailyReportToTeam\"},{\"name\":\"monthlyApprovals\",\"kind\":\"object\",\"type\":\"MonthlyApproval\",\"relationName\":\"MonthlyApprovalToTeam\"}],\"dbName\":\"Teams\"},\"ChecklistTemplate\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"ChecklistTemplateToTeam\"},{\"name\":\"templateItems\",\"kind\":\"object\",\"type\":\"TemplateItem\",\"relationName\":\"ChecklistTemplateToTemplateItem\"}],\"dbName\":\"ChecklistTemplates\"},\"TemplateItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"templateId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subCategory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayOrder\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"template\",\"kind\":\"object\",\"type\":\"ChecklistTemplate\",\"relationName\":\"ChecklistTemplateToTemplateItem\"},{\"name\":\"reportDetails\",\"kind\":\"object\",\"type\":\"ReportDetail\",\"relationName\":\"ReportDetailToTemplateItem\"}],\"dbName\":\"TemplateItems\"},\"DailyReport\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reportDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"managerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"remarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"site\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"DailyReportToTeam\"},{\"name\":\"reportDetails\",\"kind\":\"object\",\"type\":\"ReportDetail\",\"relationName\":\"DailyReportToReportDetail\"},{\"name\":\"reportSignatures\",\"kind\":\"object\",\"type\":\"ReportSignature\",\"relationName\":\"DailyReportToReportSignature\"}],\"dbName\":\"DailyReports\"},\"ReportDetail\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reportId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"checkState\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"photoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"TemplateItem\",\"relationName\":\"ReportDetailToTemplateItem\"},{\"name\":\"report\",\"kind\":\"object\",\"type\":\"DailyReport\",\"relationName\":\"DailyReportToReportDetail\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReportDetailToUser\"}],\"dbName\":\"ReportDetails\"},\"ReportSignature\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reportId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"signedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"signatureImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"report\",\"kind\":\"object\",\"type\":\"DailyReport\",\"relationName\":\"DailyReportToReportSignature\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReportSignatureToUser\"}],\"dbName\":\"ReportSignatures\"},\"MonthlyApproval\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"month\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pdfUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"approverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"approvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"MonthlyApprovalToTeam\"},{\"name\":\"approver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"Approver\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

