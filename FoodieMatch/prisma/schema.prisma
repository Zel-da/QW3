generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  username         String            @unique
  name             String?
  email            String?           @unique
  password         String?
  role             String            @default("WORKER")
  site             String?
  teamId           Int?
  createdAt        DateTime          @default(now())
  team             Team?             @relation("TeamMembers", fields: [teamId], references: [id])
  ledTeams         Team[]            @relation("TeamLeader")
  notices          Notice[]
  createdApprovals MonthlyApproval[] @relation("Approver")
  signatures       ReportSignature[]
  comments         Comment[]
  reportDetails    ReportDetail[]

  @@index([teamId])
  @@index([role])
  @@index([site])
  @@index([role, site])
}

model Notice {
  id          String       @id @default(uuid())
  title       String
  content     String
  authorId    String
  category    String       @default("GENERAL")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isActive    Boolean      @default(true)
  viewCount   Int          @default(0)
  imageUrl    String?
  attachmentUrl String?
  attachmentName String?
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  attachments Attachment[]

  @@index([authorId])
  @@index([createdAt])
  @@index([category])
  @@index([category, createdAt])
}

model Comment {
  id          String       @id @default(uuid())
  content     String
  imageUrl    String?
  authorId    String
  noticeId    String
  createdAt   DateTime     @default(now())
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notice      Notice       @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  @@index([authorId])
  @@index([noticeId])
}

model Course {
  id              String           @id @default(uuid())
  title           String
  description     String
  type            String
  duration        Int
  videoUrl        String?
  documentUrl     String?
  color           String           @default("blue")
  icon            String
  isActive        Boolean          @default(true)
  assessments     Assessment[]
  certificates    Certificate[]
  userAssessments UserAssessment[]
  userProgress    UserProgress[]
}

model UserProgress {
  id           String   @id @default(uuid())
  userId       String
  courseId     String
  progress     Int      @default(0)
  completed    Boolean  @default(false)
  currentStep  Int      @default(1)
  timeSpent    Int      @default(0)
  lastAccessed DateTime @default(now())
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}

model Assessment {
  id            String @id @default(uuid())
  courseId      String
  question      String
  options       String
  correctAnswer Int
  difficulty    String @default("medium")
  course        Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model UserAssessment {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  score          Int
  totalQuestions Int
  passed         Boolean
  attemptNumber  Int      @default(1)
  completedAt    DateTime @default(now())
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}

model Certificate {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  certificateUrl String
  issuedAt       DateTime @default(now())
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}

model Team {
  id                 Int                 @id @default(autoincrement())
  name               String
  site               String?
  leaderId           String?
  leader             User?               @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  members            User[]              @relation("TeamMembers")
  checklistTemplates ChecklistTemplate[]
  dailyReports       DailyReport[]
  monthlyApprovals   MonthlyApproval[]

  @@map("Teams")
}

model ChecklistTemplate {
  id            Int            @id @default(autoincrement())
  name          String
  teamId        Int
  team          Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  templateItems TemplateItem[]

  @@index([teamId])
  @@map("ChecklistTemplates")
}

model TemplateItem {
  id           Int               @id @default(autoincrement())
  templateId   Int
  category     String
  subCategory  String?
  description  String
  displayOrder Int               @default(0)
  template     ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  reportDetails ReportDetail[]

  @@index([templateId])
  @@map("TemplateItems")
}

model DailyReport {
  id               Int               @id @default(autoincrement())
  teamId           Int
  reportDate       DateTime
  managerName      String?
  remarks          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  site             String?
  team             Team              @relation(fields: [teamId], references: [id], onDelete: NoAction)
  reportDetails    ReportDetail[]
  reportSignatures ReportSignature[]

  @@index([teamId])
  @@index([reportDate])
  @@index([site])
  @@index([teamId, reportDate])
  @@index([site, reportDate])
  @@map("DailyReports")
}

model ReportDetail {
  id                Int           @id @default(autoincrement())
  reportId          Int
  itemId            Int
  checkState        String?
  authorId          String?
  actionDescription String?
  actionStatus      String?       @default("PENDING")
  item              TemplateItem  @relation(fields: [itemId], references: [id], onDelete: NoAction)
  report            DailyReport   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  author            User?         @relation(fields: [authorId], references: [id])
  attachments       Attachment[]

  @@index([reportId])
  @@index([itemId])
  @@index([authorId])
  @@map("ReportDetails")
}

model ReportSignature {
  id             Int         @id @default(autoincrement())
  reportId       Int
  userId         String
  signedAt       DateTime    @default(now())
  signatureImage String?
  report         DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([userId])
  @@map("ReportSignatures")
}

model MonthlyApproval {
  id          String   @id @default(uuid())
  teamId      Int
  year        Int
  month       Int
  status      String   @default("DRAFT")
  pdfUrl      String?
  approverId  String?
  submittedAt DateTime?
  approvedAt  DateTime?
  team        Team     @relation(fields: [teamId], references: [id])
  approver    User?    @relation("Approver", fields: [approverId], references: [id], onDelete: SetNull)

  @@unique([teamId, year, month])
  @@index([teamId])
  @@index([approverId])
}

model Attachment {
  id             String        @id @default(uuid())
  url            String
  name           String
  type           String        @default("file") // 'image' | 'file'
  size           Int           @default(0)
  mimeType       String        @default("application/octet-stream")
  createdAt      DateTime      @default(now())
  noticeId       String?
  notice         Notice?       @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  commentId      String?
  comment        Comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reportDetailId Int?
  reportDetail   ReportDetail? @relation(fields: [reportDetailId], references: [id], onDelete: Cascade)

  @@index([noticeId])
  @@index([commentId])
  @@index([reportDetailId])
}