generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for User Roles
enum Role {
  ADMIN         // 전체 관리자
  SAFETY_TEAM   // 안전보건팀 (교육 콘텐츠 관리)
  TEAM_LEADER   // 팀장 (팀원 관리, TBM 작성)
  WORKER        // 일반 작업자 (교육 수강, 서명)
  OFFICE_WORKER // 사무직 (서명 예외)
}

// Enum for Action Item Status
enum ActionStatus {
  PENDING     // 조치 대기
  IN_PROGRESS // 조치 중
  COMPLETED   // 조치 완료
  REVIEW      // 검토 필요
}

// Consolidated User Model
model User {
  id               String            @id @default(uuid())
  username         String            @unique
  name             String?           // User's full name
  email            String?           @unique
  password         String?           // Optional for workers without login
  role             Role              @default(WORKER)
  site             String?           // e.g., Asan, Hwaseong
  teamId           Int?              // Relation to Team
  createdAt        DateTime          @default(now())

  team             Team?             @relation("TeamMembers", fields: [teamId], references: [id])
  ledTeams         Team[]            @relation("TeamLeader") // Back-relation for teams led by this user
  notices          Notice[]
  createdApprovals MonthlyApproval[] @relation("Approver")
  signatures       ReportSignature[]
  comments         Comment[]
  reportDetails    ReportDetail[]

  @@index([teamId])
}

model Notice {
  id             String   @id @default(uuid())
  title          String
  content        String
  authorId       String
  category       String   @default("GENERAL") // e.g., GENERAL, SAFETY_CHECK_DAY
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)
  viewCount      Int      @default(0)
  imageUrl       String?
  attachmentUrl  String?
  attachmentName String?
  author         User     @relation(fields: [authorId], references: [id])
  comments       Comment[]

  @@index([authorId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  authorId  String
  noticeId  String
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notice    Notice   @relation(fields: [noticeId], references: [id])

  @@index([authorId])
  @@index([noticeId])
}

// Models for Safety Education (No changes proposed for now)
model Course {
  id              String           @id @default(uuid())
  title           String
  description     String
  type            String
  duration        Int
  videoUrl        String?
  documentUrl     String?
  color           String           @default("blue")
  icon            String
  isActive        Boolean          @default(true)
  assessments     Assessment[]
  certificates    Certificate[]
  userAssessments UserAssessment[]
  userProgress    UserProgress[]
}

model UserProgress {
  id           String   @id @default(uuid())
  userId       String
  courseId     String
  progress     Int      @default(0)
  completed    Boolean  @default(false)
  currentStep  Int      @default(1)
  timeSpent    Int      @default(0)
  lastAccessed DateTime @default(now())
  course       Course   @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model Assessment {
  id            String @id @default(uuid())
  courseId      String
  question      String
  options       String
  correctAnswer Int
  difficulty    String @default("medium")
  course        Course @relation(fields: [courseId], references: [id])

  @@index([courseId])
}

model UserAssessment {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  score          Int
  totalQuestions Int
  passed         Boolean
  attemptNumber  Int      @default(1)
  completedAt    DateTime @default(now())
  course         Course   @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model Certificate {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  certificateUrl String
  issuedAt       DateTime @default(now())
  course         Course   @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}

// --- TBM & Team Management Models ---

model Team {
  id                 Int                 @id @default(autoincrement())
  name               String
  site               String?
  leaderId           String?             // Team Leader

  leader             User?               @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  members            User[]              @relation("TeamMembers")
  checklistTemplates ChecklistTemplate[]
  dailyReports       DailyReport[]
  monthlyApprovals   MonthlyApproval[]

  @@map("Teams")
}

model ChecklistTemplate {
  id            Int            @id @default(autoincrement())
  name          String
  teamId        Int

  team          Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  templateItems TemplateItem[]

  @@index([teamId])
  @@map("ChecklistTemplates")
}

model TemplateItem {
  id            Int               @id @default(autoincrement())
  templateId    Int
  category      String
  subCategory   String?
  description   String
  displayOrder  Int               @default(0)

  template      ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  reportDetails ReportDetail[]

  @@index([templateId])
  @@map("TemplateItems")
}

model DailyReport {
  id               Int               @id @default(autoincrement())
  teamId           Int
  reportDate       DateTime
  managerName      String?           // This could be derived from User going forward
  remarks          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  site             String? // e.g., Asan, Hwaseong

  team             Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  reportDetails    ReportDetail[]
  reportSignatures ReportSignature[]

  @@index([teamId])
  @@map("DailyReports")
}

model ReportDetail {
  id                Int           @id @default(autoincrement())
  reportId          Int
  itemId            Int
  checkState        String?       // "O", "△", "X"
  authorId          String?       // New: User who made this check

  // New fields for photo and action items
  photoUrl          String?
  actionDescription String?
  actionStatus      ActionStatus? @default(PENDING)

  item              TemplateItem  @relation(fields: [itemId], references: [id])
  report            DailyReport   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  author            User?         @relation(fields: [authorId], references: [id])

  @@index([reportId])
  @@index([itemId])
  @@index([authorId])
  @@map("ReportDetails")
}

model ReportSignature {
  id             Int         @id @default(autoincrement())
  reportId       Int
  userId         String      // Changed to String to match new User model ID
  signedAt       DateTime    @default(now())
  signatureImage String?     // Kept here for historical signatures, new ones can link to User.signature

  report         DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([userId])
  @@map("ReportSignatures")
}

// New model for Monthly TBM Approval
model MonthlyApproval {
  id          String   @id @default(uuid())
  teamId      Int
  year        Int
  month       Int
  status      String   @default("DRAFT") // DRAFT, SUBMITTED, APPROVED
  pdfUrl      String?
  approverId  String?
  submittedAt DateTime?
  approvedAt  DateTime?

  team        Team     @relation(fields: [teamId], references: [id])
  approver    User?    @relation("Approver", fields: [approverId], references: [id])

  @@unique([teamId, year, month])
  @@index([teamId])
  @@index([approverId])
}
